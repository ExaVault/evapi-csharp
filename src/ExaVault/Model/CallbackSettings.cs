/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// CallbackSettings
    /// </summary>
    [DataContract]
        public partial class CallbackSettings :  IEquatable<CallbackSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackSettings" /> class.
        /// </summary>
        /// <param name="accountId">ID of the account these settings belongs to..</param>
        /// <param name="endpointUrl">Where callback settings object sent to..</param>
        /// <param name="token">Verification token for the request authentication..</param>
        /// <param name="triggers">triggers.</param>
        public CallbackSettings(string accountId = default(string), string endpointUrl = default(string), string token = default(string), CallbackSettingsTriggers triggers = default(CallbackSettingsTriggers))
        {
            this.AccountId = accountId;
            this.EndpointUrl = endpointUrl;
            this.Token = token;
            this.Triggers = triggers;
        }
        
        /// <summary>
        /// ID of the account these settings belongs to.
        /// </summary>
        /// <value>ID of the account these settings belongs to.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Where callback settings object sent to.
        /// </summary>
        /// <value>Where callback settings object sent to.</value>
        [DataMember(Name="endpointUrl", EmitDefaultValue=false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Verification token for the request authentication.
        /// </summary>
        /// <value>Verification token for the request authentication.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        [DataMember(Name="triggers", EmitDefaultValue=false)]
        public CallbackSettingsTriggers Triggers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallbackSettings {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallbackSettings);
        }

        /// <summary>
        /// Returns true if CallbackSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CallbackSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallbackSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Triggers == input.Triggers ||
                    (this.Triggers != null &&
                    this.Triggers.Equals(input.Triggers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.EndpointUrl != null)
                    hashCode = hashCode * 59 + this.EndpointUrl.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Triggers != null)
                    hashCode = hashCode * 59 + this.Triggers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// Attributes of the user including expiration, home directory, and permissions. 
    /// </summary>
    [DataContract]
        public partial class UserAttributes :  IEquatable<UserAttributes>, IValidatableObject
    {
        /// <summary>
        /// Indicates user activity status. &#x60;0&#x60; means the user is locked and cannot log in. &#x60;1&#x60; means the user is active and can log in.
        /// </summary>
        /// <value>Indicates user activity status. &#x60;0&#x60; means the user is locked and cannot log in. &#x60;1&#x60; means the user is active and can log in.</value>
                public enum StatusEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1        }
        /// <summary>
        /// Indicates user activity status. &#x60;0&#x60; means the user is locked and cannot log in. &#x60;1&#x60; means the user is active and can log in.
        /// </summary>
        /// <value>Indicates user activity status. &#x60;0&#x60; means the user is locked and cannot log in. &#x60;1&#x60; means the user is active and can log in.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// User&#x27;s access level
        /// </summary>
        /// <value>User&#x27;s access level</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RoleEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1,
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 2,
            /// <summary>
            /// Enum Master for value: master
            /// </summary>
            [EnumMember(Value = "master")]
            Master = 3        }
        /// <summary>
        /// User&#x27;s access level
        /// </summary>
        /// <value>User&#x27;s access level</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAttributes" /> class.
        /// </summary>
        /// <param name="status">Indicates user activity status. &#x60;0&#x60; means the user is locked and cannot log in. &#x60;1&#x60; means the user is active and can log in. (required).</param>
        /// <param name="expiration">Timestamp of user expiration..</param>
        /// <param name="created">Timestamp of user creation. (required).</param>
        /// <param name="modified">Timestamp of user modification. (required).</param>
        /// <param name="accessTimestamp">Timestamp of most recent successful user login..</param>
        /// <param name="accountName">Name of the account this user belongs to. (required).</param>
        /// <param name="username">Username of the user. (required).</param>
        /// <param name="nickname">Nickname of the user. (required).</param>
        /// <param name="email">Email address of the user..</param>
        /// <param name="homeDir">Path to the user&#x27;s home folder. (required).</param>
        /// <param name="permissions">permissions (required).</param>
        /// <param name="role">User&#x27;s access level (required).</param>
        /// <param name="timeZone">User&#x27;s timezone. See &lt;a href&#x3D;&#x27;https://php.net/manual/en/timezones.php&#x27; target&#x3D;&#x27;blank&#x27;&gt;this page&lt;/a&gt; for allowed values. (required).</param>
        /// <param name="onboarding">Whether the onboarding help system is enabled for this user. &#x60;true&#x60; means that additional help popups are displayed in the web application for this user. (required).</param>
        /// <param name="firstLogin">&#x60;true&#x60; if the user has logged into the system..</param>
        public UserAttributes(StatusEnum status = default(StatusEnum), string expiration = default(string), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?), string accessTimestamp = default(string), string accountName = default(string), string username = default(string), string nickname = default(string), string email = default(string), string homeDir = default(string), UserPermissions permissions = default(UserPermissions), RoleEnum role = default(RoleEnum), string timeZone = default(string), bool? onboarding = default(bool?), bool? firstLogin = default(bool?))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            // to ensure "modified" is required (not null)
            if (modified == null)
            {
                throw new InvalidDataException("modified is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Modified = modified;
            }
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new InvalidDataException("accountName is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.AccountName = accountName;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "nickname" is required (not null)
            if (nickname == null)
            {
                throw new InvalidDataException("nickname is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Nickname = nickname;
            }
            // to ensure "homeDir" is required (not null)
            if (homeDir == null)
            {
                throw new InvalidDataException("homeDir is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.HomeDir = homeDir;
            }
            // to ensure "permissions" is required (not null)
            if (permissions == null)
            {
                throw new InvalidDataException("permissions is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Permissions = permissions;
            }
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new InvalidDataException("role is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Role = role;
            }
            // to ensure "timeZone" is required (not null)
            if (timeZone == null)
            {
                throw new InvalidDataException("timeZone is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.TimeZone = timeZone;
            }
            // to ensure "onboarding" is required (not null)
            if (onboarding == null)
            {
                throw new InvalidDataException("onboarding is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Onboarding = onboarding;
            }
            this.Expiration = expiration;
            this.AccessTimestamp = accessTimestamp;
            this.Email = email;
            this.FirstLogin = firstLogin;
        }
        

        /// <summary>
        /// Timestamp of user expiration.
        /// </summary>
        /// <value>Timestamp of user expiration.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public string Expiration { get; set; }

        /// <summary>
        /// Timestamp of user creation.
        /// </summary>
        /// <value>Timestamp of user creation.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Timestamp of user modification.
        /// </summary>
        /// <value>Timestamp of user modification.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Timestamp of most recent successful user login.
        /// </summary>
        /// <value>Timestamp of most recent successful user login.</value>
        [DataMember(Name="accessTimestamp", EmitDefaultValue=false)]
        public string AccessTimestamp { get; set; }

        /// <summary>
        /// Name of the account this user belongs to.
        /// </summary>
        /// <value>Name of the account this user belongs to.</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Username of the user.
        /// </summary>
        /// <value>Username of the user.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Nickname of the user.
        /// </summary>
        /// <value>Nickname of the user.</value>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        /// <value>Email address of the user.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Path to the user&#x27;s home folder.
        /// </summary>
        /// <value>Path to the user&#x27;s home folder.</value>
        [DataMember(Name="homeDir", EmitDefaultValue=false)]
        public string HomeDir { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public UserPermissions Permissions { get; set; }


        /// <summary>
        /// User&#x27;s timezone. See &lt;a href&#x3D;&#x27;https://php.net/manual/en/timezones.php&#x27; target&#x3D;&#x27;blank&#x27;&gt;this page&lt;/a&gt; for allowed values.
        /// </summary>
        /// <value>User&#x27;s timezone. See &lt;a href&#x3D;&#x27;https://php.net/manual/en/timezones.php&#x27; target&#x3D;&#x27;blank&#x27;&gt;this page&lt;/a&gt; for allowed values.</value>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Whether the onboarding help system is enabled for this user. &#x60;true&#x60; means that additional help popups are displayed in the web application for this user.
        /// </summary>
        /// <value>Whether the onboarding help system is enabled for this user. &#x60;true&#x60; means that additional help popups are displayed in the web application for this user.</value>
        [DataMember(Name="onboarding", EmitDefaultValue=false)]
        public bool? Onboarding { get; set; }

        /// <summary>
        /// &#x60;true&#x60; if the user has logged into the system.
        /// </summary>
        /// <value>&#x60;true&#x60; if the user has logged into the system.</value>
        [DataMember(Name="firstLogin", EmitDefaultValue=false)]
        public bool? FirstLogin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAttributes {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  AccessTimestamp: ").Append(AccessTimestamp).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  HomeDir: ").Append(HomeDir).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Onboarding: ").Append(Onboarding).Append("\n");
            sb.Append("  FirstLogin: ").Append(FirstLogin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAttributes);
        }

        /// <summary>
        /// Returns true if UserAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.AccessTimestamp == input.AccessTimestamp ||
                    (this.AccessTimestamp != null &&
                    this.AccessTimestamp.Equals(input.AccessTimestamp))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.HomeDir == input.HomeDir ||
                    (this.HomeDir != null &&
                    this.HomeDir.Equals(input.HomeDir))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.Onboarding == input.Onboarding ||
                    (this.Onboarding != null &&
                    this.Onboarding.Equals(input.Onboarding))
                ) && 
                (
                    this.FirstLogin == input.FirstLogin ||
                    (this.FirstLogin != null &&
                    this.FirstLogin.Equals(input.FirstLogin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.AccessTimestamp != null)
                    hashCode = hashCode * 59 + this.AccessTimestamp.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.HomeDir != null)
                    hashCode = hashCode * 59 + this.HomeDir.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.Onboarding != null)
                    hashCode = hashCode * 59 + this.Onboarding.GetHashCode();
                if (this.FirstLogin != null)
                    hashCode = hashCode * 59 + this.FirstLogin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

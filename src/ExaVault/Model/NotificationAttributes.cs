/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// Attributes for the notification including the path, recipients, and share data. 
    /// </summary>
    [DataContract]
        public partial class NotificationAttributes :  IEquatable<NotificationAttributes>, IValidatableObject
    {
        /// <summary>
        /// Type of the resource the notification is attached to. 
        /// </summary>
        /// <value>Type of the resource the notification is attached to. </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1,
            /// <summary>
            /// Enum Folder for value: folder
            /// </summary>
            [EnumMember(Value = "folder")]
            Folder = 2,
            /// <summary>
            /// Enum Sharedfolder for value: shared_folder
            /// </summary>
            [EnumMember(Value = "shared_folder")]
            Sharedfolder = 3,
            /// <summary>
            /// Enum Sendreceipt for value: send_receipt
            /// </summary>
            [EnumMember(Value = "send_receipt")]
            Sendreceipt = 4,
            /// <summary>
            /// Enum Sharereceipt for value: share_receipt
            /// </summary>
            [EnumMember(Value = "share_receipt")]
            Sharereceipt = 5,
            /// <summary>
            /// Enum Filedrop for value: file_drop
            /// </summary>
            [EnumMember(Value = "file_drop")]
            Filedrop = 6        }
        /// <summary>
        /// Type of the resource the notification is attached to. 
        /// </summary>
        /// <value>Type of the resource the notification is attached to. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Action that triggers notification.
        /// </summary>
        /// <value>Action that triggers notification.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActionEnum
        {
            /// <summary>
            /// Enum Upload for value: upload
            /// </summary>
            [EnumMember(Value = "upload")]
            Upload = 1,
            /// <summary>
            /// Enum Download for value: download
            /// </summary>
            [EnumMember(Value = "download")]
            Download = 2,
            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 3,
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 4        }
        /// <summary>
        /// Action that triggers notification.
        /// </summary>
        /// <value>Action that triggers notification.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationAttributes" /> class.
        /// </summary>
        /// <param name="userId">ID of the user that the notification belongs to..</param>
        /// <param name="type">Type of the resource the notification is attached to. .</param>
        /// <param name="path">Path to the item that the notification is set on..</param>
        /// <param name="name">Name of the item that the notification is set on..</param>
        /// <param name="action">Action that triggers notification..</param>
        /// <param name="usernames">Detail on which users can trigger the notification..</param>
        /// <param name="recipients">Notification recipients..</param>
        /// <param name="sendEmail">Whether or not an email will send when the notification is triggered..</param>
        /// <param name="readableDescription">Human readable description of the notification..</param>
        /// <param name="readableDescriptionWithoutPath">Human readable description of the notification without item path..</param>
        /// <param name="shareId">ID of the share that the notification belogns to..</param>
        /// <param name="message">Custom message that will be sent to the notification recipients..</param>
        /// <param name="created">Timestamp of notifiction creation..</param>
        /// <param name="modified">Timestamp of notification modification..</param>
        public NotificationAttributes(string userId = default(string), TypeEnum? type = default(TypeEnum?), string path = default(string), string name = default(string), ActionEnum? action = default(ActionEnum?), List<string> usernames = default(List<string>), List<NotificationRecipient> recipients = default(List<NotificationRecipient>), bool? sendEmail = default(bool?), string readableDescription = default(string), string readableDescriptionWithoutPath = default(string), string shareId = default(string), string message = default(string), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?))
        {
            this.UserId = userId;
            this.Type = type;
            this.Path = path;
            this.Name = name;
            this.Action = action;
            this.Usernames = usernames;
            this.Recipients = recipients;
            this.SendEmail = sendEmail;
            this.ReadableDescription = readableDescription;
            this.ReadableDescriptionWithoutPath = readableDescriptionWithoutPath;
            this.ShareId = shareId;
            this.Message = message;
            this.Created = created;
            this.Modified = modified;
        }
        
        /// <summary>
        /// ID of the user that the notification belongs to.
        /// </summary>
        /// <value>ID of the user that the notification belongs to.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }


        /// <summary>
        /// Path to the item that the notification is set on.
        /// </summary>
        /// <value>Path to the item that the notification is set on.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Name of the item that the notification is set on.
        /// </summary>
        /// <value>Name of the item that the notification is set on.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Detail on which users can trigger the notification.
        /// </summary>
        /// <value>Detail on which users can trigger the notification.</value>
        [DataMember(Name="usernames", EmitDefaultValue=false)]
        public List<string> Usernames { get; set; }

        /// <summary>
        /// Notification recipients.
        /// </summary>
        /// <value>Notification recipients.</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<NotificationRecipient> Recipients { get; set; }

        /// <summary>
        /// Whether or not an email will send when the notification is triggered.
        /// </summary>
        /// <value>Whether or not an email will send when the notification is triggered.</value>
        [DataMember(Name="sendEmail", EmitDefaultValue=false)]
        public bool? SendEmail { get; set; }

        /// <summary>
        /// Human readable description of the notification.
        /// </summary>
        /// <value>Human readable description of the notification.</value>
        [DataMember(Name="readableDescription", EmitDefaultValue=false)]
        public string ReadableDescription { get; set; }

        /// <summary>
        /// Human readable description of the notification without item path.
        /// </summary>
        /// <value>Human readable description of the notification without item path.</value>
        [DataMember(Name="readableDescriptionWithoutPath", EmitDefaultValue=false)]
        public string ReadableDescriptionWithoutPath { get; set; }

        /// <summary>
        /// ID of the share that the notification belogns to.
        /// </summary>
        /// <value>ID of the share that the notification belogns to.</value>
        [DataMember(Name="shareId", EmitDefaultValue=false)]
        public string ShareId { get; set; }

        /// <summary>
        /// Custom message that will be sent to the notification recipients.
        /// </summary>
        /// <value>Custom message that will be sent to the notification recipients.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Timestamp of notifiction creation.
        /// </summary>
        /// <value>Timestamp of notifiction creation.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Timestamp of notification modification.
        /// </summary>
        /// <value>Timestamp of notification modification.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationAttributes {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Usernames: ").Append(Usernames).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("  ReadableDescription: ").Append(ReadableDescription).Append("\n");
            sb.Append("  ReadableDescriptionWithoutPath: ").Append(ReadableDescriptionWithoutPath).Append("\n");
            sb.Append("  ShareId: ").Append(ShareId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationAttributes);
        }

        /// <summary>
        /// Returns true if NotificationAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Usernames == input.Usernames ||
                    this.Usernames != null &&
                    input.Usernames != null &&
                    this.Usernames.SequenceEqual(input.Usernames)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.SendEmail == input.SendEmail ||
                    (this.SendEmail != null &&
                    this.SendEmail.Equals(input.SendEmail))
                ) && 
                (
                    this.ReadableDescription == input.ReadableDescription ||
                    (this.ReadableDescription != null &&
                    this.ReadableDescription.Equals(input.ReadableDescription))
                ) && 
                (
                    this.ReadableDescriptionWithoutPath == input.ReadableDescriptionWithoutPath ||
                    (this.ReadableDescriptionWithoutPath != null &&
                    this.ReadableDescriptionWithoutPath.Equals(input.ReadableDescriptionWithoutPath))
                ) && 
                (
                    this.ShareId == input.ShareId ||
                    (this.ShareId != null &&
                    this.ShareId.Equals(input.ShareId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Usernames != null)
                    hashCode = hashCode * 59 + this.Usernames.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.SendEmail != null)
                    hashCode = hashCode * 59 + this.SendEmail.GetHashCode();
                if (this.ReadableDescription != null)
                    hashCode = hashCode * 59 + this.ReadableDescription.GetHashCode();
                if (this.ReadableDescriptionWithoutPath != null)
                    hashCode = hashCode * 59 + this.ReadableDescriptionWithoutPath.GetHashCode();
                if (this.ShareId != null)
                    hashCode = hashCode * 59 + this.ShareId.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

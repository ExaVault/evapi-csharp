/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// BrandingSettings
    /// </summary>
    [DataContract]
        public partial class BrandingSettings :  IEquatable<BrandingSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingSettings" /> class.
        /// </summary>
        /// <param name="companyName">null.</param>
        /// <param name="customEmail">null.</param>
        /// <param name="logo">null.</param>
        /// <param name="logoExt">null.</param>
        /// <param name="theme">null.</param>
        public BrandingSettings(string companyName = default(string), string customEmail = default(string), string logo = default(string), string logoExt = default(string), string theme = default(string))
        {
            this.CompanyName = companyName;
            this.CustomEmail = customEmail;
            this.Logo = logo;
            this.LogoExt = logoExt;
            this.Theme = theme;
        }
        
        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name="customEmail", EmitDefaultValue=false)]
        public string CustomEmail { get; set; }

        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public string Logo { get; set; }

        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name="logoExt", EmitDefaultValue=false)]
        public string LogoExt { get; set; }

        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public string Theme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandingSettings {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CustomEmail: ").Append(CustomEmail).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoExt: ").Append(LogoExt).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandingSettings);
        }

        /// <summary>
        /// Returns true if BrandingSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandingSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandingSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CustomEmail == input.CustomEmail ||
                    (this.CustomEmail != null &&
                    this.CustomEmail.Equals(input.CustomEmail))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.LogoExt == input.LogoExt ||
                    (this.LogoExt != null &&
                    this.LogoExt.Equals(input.LogoExt))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CustomEmail != null)
                    hashCode = hashCode * 59 + this.CustomEmail.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.LogoExt != null)
                    hashCode = hashCode * 59 + this.LogoExt.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// ResourceRelationships
    /// </summary>
    [DataContract]
        public partial class ResourceRelationships :  IEquatable<ResourceRelationships>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceRelationships" /> class.
        /// </summary>
        /// <param name="share">share.</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="directFile">directFile.</param>
        /// <param name="parentResource">parentResource.</param>
        public ResourceRelationships(ResourceRelationshipsShare share = default(ResourceRelationshipsShare), List<ResourceRelationshipsNotifications> notifications = default(List<ResourceRelationshipsNotifications>), ResourceRelationshipsDirectFile directFile = default(ResourceRelationshipsDirectFile), ResourceRelationshipsParentResource parentResource = default(ResourceRelationshipsParentResource))
        {
            this.Share = share;
            this.Notifications = notifications;
            this.DirectFile = directFile;
            this.ParentResource = parentResource;
        }
        
        /// <summary>
        /// Gets or Sets Share
        /// </summary>
        [DataMember(Name="share", EmitDefaultValue=false)]
        public ResourceRelationshipsShare Share { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<ResourceRelationshipsNotifications> Notifications { get; set; }

        /// <summary>
        /// Gets or Sets DirectFile
        /// </summary>
        [DataMember(Name="directFile", EmitDefaultValue=false)]
        public ResourceRelationshipsDirectFile DirectFile { get; set; }

        /// <summary>
        /// Gets or Sets ParentResource
        /// </summary>
        [DataMember(Name="parentResource", EmitDefaultValue=false)]
        public ResourceRelationshipsParentResource ParentResource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceRelationships {\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  DirectFile: ").Append(DirectFile).Append("\n");
            sb.Append("  ParentResource: ").Append(ParentResource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceRelationships);
        }

        /// <summary>
        /// Returns true if ResourceRelationships instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceRelationships to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceRelationships input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Share == input.Share ||
                    (this.Share != null &&
                    this.Share.Equals(input.Share))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.DirectFile == input.DirectFile ||
                    (this.DirectFile != null &&
                    this.DirectFile.Equals(input.DirectFile))
                ) && 
                (
                    this.ParentResource == input.ParentResource ||
                    (this.ParentResource != null &&
                    this.ParentResource.Equals(input.ParentResource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Share != null)
                    hashCode = hashCode * 59 + this.Share.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.DirectFile != null)
                    hashCode = hashCode * 59 + this.DirectFile.GetHashCode();
                if (this.ParentResource != null)
                    hashCode = hashCode * 59 + this.ParentResource.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

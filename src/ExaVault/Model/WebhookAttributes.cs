/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// WebhookAttributes
    /// </summary>
    [DataContract]
        public partial class WebhookAttributes :  IEquatable<WebhookAttributes>, IValidatableObject
    {
        /// <summary>
        /// The version of webhook request to send to the endpoint URL
        /// </summary>
        /// <value>The version of webhook request to send to the endpoint URL</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ResponseVersionEnum
        {
            /// <summary>
            /// Enum V1 for value: v1
            /// </summary>
            [EnumMember(Value = "v1")]
            V1 = 1,
            /// <summary>
            /// Enum V2 for value: v2
            /// </summary>
            [EnumMember(Value = "v2")]
            V2 = 2        }
        /// <summary>
        /// The version of webhook request to send to the endpoint URL
        /// </summary>
        /// <value>The version of webhook request to send to the endpoint URL</value>
        [DataMember(Name="responseVersion", EmitDefaultValue=false)]
        public ResponseVersionEnum? ResponseVersion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookAttributes" /> class.
        /// </summary>
        /// <param name="endpointUrl">The endpoint is where the webhook request will be sent..</param>
        /// <param name="failed">Whether webhook has been disabled for too many consecutive failures.</param>
        /// <param name="verificationToken">Token for verifying sender is ExaVault.</param>
        /// <param name="responseVersion">The version of webhook request to send to the endpoint URL.</param>
        /// <param name="triggers">triggers.</param>
        /// <param name="created">Timestamp when webhook configuration was added to system..</param>
        /// <param name="modified">Timestamp when webhook configuration was last modified.</param>
        public WebhookAttributes(string endpointUrl = default(string), bool? failed = default(bool?), string verificationToken = default(string), ResponseVersionEnum? responseVersion = default(ResponseVersionEnum?), WebhookTriggers triggers = default(WebhookTriggers), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?))
        {
            this.EndpointUrl = endpointUrl;
            this.Failed = failed;
            this.VerificationToken = verificationToken;
            this.ResponseVersion = responseVersion;
            this.Triggers = triggers;
            this.Created = created;
            this.Modified = modified;
        }
        
        /// <summary>
        /// The endpoint is where the webhook request will be sent.
        /// </summary>
        /// <value>The endpoint is where the webhook request will be sent.</value>
        [DataMember(Name="endpointUrl", EmitDefaultValue=false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Whether webhook has been disabled for too many consecutive failures
        /// </summary>
        /// <value>Whether webhook has been disabled for too many consecutive failures</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public bool? Failed { get; set; }

        /// <summary>
        /// Token for verifying sender is ExaVault
        /// </summary>
        /// <value>Token for verifying sender is ExaVault</value>
        [DataMember(Name="verificationToken", EmitDefaultValue=false)]
        public string VerificationToken { get; set; }


        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        [DataMember(Name="triggers", EmitDefaultValue=false)]
        public WebhookTriggers Triggers { get; set; }

        /// <summary>
        /// Timestamp when webhook configuration was added to system.
        /// </summary>
        /// <value>Timestamp when webhook configuration was added to system.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Timestamp when webhook configuration was last modified
        /// </summary>
        /// <value>Timestamp when webhook configuration was last modified</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookAttributes {\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  VerificationToken: ").Append(VerificationToken).Append("\n");
            sb.Append("  ResponseVersion: ").Append(ResponseVersion).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookAttributes);
        }

        /// <summary>
        /// Returns true if WebhookAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.VerificationToken == input.VerificationToken ||
                    (this.VerificationToken != null &&
                    this.VerificationToken.Equals(input.VerificationToken))
                ) && 
                (
                    this.ResponseVersion == input.ResponseVersion ||
                    (this.ResponseVersion != null &&
                    this.ResponseVersion.Equals(input.ResponseVersion))
                ) && 
                (
                    this.Triggers == input.Triggers ||
                    (this.Triggers != null &&
                    this.Triggers.Equals(input.Triggers))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndpointUrl != null)
                    hashCode = hashCode * 59 + this.EndpointUrl.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.VerificationToken != null)
                    hashCode = hashCode * 59 + this.VerificationToken.GetHashCode();
                if (this.ResponseVersion != null)
                    hashCode = hashCode * 59 + this.ResponseVersion.GetHashCode();
                if (this.Triggers != null)
                    hashCode = hashCode * 59 + this.Triggers.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// WebhookV2EventDataShare
    /// </summary>
    [DataContract]
        public partial class WebhookV2EventDataShare :  IEquatable<WebhookV2EventDataShare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookV2EventDataShare" /> class.
        /// </summary>
        /// <param name="id">Unique ID of associated receive folder.</param>
        /// <param name="name">Name of receiv.</param>
        /// <param name="hasPassword">Whether the receive folder requires visitors to enter a password.</param>
        /// <param name="isPublic">Whether visitors can acccess the receive folder without an invitation link.</param>
        /// <param name="accessMode">accessMode.</param>
        /// <param name="accessDescription">Human readable description of what visitors are allowed to do with the receive folder.</param>
        /// <param name="embed">Whether the receive folder can be embedded within a web page.</param>
        /// <param name="hash">Hash value of the receive.</param>
        /// <param name="ownerHash">Hash value of the user who \&quot;owns\&quot; the receive fo.</param>
        /// <param name="expiration">Date and time when the receive folder will no longer be .</param>
        /// <param name="trackingStatus">Status of invitations sent for this receive folder.</param>
        /// <param name="expired">Whether access to the receive folder has expired.</param>
        /// <param name="resent">Whether invitations to the receive folder have been re-sent to recipients.</param>
        /// <param name="type">Type of share **\&quot;receive\&quot;**.</param>
        /// <param name="requireEmail">Whether visitors must enter their email addresses to access the receive folder.</param>
        /// <param name="fileDropCreateFolders">Whether files should be automatically placed in subfolders of the receive folder.</param>
        /// <param name="formId">ID of the associated form.</param>
        /// <param name="assets">List of items included in the share.</param>
        /// <param name="paths">List.</param>
        /// <param name="recipients">List of recipients invited  to the receive folder.</param>
        /// <param name="messages">Invitation messages sent for receive folder.</param>
        /// <param name="inherited">Whether this share is inherited from a parent fol.</param>
        /// <param name="status">1 if share is active. 0 if not..</param>
        /// <param name="hasNotification">Whether delivery receipts are enabled for this share.</param>
        /// <param name="created">Date and ti.</param>
        /// <param name="modified">Date and time when the share was last changed.</param>
        public WebhookV2EventDataShare(int? id = default(int?), string name = default(string), bool? hasPassword = default(bool?), bool? isPublic = default(bool?), AccessMode accessMode = default(AccessMode), string accessDescription = default(string), bool? embed = default(bool?), string hash = default(string), string ownerHash = default(string), string expiration = default(string), string trackingStatus = default(string), bool? expired = default(bool?), bool? resent = default(bool?), string type = default(string), bool? requireEmail = default(bool?), bool? fileDropCreateFolders = default(bool?), int? formId = default(int?), List<string> assets = default(List<string>), List<string> paths = default(List<string>), List<ShareRecipient> recipients = default(List<ShareRecipient>), List<ShareMessage> messages = default(List<ShareMessage>), bool? inherited = default(bool?), int? status = default(int?), bool? hasNotification = default(bool?), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.HasPassword = hasPassword;
            this.IsPublic = isPublic;
            this.AccessMode = accessMode;
            this.AccessDescription = accessDescription;
            this.Embed = embed;
            this.Hash = hash;
            this.OwnerHash = ownerHash;
            this.Expiration = expiration;
            this.TrackingStatus = trackingStatus;
            this.Expired = expired;
            this.Resent = resent;
            this.Type = type;
            this.RequireEmail = requireEmail;
            this.FileDropCreateFolders = fileDropCreateFolders;
            this.FormId = formId;
            this.Assets = assets;
            this.Paths = paths;
            this.Recipients = recipients;
            this.Messages = messages;
            this.Inherited = inherited;
            this.Status = status;
            this.HasNotification = hasNotification;
            this.Created = created;
            this.Modified = modified;
        }
        
        /// <summary>
        /// Unique ID of associated receive folder
        /// </summary>
        /// <value>Unique ID of associated receive folder</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name of receiv
        /// </summary>
        /// <value>Name of receiv</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the receive folder requires visitors to enter a password
        /// </summary>
        /// <value>Whether the receive folder requires visitors to enter a password</value>
        [DataMember(Name="hasPassword", EmitDefaultValue=false)]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Whether visitors can acccess the receive folder without an invitation link
        /// </summary>
        /// <value>Whether visitors can acccess the receive folder without an invitation link</value>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets AccessMode
        /// </summary>
        [DataMember(Name="accessMode", EmitDefaultValue=false)]
        public AccessMode AccessMode { get; set; }

        /// <summary>
        /// Human readable description of what visitors are allowed to do with the receive folder
        /// </summary>
        /// <value>Human readable description of what visitors are allowed to do with the receive folder</value>
        [DataMember(Name="accessDescription", EmitDefaultValue=false)]
        public string AccessDescription { get; set; }

        /// <summary>
        /// Whether the receive folder can be embedded within a web page
        /// </summary>
        /// <value>Whether the receive folder can be embedded within a web page</value>
        [DataMember(Name="embed", EmitDefaultValue=false)]
        public bool? Embed { get; set; }

        /// <summary>
        /// Hash value of the receive
        /// </summary>
        /// <value>Hash value of the receive</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Hash value of the user who \&quot;owns\&quot; the receive fo
        /// </summary>
        /// <value>Hash value of the user who \&quot;owns\&quot; the receive fo</value>
        [DataMember(Name="ownerHash", EmitDefaultValue=false)]
        public string OwnerHash { get; set; }

        /// <summary>
        /// Date and time when the receive folder will no longer be 
        /// </summary>
        /// <value>Date and time when the receive folder will no longer be </value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public string Expiration { get; set; }

        /// <summary>
        /// Status of invitations sent for this receive folder
        /// </summary>
        /// <value>Status of invitations sent for this receive folder</value>
        [DataMember(Name="trackingStatus", EmitDefaultValue=false)]
        public string TrackingStatus { get; set; }

        /// <summary>
        /// Whether access to the receive folder has expired
        /// </summary>
        /// <value>Whether access to the receive folder has expired</value>
        [DataMember(Name="expired", EmitDefaultValue=false)]
        public bool? Expired { get; set; }

        /// <summary>
        /// Whether invitations to the receive folder have been re-sent to recipients
        /// </summary>
        /// <value>Whether invitations to the receive folder have been re-sent to recipients</value>
        [DataMember(Name="resent", EmitDefaultValue=false)]
        public bool? Resent { get; set; }

        /// <summary>
        /// Type of share **\&quot;receive\&quot;**
        /// </summary>
        /// <value>Type of share **\&quot;receive\&quot;**</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Whether visitors must enter their email addresses to access the receive folder
        /// </summary>
        /// <value>Whether visitors must enter their email addresses to access the receive folder</value>
        [DataMember(Name="requireEmail", EmitDefaultValue=false)]
        public bool? RequireEmail { get; set; }

        /// <summary>
        /// Whether files should be automatically placed in subfolders of the receive folder
        /// </summary>
        /// <value>Whether files should be automatically placed in subfolders of the receive folder</value>
        [DataMember(Name="fileDropCreateFolders", EmitDefaultValue=false)]
        public bool? FileDropCreateFolders { get; set; }

        /// <summary>
        /// ID of the associated form
        /// </summary>
        /// <value>ID of the associated form</value>
        [DataMember(Name="formId", EmitDefaultValue=false)]
        public int? FormId { get; set; }

        /// <summary>
        /// List of items included in the share
        /// </summary>
        /// <value>List of items included in the share</value>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public List<string> Assets { get; set; }

        /// <summary>
        /// List
        /// </summary>
        /// <value>List</value>
        [DataMember(Name="paths", EmitDefaultValue=false)]
        public List<string> Paths { get; set; }

        /// <summary>
        /// List of recipients invited  to the receive folder
        /// </summary>
        /// <value>List of recipients invited  to the receive folder</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<ShareRecipient> Recipients { get; set; }

        /// <summary>
        /// Invitation messages sent for receive folder
        /// </summary>
        /// <value>Invitation messages sent for receive folder</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ShareMessage> Messages { get; set; }

        /// <summary>
        /// Whether this share is inherited from a parent fol
        /// </summary>
        /// <value>Whether this share is inherited from a parent fol</value>
        [DataMember(Name="inherited", EmitDefaultValue=false)]
        public bool? Inherited { get; set; }

        /// <summary>
        /// 1 if share is active. 0 if not.
        /// </summary>
        /// <value>1 if share is active. 0 if not.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Whether delivery receipts are enabled for this share
        /// </summary>
        /// <value>Whether delivery receipts are enabled for this share</value>
        [DataMember(Name="hasNotification", EmitDefaultValue=false)]
        public bool? HasNotification { get; set; }

        /// <summary>
        /// Date and ti
        /// </summary>
        /// <value>Date and ti</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Date and time when the share was last changed
        /// </summary>
        /// <value>Date and time when the share was last changed</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookV2EventDataShare {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  AccessMode: ").Append(AccessMode).Append("\n");
            sb.Append("  AccessDescription: ").Append(AccessDescription).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  OwnerHash: ").Append(OwnerHash).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  TrackingStatus: ").Append(TrackingStatus).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  Resent: ").Append(Resent).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RequireEmail: ").Append(RequireEmail).Append("\n");
            sb.Append("  FileDropCreateFolders: ").Append(FileDropCreateFolders).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Inherited: ").Append(Inherited).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HasNotification: ").Append(HasNotification).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookV2EventDataShare);
        }

        /// <summary>
        /// Returns true if WebhookV2EventDataShare instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookV2EventDataShare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookV2EventDataShare input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HasPassword == input.HasPassword ||
                    (this.HasPassword != null &&
                    this.HasPassword.Equals(input.HasPassword))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.AccessMode == input.AccessMode ||
                    (this.AccessMode != null &&
                    this.AccessMode.Equals(input.AccessMode))
                ) && 
                (
                    this.AccessDescription == input.AccessDescription ||
                    (this.AccessDescription != null &&
                    this.AccessDescription.Equals(input.AccessDescription))
                ) && 
                (
                    this.Embed == input.Embed ||
                    (this.Embed != null &&
                    this.Embed.Equals(input.Embed))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.OwnerHash == input.OwnerHash ||
                    (this.OwnerHash != null &&
                    this.OwnerHash.Equals(input.OwnerHash))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.TrackingStatus == input.TrackingStatus ||
                    (this.TrackingStatus != null &&
                    this.TrackingStatus.Equals(input.TrackingStatus))
                ) && 
                (
                    this.Expired == input.Expired ||
                    (this.Expired != null &&
                    this.Expired.Equals(input.Expired))
                ) && 
                (
                    this.Resent == input.Resent ||
                    (this.Resent != null &&
                    this.Resent.Equals(input.Resent))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RequireEmail == input.RequireEmail ||
                    (this.RequireEmail != null &&
                    this.RequireEmail.Equals(input.RequireEmail))
                ) && 
                (
                    this.FileDropCreateFolders == input.FileDropCreateFolders ||
                    (this.FileDropCreateFolders != null &&
                    this.FileDropCreateFolders.Equals(input.FileDropCreateFolders))
                ) && 
                (
                    this.FormId == input.FormId ||
                    (this.FormId != null &&
                    this.FormId.Equals(input.FormId))
                ) && 
                (
                    this.Assets == input.Assets ||
                    this.Assets != null &&
                    input.Assets != null &&
                    this.Assets.SequenceEqual(input.Assets)
                ) && 
                (
                    this.Paths == input.Paths ||
                    this.Paths != null &&
                    input.Paths != null &&
                    this.Paths.SequenceEqual(input.Paths)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.Inherited == input.Inherited ||
                    (this.Inherited != null &&
                    this.Inherited.Equals(input.Inherited))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.HasNotification == input.HasNotification ||
                    (this.HasNotification != null &&
                    this.HasNotification.Equals(input.HasNotification))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HasPassword != null)
                    hashCode = hashCode * 59 + this.HasPassword.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.AccessMode != null)
                    hashCode = hashCode * 59 + this.AccessMode.GetHashCode();
                if (this.AccessDescription != null)
                    hashCode = hashCode * 59 + this.AccessDescription.GetHashCode();
                if (this.Embed != null)
                    hashCode = hashCode * 59 + this.Embed.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.OwnerHash != null)
                    hashCode = hashCode * 59 + this.OwnerHash.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.TrackingStatus != null)
                    hashCode = hashCode * 59 + this.TrackingStatus.GetHashCode();
                if (this.Expired != null)
                    hashCode = hashCode * 59 + this.Expired.GetHashCode();
                if (this.Resent != null)
                    hashCode = hashCode * 59 + this.Resent.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RequireEmail != null)
                    hashCode = hashCode * 59 + this.RequireEmail.GetHashCode();
                if (this.FileDropCreateFolders != null)
                    hashCode = hashCode * 59 + this.FileDropCreateFolders.GetHashCode();
                if (this.FormId != null)
                    hashCode = hashCode * 59 + this.FormId.GetHashCode();
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                if (this.Paths != null)
                    hashCode = hashCode * 59 + this.Paths.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.Inherited != null)
                    hashCode = hashCode * 59 + this.Inherited.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.HasNotification != null)
                    hashCode = hashCode * 59 + this.HasNotification.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

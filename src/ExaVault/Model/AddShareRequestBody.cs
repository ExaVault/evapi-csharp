/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// AddShareRequestBody
    /// </summary>
    [DataContract]
        public partial class AddShareRequestBody :  IEquatable<AddShareRequestBody>, IValidatableObject
    {
        /// <summary>
        /// The type of share to create. See above for a description of each.
        /// </summary>
        /// <value>The type of share to create. See above for a description of each.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Sharedfolder for value: shared_folder
            /// </summary>
            [EnumMember(Value = "shared_folder")]
            Sharedfolder = 1,
            /// <summary>
            /// Enum Receive for value: receive
            /// </summary>
            [EnumMember(Value = "receive")]
            Receive = 2,
            /// <summary>
            /// Enum Send for value: send
            /// </summary>
            [EnumMember(Value = "send")]
            Send = 3        }
        /// <summary>
        /// The type of share to create. See above for a description of each.
        /// </summary>
        /// <value>The type of share to create. See above for a description of each.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines AccessMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccessModeEnum
        {
            /// <summary>
            /// Enum Upload for value: upload
            /// </summary>
            [EnumMember(Value = "upload")]
            Upload = 1,
            /// <summary>
            /// Enum Download for value: download
            /// </summary>
            [EnumMember(Value = "download")]
            Download = 2,
            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 3,
            /// <summary>
            /// Enum Modify for value: modify
            /// </summary>
            [EnumMember(Value = "modify")]
            Modify = 4        }
        /// <summary>
        /// Array of permissions that describes what people can do when they visit the share. Valid options are &#x60;upload&#x60; &#x60;download&#x60; &#x60;modify&#x60; and &#x60;delete&#x60;  Not all permissions work with all shares - **receive** shares must always have the permission to **upload** and never provide a method for visitors to **download**.  If you are creating a share of type **send** and plan to upload files from your own computer before completing the send with [POST /shares/complete-send/{id}](#operation/completeDirectSend), use the access mode **upload**
        /// </summary>
        /// <value>Array of permissions that describes what people can do when they visit the share. Valid options are &#x60;upload&#x60; &#x60;download&#x60; &#x60;modify&#x60; and &#x60;delete&#x60;  Not all permissions work with all shares - **receive** shares must always have the permission to **upload** and never provide a method for visitors to **download**.  If you are creating a share of type **send** and plan to upload files from your own computer before completing the send with [POST /shares/complete-send/{id}](#operation/completeDirectSend), use the access mode **upload**</value>
        [DataMember(Name="accessMode", EmitDefaultValue=false)]
        public List<AccessModeEnum> AccessMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddShareRequestBody" /> class.
        /// </summary>
        /// <param name="type">The type of share to create. See above for a description of each. (required).</param>
        /// <param name="name">A name for the share. This will be visible on the page that recipients visit.  (required).</param>
        /// <param name="resources">Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one &#x60;resource&#x60;, which is a directory that does not have a current share attached.  **send** shares may have multiple &#x60;resource&#x60; parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation. .</param>
        /// <param name="accessMode">Array of permissions that describes what people can do when they visit the share. Valid options are &#x60;upload&#x60; &#x60;download&#x60; &#x60;modify&#x60; and &#x60;delete&#x60;  Not all permissions work with all shares - **receive** shares must always have the permission to **upload** and never provide a method for visitors to **download**.  If you are creating a share of type **send** and plan to upload files from your own computer before completing the send with [POST /shares/complete-send/{id}](#operation/completeDirectSend), use the access mode **upload** (required).</param>
        /// <param name="embed">Whether this share can be embedded within a web page..</param>
        /// <param name="recipients">People you want to invite to the share. **Note**: unless you also set the &#x60;messageSubject&#x60; and &#x60;messageBody&#x60; for the new share, invitation emails will not be sent to these recipients..</param>
        /// <param name="expiration">Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available..</param>
        /// <param name="hasNotification">Whether delivery receipts should be sent..</param>
        /// <param name="isPublic">Whether someone can visit the share without following a personalized recipient link..</param>
        /// <param name="message">The message to be included in email invitations for your recipients. Ignored if you have not also provided &#x60;recipients&#x60; and &#x60;subject&#x60;.</param>
        /// <param name="notificationEmails">Emails that will receive delivery receipts for this share. &#x60;hasNotification&#x60; must be **true** for delivery receipts will be sent..</param>
        /// <param name="password">Set a password for recipients to access the share. All recipients will use the same password..</param>
        /// <param name="requireEmail">True if recipients must provide their email to view the share..</param>
        /// <param name="messageSubject">Subject to use on emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;message&#x60;.</param>
        /// <param name="fileDropCreateFolders">Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. .</param>
        /// <param name="sendingLocalFiles">Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded..</param>
        public AddShareRequestBody(TypeEnum type = default(TypeEnum), string name = default(string), List<string> resources = default(List<string>), List<AccessModeEnum> accessMode = default(List<AccessModeEnum>), bool? embed = default(bool?), List<SharesRecipients> recipients = default(List<SharesRecipients>), DateTime? expiration = default(DateTime?), bool? hasNotification = default(bool?), bool? isPublic = default(bool?), string message = default(string), List<string> notificationEmails = default(List<string>), string password = default(string), bool? requireEmail = default(bool?), string messageSubject = default(string), bool? fileDropCreateFolders = default(bool?), bool? sendingLocalFiles = default(bool?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for AddShareRequestBody and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AddShareRequestBody and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "accessMode" is required (not null)
            if (accessMode == null)
            {
                throw new InvalidDataException("accessMode is a required property for AddShareRequestBody and cannot be null");
            }
            else
            {
                this.AccessMode = accessMode;
            }
            this.Resources = resources;
            this.Embed = embed;
            this.Recipients = recipients;
            this.Expiration = expiration;
            this.HasNotification = hasNotification;
            this.IsPublic = isPublic;
            this.Message = message;
            this.NotificationEmails = notificationEmails;
            this.Password = password;
            this.RequireEmail = requireEmail;
            this.MessageSubject = messageSubject;
            this.FileDropCreateFolders = fileDropCreateFolders;
            this.SendingLocalFiles = sendingLocalFiles;
        }
        

        /// <summary>
        /// A name for the share. This will be visible on the page that recipients visit. 
        /// </summary>
        /// <value>A name for the share. This will be visible on the page that recipients visit. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one &#x60;resource&#x60;, which is a directory that does not have a current share attached.  **send** shares may have multiple &#x60;resource&#x60; parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation. 
        /// </summary>
        /// <value>Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one &#x60;resource&#x60;, which is a directory that does not have a current share attached.  **send** shares may have multiple &#x60;resource&#x60; parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation. </value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<string> Resources { get; set; }


        /// <summary>
        /// Whether this share can be embedded within a web page.
        /// </summary>
        /// <value>Whether this share can be embedded within a web page.</value>
        [DataMember(Name="embed", EmitDefaultValue=false)]
        public bool? Embed { get; set; }

        /// <summary>
        /// People you want to invite to the share. **Note**: unless you also set the &#x60;messageSubject&#x60; and &#x60;messageBody&#x60; for the new share, invitation emails will not be sent to these recipients.
        /// </summary>
        /// <value>People you want to invite to the share. **Note**: unless you also set the &#x60;messageSubject&#x60; and &#x60;messageBody&#x60; for the new share, invitation emails will not be sent to these recipients.</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<SharesRecipients> Recipients { get; set; }

        /// <summary>
        /// Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available.
        /// </summary>
        /// <value>Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Whether delivery receipts should be sent.
        /// </summary>
        /// <value>Whether delivery receipts should be sent.</value>
        [DataMember(Name="hasNotification", EmitDefaultValue=false)]
        public bool? HasNotification { get; set; }

        /// <summary>
        /// Whether someone can visit the share without following a personalized recipient link.
        /// </summary>
        /// <value>Whether someone can visit the share without following a personalized recipient link.</value>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// The message to be included in email invitations for your recipients. Ignored if you have not also provided &#x60;recipients&#x60; and &#x60;subject&#x60;
        /// </summary>
        /// <value>The message to be included in email invitations for your recipients. Ignored if you have not also provided &#x60;recipients&#x60; and &#x60;subject&#x60;</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Emails that will receive delivery receipts for this share. &#x60;hasNotification&#x60; must be **true** for delivery receipts will be sent.
        /// </summary>
        /// <value>Emails that will receive delivery receipts for this share. &#x60;hasNotification&#x60; must be **true** for delivery receipts will be sent.</value>
        [DataMember(Name="notificationEmails", EmitDefaultValue=false)]
        public List<string> NotificationEmails { get; set; }

        /// <summary>
        /// Set a password for recipients to access the share. All recipients will use the same password.
        /// </summary>
        /// <value>Set a password for recipients to access the share. All recipients will use the same password.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// True if recipients must provide their email to view the share.
        /// </summary>
        /// <value>True if recipients must provide their email to view the share.</value>
        [DataMember(Name="requireEmail", EmitDefaultValue=false)]
        public bool? RequireEmail { get; set; }

        /// <summary>
        /// Subject to use on emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;message&#x60;
        /// </summary>
        /// <value>Subject to use on emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;message&#x60;</value>
        [DataMember(Name="messageSubject", EmitDefaultValue=false)]
        public string MessageSubject { get; set; }

        /// <summary>
        /// Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. 
        /// </summary>
        /// <value>Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. </value>
        [DataMember(Name="fileDropCreateFolders", EmitDefaultValue=false)]
        public bool? FileDropCreateFolders { get; set; }

        /// <summary>
        /// Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded.
        /// </summary>
        /// <value>Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded.</value>
        [DataMember(Name="sendingLocalFiles", EmitDefaultValue=false)]
        public bool? SendingLocalFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddShareRequestBody {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  AccessMode: ").Append(AccessMode).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  HasNotification: ").Append(HasNotification).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RequireEmail: ").Append(RequireEmail).Append("\n");
            sb.Append("  MessageSubject: ").Append(MessageSubject).Append("\n");
            sb.Append("  FileDropCreateFolders: ").Append(FileDropCreateFolders).Append("\n");
            sb.Append("  SendingLocalFiles: ").Append(SendingLocalFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddShareRequestBody);
        }

        /// <summary>
        /// Returns true if AddShareRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AddShareRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddShareRequestBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.AccessMode == input.AccessMode ||
                    this.AccessMode != null &&
                    input.AccessMode != null &&
                    this.AccessMode.SequenceEqual(input.AccessMode)
                ) && 
                (
                    this.Embed == input.Embed ||
                    (this.Embed != null &&
                    this.Embed.Equals(input.Embed))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.HasNotification == input.HasNotification ||
                    (this.HasNotification != null &&
                    this.HasNotification.Equals(input.HasNotification))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.NotificationEmails == input.NotificationEmails ||
                    this.NotificationEmails != null &&
                    input.NotificationEmails != null &&
                    this.NotificationEmails.SequenceEqual(input.NotificationEmails)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.RequireEmail == input.RequireEmail ||
                    (this.RequireEmail != null &&
                    this.RequireEmail.Equals(input.RequireEmail))
                ) && 
                (
                    this.MessageSubject == input.MessageSubject ||
                    (this.MessageSubject != null &&
                    this.MessageSubject.Equals(input.MessageSubject))
                ) && 
                (
                    this.FileDropCreateFolders == input.FileDropCreateFolders ||
                    (this.FileDropCreateFolders != null &&
                    this.FileDropCreateFolders.Equals(input.FileDropCreateFolders))
                ) && 
                (
                    this.SendingLocalFiles == input.SendingLocalFiles ||
                    (this.SendingLocalFiles != null &&
                    this.SendingLocalFiles.Equals(input.SendingLocalFiles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.AccessMode != null)
                    hashCode = hashCode * 59 + this.AccessMode.GetHashCode();
                if (this.Embed != null)
                    hashCode = hashCode * 59 + this.Embed.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.HasNotification != null)
                    hashCode = hashCode * 59 + this.HasNotification.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.NotificationEmails != null)
                    hashCode = hashCode * 59 + this.NotificationEmails.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.RequireEmail != null)
                    hashCode = hashCode * 59 + this.RequireEmail.GetHashCode();
                if (this.MessageSubject != null)
                    hashCode = hashCode * 59 + this.MessageSubject.GetHashCode();
                if (this.FileDropCreateFolders != null)
                    hashCode = hashCode * 59 + this.FileDropCreateFolders.GetHashCode();
                if (this.SendingLocalFiles != null)
                    hashCode = hashCode * 59 + this.SendingLocalFiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// WebhookV2EventDataResources
    /// </summary>
    [DataContract]
        public partial class WebhookV2EventDataResources :  IEquatable<WebhookV2EventDataResources>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookV2EventDataResources" /> class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="hash">Resource hash value.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Type of resource &#x60;file&#x60; or &#x60;dir&#x60;.</param>
        /// <param name="createdBy">Username who originally created resource.</param>
        /// <param name="uploadDate">Date resource was first uploaded.</param>
        /// <param name="createdAt">Date and time of resource creation.</param>
        /// <param name="updatedAt">Date and time resource was most recently changed.</param>
        /// <param name="accessedAt">Date and time resource was most recently downloaded.</param>
        /// <param name="path">Full path to resource.</param>
        /// <param name="size">Size of resource in bytes.</param>
        /// <param name="fileCount">Number of resources contained in this folder. If this is a file, fileCount is null.</param>
        /// <param name="previewable">Whether the resource can be previewed.</param>
        public WebhookV2EventDataResources(int? id = default(int?), string hash = default(string), string name = default(string), string type = default(string), string createdBy = default(string), DateTime? uploadDate = default(DateTime?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? accessedAt = default(DateTime?), string path = default(string), int? size = default(int?), int? fileCount = default(int?), bool? previewable = default(bool?))
        {
            this.Id = id;
            this.Hash = hash;
            this.Name = name;
            this.Type = type;
            this.CreatedBy = createdBy;
            this.UploadDate = uploadDate;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.AccessedAt = accessedAt;
            this.Path = path;
            this.Size = size;
            this.FileCount = fileCount;
            this.Previewable = previewable;
        }
        
        /// <summary>
        /// Resource ID
        /// </summary>
        /// <value>Resource ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Resource hash value
        /// </summary>
        /// <value>Resource hash value</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        /// <value>Resource name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Type of resource &#x60;file&#x60; or &#x60;dir&#x60;
        /// </summary>
        /// <value>Type of resource &#x60;file&#x60; or &#x60;dir&#x60;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Username who originally created resource
        /// </summary>
        /// <value>Username who originally created resource</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Date resource was first uploaded
        /// </summary>
        /// <value>Date resource was first uploaded</value>
        [DataMember(Name="uploadDate", EmitDefaultValue=false)]
        public DateTime? UploadDate { get; set; }

        /// <summary>
        /// Date and time of resource creation
        /// </summary>
        /// <value>Date and time of resource creation</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Date and time resource was most recently changed
        /// </summary>
        /// <value>Date and time resource was most recently changed</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Date and time resource was most recently downloaded
        /// </summary>
        /// <value>Date and time resource was most recently downloaded</value>
        [DataMember(Name="accessedAt", EmitDefaultValue=false)]
        public DateTime? AccessedAt { get; set; }

        /// <summary>
        /// Full path to resource
        /// </summary>
        /// <value>Full path to resource</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Size of resource in bytes
        /// </summary>
        /// <value>Size of resource in bytes</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Number of resources contained in this folder. If this is a file, fileCount is null
        /// </summary>
        /// <value>Number of resources contained in this folder. If this is a file, fileCount is null</value>
        [DataMember(Name="fileCount", EmitDefaultValue=false)]
        public int? FileCount { get; set; }

        /// <summary>
        /// Whether the resource can be previewed
        /// </summary>
        /// <value>Whether the resource can be previewed</value>
        [DataMember(Name="previewable", EmitDefaultValue=false)]
        public bool? Previewable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookV2EventDataResources {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AccessedAt: ").Append(AccessedAt).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  Previewable: ").Append(Previewable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookV2EventDataResources);
        }

        /// <summary>
        /// Returns true if WebhookV2EventDataResources instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookV2EventDataResources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookV2EventDataResources input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UploadDate == input.UploadDate ||
                    (this.UploadDate != null &&
                    this.UploadDate.Equals(input.UploadDate))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.AccessedAt == input.AccessedAt ||
                    (this.AccessedAt != null &&
                    this.AccessedAt.Equals(input.AccessedAt))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.FileCount == input.FileCount ||
                    (this.FileCount != null &&
                    this.FileCount.Equals(input.FileCount))
                ) && 
                (
                    this.Previewable == input.Previewable ||
                    (this.Previewable != null &&
                    this.Previewable.Equals(input.Previewable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.UploadDate != null)
                    hashCode = hashCode * 59 + this.UploadDate.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.AccessedAt != null)
                    hashCode = hashCode * 59 + this.AccessedAt.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.FileCount != null)
                    hashCode = hashCode * 59 + this.FileCount.GetHashCode();
                if (this.Previewable != null)
                    hashCode = hashCode * 59 + this.Previewable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

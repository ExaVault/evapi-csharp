/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// PlanDetails
    /// </summary>
    [DataContract]
        public partial class PlanDetails :  IEquatable<PlanDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanDetails" /> class.
        /// </summary>
        /// <param name="storageAddOn">storageAddOn.</param>
        /// <param name="ipWhitelist">ipWhitelist.</param>
        /// <param name="userExpiration">userExpiration.</param>
        /// <param name="userImport">userImport.</param>
        /// <param name="customDomain">customDomain.</param>
        /// <param name="customName">customName.</param>
        /// <param name="colorSchema">colorSchema.</param>
        /// <param name="apiKeys">apiKeys.</param>
        /// <param name="apiTokens">apiTokens.</param>
        /// <param name="sshKeys">sshKeys.</param>
        /// <param name="directLinks">directLinks.</param>
        /// <param name="sharingOptions">sharingOptions.</param>
        /// <param name="webhookOptions">webhookOptions.</param>
        /// <param name="unlimitedUsers">unlimitedUsers.</param>
        public PlanDetails(int? storageAddOn = default(int?), bool? ipWhitelist = default(bool?), bool? userExpiration = default(bool?), bool? userImport = default(bool?), bool? customDomain = default(bool?), bool? customName = default(bool?), bool? colorSchema = default(bool?), int? apiKeys = default(int?), int? apiTokens = default(int?), int? sshKeys = default(int?), bool? directLinks = default(bool?), List<string> sharingOptions = default(List<string>), PlanDetailsWebhookOptions webhookOptions = default(PlanDetailsWebhookOptions), bool? unlimitedUsers = default(bool?))
        {
            this.StorageAddOn = storageAddOn;
            this.IpWhitelist = ipWhitelist;
            this.UserExpiration = userExpiration;
            this.UserImport = userImport;
            this.CustomDomain = customDomain;
            this.CustomName = customName;
            this.ColorSchema = colorSchema;
            this.ApiKeys = apiKeys;
            this.ApiTokens = apiTokens;
            this.SshKeys = sshKeys;
            this.DirectLinks = directLinks;
            this.SharingOptions = sharingOptions;
            this.WebhookOptions = webhookOptions;
            this.UnlimitedUsers = unlimitedUsers;
        }
        
        /// <summary>
        /// Gets or Sets StorageAddOn
        /// </summary>
        [DataMember(Name="storageAddOn", EmitDefaultValue=false)]
        public int? StorageAddOn { get; set; }

        /// <summary>
        /// Gets or Sets IpWhitelist
        /// </summary>
        [DataMember(Name="ipWhitelist", EmitDefaultValue=false)]
        public bool? IpWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets UserExpiration
        /// </summary>
        [DataMember(Name="userExpiration", EmitDefaultValue=false)]
        public bool? UserExpiration { get; set; }

        /// <summary>
        /// Gets or Sets UserImport
        /// </summary>
        [DataMember(Name="userImport", EmitDefaultValue=false)]
        public bool? UserImport { get; set; }

        /// <summary>
        /// Gets or Sets CustomDomain
        /// </summary>
        [DataMember(Name="customDomain", EmitDefaultValue=false)]
        public bool? CustomDomain { get; set; }

        /// <summary>
        /// Gets or Sets CustomName
        /// </summary>
        [DataMember(Name="customName", EmitDefaultValue=false)]
        public bool? CustomName { get; set; }

        /// <summary>
        /// Gets or Sets ColorSchema
        /// </summary>
        [DataMember(Name="colorSchema", EmitDefaultValue=false)]
        public bool? ColorSchema { get; set; }

        /// <summary>
        /// Gets or Sets ApiKeys
        /// </summary>
        [DataMember(Name="apiKeys", EmitDefaultValue=false)]
        public int? ApiKeys { get; set; }

        /// <summary>
        /// Gets or Sets ApiTokens
        /// </summary>
        [DataMember(Name="apiTokens", EmitDefaultValue=false)]
        public int? ApiTokens { get; set; }

        /// <summary>
        /// Gets or Sets SshKeys
        /// </summary>
        [DataMember(Name="sshKeys", EmitDefaultValue=false)]
        public int? SshKeys { get; set; }

        /// <summary>
        /// Gets or Sets DirectLinks
        /// </summary>
        [DataMember(Name="directLinks", EmitDefaultValue=false)]
        public bool? DirectLinks { get; set; }

        /// <summary>
        /// Gets or Sets SharingOptions
        /// </summary>
        [DataMember(Name="sharingOptions", EmitDefaultValue=false)]
        public List<string> SharingOptions { get; set; }

        /// <summary>
        /// Gets or Sets WebhookOptions
        /// </summary>
        [DataMember(Name="webhookOptions", EmitDefaultValue=false)]
        public PlanDetailsWebhookOptions WebhookOptions { get; set; }

        /// <summary>
        /// Gets or Sets UnlimitedUsers
        /// </summary>
        [DataMember(Name="unlimitedUsers", EmitDefaultValue=false)]
        public bool? UnlimitedUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanDetails {\n");
            sb.Append("  StorageAddOn: ").Append(StorageAddOn).Append("\n");
            sb.Append("  IpWhitelist: ").Append(IpWhitelist).Append("\n");
            sb.Append("  UserExpiration: ").Append(UserExpiration).Append("\n");
            sb.Append("  UserImport: ").Append(UserImport).Append("\n");
            sb.Append("  CustomDomain: ").Append(CustomDomain).Append("\n");
            sb.Append("  CustomName: ").Append(CustomName).Append("\n");
            sb.Append("  ColorSchema: ").Append(ColorSchema).Append("\n");
            sb.Append("  ApiKeys: ").Append(ApiKeys).Append("\n");
            sb.Append("  ApiTokens: ").Append(ApiTokens).Append("\n");
            sb.Append("  SshKeys: ").Append(SshKeys).Append("\n");
            sb.Append("  DirectLinks: ").Append(DirectLinks).Append("\n");
            sb.Append("  SharingOptions: ").Append(SharingOptions).Append("\n");
            sb.Append("  WebhookOptions: ").Append(WebhookOptions).Append("\n");
            sb.Append("  UnlimitedUsers: ").Append(UnlimitedUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanDetails);
        }

        /// <summary>
        /// Returns true if PlanDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StorageAddOn == input.StorageAddOn ||
                    (this.StorageAddOn != null &&
                    this.StorageAddOn.Equals(input.StorageAddOn))
                ) && 
                (
                    this.IpWhitelist == input.IpWhitelist ||
                    (this.IpWhitelist != null &&
                    this.IpWhitelist.Equals(input.IpWhitelist))
                ) && 
                (
                    this.UserExpiration == input.UserExpiration ||
                    (this.UserExpiration != null &&
                    this.UserExpiration.Equals(input.UserExpiration))
                ) && 
                (
                    this.UserImport == input.UserImport ||
                    (this.UserImport != null &&
                    this.UserImport.Equals(input.UserImport))
                ) && 
                (
                    this.CustomDomain == input.CustomDomain ||
                    (this.CustomDomain != null &&
                    this.CustomDomain.Equals(input.CustomDomain))
                ) && 
                (
                    this.CustomName == input.CustomName ||
                    (this.CustomName != null &&
                    this.CustomName.Equals(input.CustomName))
                ) && 
                (
                    this.ColorSchema == input.ColorSchema ||
                    (this.ColorSchema != null &&
                    this.ColorSchema.Equals(input.ColorSchema))
                ) && 
                (
                    this.ApiKeys == input.ApiKeys ||
                    (this.ApiKeys != null &&
                    this.ApiKeys.Equals(input.ApiKeys))
                ) && 
                (
                    this.ApiTokens == input.ApiTokens ||
                    (this.ApiTokens != null &&
                    this.ApiTokens.Equals(input.ApiTokens))
                ) && 
                (
                    this.SshKeys == input.SshKeys ||
                    (this.SshKeys != null &&
                    this.SshKeys.Equals(input.SshKeys))
                ) && 
                (
                    this.DirectLinks == input.DirectLinks ||
                    (this.DirectLinks != null &&
                    this.DirectLinks.Equals(input.DirectLinks))
                ) && 
                (
                    this.SharingOptions == input.SharingOptions ||
                    this.SharingOptions != null &&
                    input.SharingOptions != null &&
                    this.SharingOptions.SequenceEqual(input.SharingOptions)
                ) && 
                (
                    this.WebhookOptions == input.WebhookOptions ||
                    (this.WebhookOptions != null &&
                    this.WebhookOptions.Equals(input.WebhookOptions))
                ) && 
                (
                    this.UnlimitedUsers == input.UnlimitedUsers ||
                    (this.UnlimitedUsers != null &&
                    this.UnlimitedUsers.Equals(input.UnlimitedUsers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StorageAddOn != null)
                    hashCode = hashCode * 59 + this.StorageAddOn.GetHashCode();
                if (this.IpWhitelist != null)
                    hashCode = hashCode * 59 + this.IpWhitelist.GetHashCode();
                if (this.UserExpiration != null)
                    hashCode = hashCode * 59 + this.UserExpiration.GetHashCode();
                if (this.UserImport != null)
                    hashCode = hashCode * 59 + this.UserImport.GetHashCode();
                if (this.CustomDomain != null)
                    hashCode = hashCode * 59 + this.CustomDomain.GetHashCode();
                if (this.CustomName != null)
                    hashCode = hashCode * 59 + this.CustomName.GetHashCode();
                if (this.ColorSchema != null)
                    hashCode = hashCode * 59 + this.ColorSchema.GetHashCode();
                if (this.ApiKeys != null)
                    hashCode = hashCode * 59 + this.ApiKeys.GetHashCode();
                if (this.ApiTokens != null)
                    hashCode = hashCode * 59 + this.ApiTokens.GetHashCode();
                if (this.SshKeys != null)
                    hashCode = hashCode * 59 + this.SshKeys.GetHashCode();
                if (this.DirectLinks != null)
                    hashCode = hashCode * 59 + this.DirectLinks.GetHashCode();
                if (this.SharingOptions != null)
                    hashCode = hashCode * 59 + this.SharingOptions.GetHashCode();
                if (this.WebhookOptions != null)
                    hashCode = hashCode * 59 + this.WebhookOptions.GetHashCode();
                if (this.UnlimitedUsers != null)
                    hashCode = hashCode * 59 + this.UnlimitedUsers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

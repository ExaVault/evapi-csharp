/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// Advanced field settings
    /// </summary>
    [DataContract]
        public partial class FormFieldSettings :  IEquatable<FormFieldSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormFieldSettings" /> class.
        /// </summary>
        /// <param name="description">Secondary description of field..</param>
        /// <param name="width">How much of the available width the field should occupy.</param>
        /// <param name="isRequired">Whether this field must be completed before form can be submitted.</param>
        /// <param name="useAsFolderName">Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the &#x60;fileDropCreateFolders&#x60; parameter on the receive folder is &#x60;true&#x60;. &#x60;isRequired&#x60; must be set to &#x60;true&#x60; if this setting is &#x60;true&#x60;..</param>
        /// <param name="senderEmail">senderEmail.</param>
        public FormFieldSettings(string description = default(string), float? width = default(float?), bool? isRequired = default(bool?), bool? useAsFolderName = default(bool?), bool? senderEmail = default(bool?))
        {
            this.Description = description;
            this.Width = width;
            this.IsRequired = isRequired;
            this.UseAsFolderName = useAsFolderName;
            this.SenderEmail = senderEmail;
        }
        
        /// <summary>
        /// Secondary description of field.
        /// </summary>
        /// <value>Secondary description of field.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// How much of the available width the field should occupy
        /// </summary>
        /// <value>How much of the available width the field should occupy</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public float? Width { get; set; }

        /// <summary>
        /// Whether this field must be completed before form can be submitted
        /// </summary>
        /// <value>Whether this field must be completed before form can be submitted</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the &#x60;fileDropCreateFolders&#x60; parameter on the receive folder is &#x60;true&#x60;. &#x60;isRequired&#x60; must be set to &#x60;true&#x60; if this setting is &#x60;true&#x60;.
        /// </summary>
        /// <value>Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the &#x60;fileDropCreateFolders&#x60; parameter on the receive folder is &#x60;true&#x60;. &#x60;isRequired&#x60; must be set to &#x60;true&#x60; if this setting is &#x60;true&#x60;.</value>
        [DataMember(Name="useAsFolderName", EmitDefaultValue=false)]
        public bool? UseAsFolderName { get; set; }

        /// <summary>
        /// Gets or Sets SenderEmail
        /// </summary>
        [DataMember(Name="senderEmail", EmitDefaultValue=false)]
        public bool? SenderEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormFieldSettings {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  UseAsFolderName: ").Append(UseAsFolderName).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormFieldSettings);
        }

        /// <summary>
        /// Returns true if FormFieldSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FormFieldSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormFieldSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.UseAsFolderName == input.UseAsFolderName ||
                    (this.UseAsFolderName != null &&
                    this.UseAsFolderName.Equals(input.UseAsFolderName))
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.UseAsFolderName != null)
                    hashCode = hashCode * 59 + this.UseAsFolderName.GetHashCode();
                if (this.SenderEmail != null)
                    hashCode = hashCode * 59 + this.SenderEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

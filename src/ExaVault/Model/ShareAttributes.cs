/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// Attributes of the share including the name, path and share recipients. 
    /// </summary>
    [DataContract]
        public partial class ShareAttributes :  IEquatable<ShareAttributes>, IValidatableObject
    {
        /// <summary>
        /// Defines AccessMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccessModeEnum
        {
            /// <summary>
            /// Enum Download for value: download
            /// </summary>
            [EnumMember(Value = "download")]
            Download = 1,
            /// <summary>
            /// Enum Upload for value: upload
            /// </summary>
            [EnumMember(Value = "upload")]
            Upload = 2,
            /// <summary>
            /// Enum Modify for value: modify
            /// </summary>
            [EnumMember(Value = "modify")]
            Modify = 3,
            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 4        }
        /// <summary>
        /// Access rights for the share.
        /// </summary>
        /// <value>Access rights for the share.</value>
        [DataMember(Name="accessMode", EmitDefaultValue=false)]
        public List<AccessModeEnum> AccessMode { get; set; }
        /// <summary>
        /// Type of share.
        /// </summary>
        /// <value>Type of share.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Sharedfolder for value: shared_folder
            /// </summary>
            [EnumMember(Value = "shared_folder")]
            Sharedfolder = 1,
            /// <summary>
            /// Enum Send for value: send
            /// </summary>
            [EnumMember(Value = "send")]
            Send = 2,
            /// <summary>
            /// Enum Receive for value: receive
            /// </summary>
            [EnumMember(Value = "receive")]
            Receive = 3        }
        /// <summary>
        /// Type of share.
        /// </summary>
        /// <value>Type of share.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Share activity status. Can be active (1) or deactivated (0).
        /// </summary>
        /// <value>Share activity status. Can be active (1) or deactivated (0).</value>
                public enum StatusEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1        }
        /// <summary>
        /// Share activity status. Can be active (1) or deactivated (0).
        /// </summary>
        /// <value>Share activity status. Can be active (1) or deactivated (0).</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Checks recipient received status and returns whether it&#x27;s been recevied (&#x60;complete&#x60;,) partial recevied (&#x60;incomplete&#x60;,) or not received yet (&#x60;pending&#x60;.)
        /// </summary>
        /// <value>Checks recipient received status and returns whether it&#x27;s been recevied (&#x60;complete&#x60;,) partial recevied (&#x60;incomplete&#x60;,) or not received yet (&#x60;pending&#x60;.)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackingStatusEnum
        {
            /// <summary>
            /// Enum Complete for value: complete
            /// </summary>
            [EnumMember(Value = "complete")]
            Complete = 1,
            /// <summary>
            /// Enum Incomplete for value: incomplete
            /// </summary>
            [EnumMember(Value = "incomplete")]
            Incomplete = 2,
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 3        }
        /// <summary>
        /// Checks recipient received status and returns whether it&#x27;s been recevied (&#x60;complete&#x60;,) partial recevied (&#x60;incomplete&#x60;,) or not received yet (&#x60;pending&#x60;.)
        /// </summary>
        /// <value>Checks recipient received status and returns whether it&#x27;s been recevied (&#x60;complete&#x60;,) partial recevied (&#x60;incomplete&#x60;,) or not received yet (&#x60;pending&#x60;.)</value>
        [DataMember(Name="trackingStatus", EmitDefaultValue=false)]
        public TrackingStatusEnum? TrackingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareAttributes" /> class.
        /// </summary>
        /// <param name="name">Share name..</param>
        /// <param name="hasPassword">True if the share has password..</param>
        /// <param name="_public">True if the share has a public url..</param>
        /// <param name="accessMode">Access rights for the share..</param>
        /// <param name="accessDescription">Description of the share access rights..</param>
        /// <param name="embed">True if share can be embedded..</param>
        /// <param name="hash">Share hash..</param>
        /// <param name="ownerHash">Share owner&#x27;s hash..</param>
        /// <param name="expiration">Expiration date of the share..</param>
        /// <param name="expired">True if the share has expired..</param>
        /// <param name="resent">Invitations resent date. Can be &#x60;null&#x60; if resent never happened..</param>
        /// <param name="type">Type of share..</param>
        /// <param name="requireEmail">True if share requires email to access..</param>
        /// <param name="fileDropCreateFolders">Flag to show if separate folders should be created for each file upload to receive folder..</param>
        /// <param name="paths">Path to the shared resource in your account..</param>
        /// <param name="recipients">Array of recipients..</param>
        /// <param name="messages">Array of invitation messages..</param>
        /// <param name="inherited">True if share inherited from parent folder..</param>
        /// <param name="status">Share activity status. Can be active (1) or deactivated (0)..</param>
        /// <param name="hasNotification">True if share has notification..</param>
        /// <param name="created">Timestamp of share creation..</param>
        /// <param name="modified">Timestamp of share modification. Can be &#x60;null&#x60; if it wasn&#x27;t modified..</param>
        /// <param name="trackingStatus">Checks recipient received status and returns whether it&#x27;s been recevied (&#x60;complete&#x60;,) partial recevied (&#x60;incomplete&#x60;,) or not received yet (&#x60;pending&#x60;.).</param>
        /// <param name="formId">ID of the form..</param>
        public ShareAttributes(string name = default(string), bool? hasPassword = default(bool?), bool? _public = default(bool?), List<AccessModeEnum> accessMode = default(List<AccessModeEnum>), string accessDescription = default(string), bool? embed = default(bool?), string hash = default(string), string ownerHash = default(string), string expiration = default(string), bool? expired = default(bool?), DateTime? resent = default(DateTime?), TypeEnum? type = default(TypeEnum?), bool? requireEmail = default(bool?), bool? fileDropCreateFolders = default(bool?), List<string> paths = default(List<string>), List<ShareRecipient> recipients = default(List<ShareRecipient>), List<ShareMessage> messages = default(List<ShareMessage>), bool? inherited = default(bool?), StatusEnum? status = default(StatusEnum?), bool? hasNotification = default(bool?), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?), TrackingStatusEnum? trackingStatus = default(TrackingStatusEnum?), int? formId = default(int?))
        {
            this.Name = name;
            this.HasPassword = hasPassword;
            this.Public = _public;
            this.AccessMode = accessMode;
            this.AccessDescription = accessDescription;
            this.Embed = embed;
            this.Hash = hash;
            this.OwnerHash = ownerHash;
            this.Expiration = expiration;
            this.Expired = expired;
            this.Resent = resent;
            this.Type = type;
            this.RequireEmail = requireEmail;
            this.FileDropCreateFolders = fileDropCreateFolders;
            this.Paths = paths;
            this.Recipients = recipients;
            this.Messages = messages;
            this.Inherited = inherited;
            this.Status = status;
            this.HasNotification = hasNotification;
            this.Created = created;
            this.Modified = modified;
            this.TrackingStatus = trackingStatus;
            this.FormId = formId;
        }
        
        /// <summary>
        /// Share name.
        /// </summary>
        /// <value>Share name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if the share has password.
        /// </summary>
        /// <value>True if the share has password.</value>
        [DataMember(Name="hasPassword", EmitDefaultValue=false)]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// True if the share has a public url.
        /// </summary>
        /// <value>True if the share has a public url.</value>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool? Public { get; set; }


        /// <summary>
        /// Description of the share access rights.
        /// </summary>
        /// <value>Description of the share access rights.</value>
        [DataMember(Name="accessDescription", EmitDefaultValue=false)]
        public string AccessDescription { get; set; }

        /// <summary>
        /// True if share can be embedded.
        /// </summary>
        /// <value>True if share can be embedded.</value>
        [DataMember(Name="embed", EmitDefaultValue=false)]
        public bool? Embed { get; set; }

        /// <summary>
        /// Share hash.
        /// </summary>
        /// <value>Share hash.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Share owner&#x27;s hash.
        /// </summary>
        /// <value>Share owner&#x27;s hash.</value>
        [DataMember(Name="ownerHash", EmitDefaultValue=false)]
        public string OwnerHash { get; set; }

        /// <summary>
        /// Expiration date of the share.
        /// </summary>
        /// <value>Expiration date of the share.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public string Expiration { get; set; }

        /// <summary>
        /// True if the share has expired.
        /// </summary>
        /// <value>True if the share has expired.</value>
        [DataMember(Name="expired", EmitDefaultValue=false)]
        public bool? Expired { get; set; }

        /// <summary>
        /// Invitations resent date. Can be &#x60;null&#x60; if resent never happened.
        /// </summary>
        /// <value>Invitations resent date. Can be &#x60;null&#x60; if resent never happened.</value>
        [DataMember(Name="resent", EmitDefaultValue=false)]
        public DateTime? Resent { get; set; }


        /// <summary>
        /// True if share requires email to access.
        /// </summary>
        /// <value>True if share requires email to access.</value>
        [DataMember(Name="requireEmail", EmitDefaultValue=false)]
        public bool? RequireEmail { get; set; }

        /// <summary>
        /// Flag to show if separate folders should be created for each file upload to receive folder.
        /// </summary>
        /// <value>Flag to show if separate folders should be created for each file upload to receive folder.</value>
        [DataMember(Name="fileDropCreateFolders", EmitDefaultValue=false)]
        public bool? FileDropCreateFolders { get; set; }

        /// <summary>
        /// Path to the shared resource in your account.
        /// </summary>
        /// <value>Path to the shared resource in your account.</value>
        [DataMember(Name="paths", EmitDefaultValue=false)]
        public List<string> Paths { get; set; }

        /// <summary>
        /// Array of recipients.
        /// </summary>
        /// <value>Array of recipients.</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<ShareRecipient> Recipients { get; set; }

        /// <summary>
        /// Array of invitation messages.
        /// </summary>
        /// <value>Array of invitation messages.</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ShareMessage> Messages { get; set; }

        /// <summary>
        /// True if share inherited from parent folder.
        /// </summary>
        /// <value>True if share inherited from parent folder.</value>
        [DataMember(Name="inherited", EmitDefaultValue=false)]
        public bool? Inherited { get; set; }


        /// <summary>
        /// True if share has notification.
        /// </summary>
        /// <value>True if share has notification.</value>
        [DataMember(Name="hasNotification", EmitDefaultValue=false)]
        public bool? HasNotification { get; set; }

        /// <summary>
        /// Timestamp of share creation.
        /// </summary>
        /// <value>Timestamp of share creation.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Timestamp of share modification. Can be &#x60;null&#x60; if it wasn&#x27;t modified.
        /// </summary>
        /// <value>Timestamp of share modification. Can be &#x60;null&#x60; if it wasn&#x27;t modified.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }


        /// <summary>
        /// ID of the form.
        /// </summary>
        /// <value>ID of the form.</value>
        [DataMember(Name="formId", EmitDefaultValue=false)]
        public int? FormId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShareAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  AccessMode: ").Append(AccessMode).Append("\n");
            sb.Append("  AccessDescription: ").Append(AccessDescription).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  OwnerHash: ").Append(OwnerHash).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  Resent: ").Append(Resent).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RequireEmail: ").Append(RequireEmail).Append("\n");
            sb.Append("  FileDropCreateFolders: ").Append(FileDropCreateFolders).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Inherited: ").Append(Inherited).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HasNotification: ").Append(HasNotification).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  TrackingStatus: ").Append(TrackingStatus).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareAttributes);
        }

        /// <summary>
        /// Returns true if ShareAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HasPassword == input.HasPassword ||
                    (this.HasPassword != null &&
                    this.HasPassword.Equals(input.HasPassword))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.AccessMode == input.AccessMode ||
                    this.AccessMode != null &&
                    input.AccessMode != null &&
                    this.AccessMode.SequenceEqual(input.AccessMode)
                ) && 
                (
                    this.AccessDescription == input.AccessDescription ||
                    (this.AccessDescription != null &&
                    this.AccessDescription.Equals(input.AccessDescription))
                ) && 
                (
                    this.Embed == input.Embed ||
                    (this.Embed != null &&
                    this.Embed.Equals(input.Embed))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.OwnerHash == input.OwnerHash ||
                    (this.OwnerHash != null &&
                    this.OwnerHash.Equals(input.OwnerHash))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Expired == input.Expired ||
                    (this.Expired != null &&
                    this.Expired.Equals(input.Expired))
                ) && 
                (
                    this.Resent == input.Resent ||
                    (this.Resent != null &&
                    this.Resent.Equals(input.Resent))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RequireEmail == input.RequireEmail ||
                    (this.RequireEmail != null &&
                    this.RequireEmail.Equals(input.RequireEmail))
                ) && 
                (
                    this.FileDropCreateFolders == input.FileDropCreateFolders ||
                    (this.FileDropCreateFolders != null &&
                    this.FileDropCreateFolders.Equals(input.FileDropCreateFolders))
                ) && 
                (
                    this.Paths == input.Paths ||
                    this.Paths != null &&
                    input.Paths != null &&
                    this.Paths.SequenceEqual(input.Paths)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.Inherited == input.Inherited ||
                    (this.Inherited != null &&
                    this.Inherited.Equals(input.Inherited))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.HasNotification == input.HasNotification ||
                    (this.HasNotification != null &&
                    this.HasNotification.Equals(input.HasNotification))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.TrackingStatus == input.TrackingStatus ||
                    (this.TrackingStatus != null &&
                    this.TrackingStatus.Equals(input.TrackingStatus))
                ) && 
                (
                    this.FormId == input.FormId ||
                    (this.FormId != null &&
                    this.FormId.Equals(input.FormId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HasPassword != null)
                    hashCode = hashCode * 59 + this.HasPassword.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.AccessMode != null)
                    hashCode = hashCode * 59 + this.AccessMode.GetHashCode();
                if (this.AccessDescription != null)
                    hashCode = hashCode * 59 + this.AccessDescription.GetHashCode();
                if (this.Embed != null)
                    hashCode = hashCode * 59 + this.Embed.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.OwnerHash != null)
                    hashCode = hashCode * 59 + this.OwnerHash.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.Expired != null)
                    hashCode = hashCode * 59 + this.Expired.GetHashCode();
                if (this.Resent != null)
                    hashCode = hashCode * 59 + this.Resent.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RequireEmail != null)
                    hashCode = hashCode * 59 + this.RequireEmail.GetHashCode();
                if (this.FileDropCreateFolders != null)
                    hashCode = hashCode * 59 + this.FileDropCreateFolders.GetHashCode();
                if (this.Paths != null)
                    hashCode = hashCode * 59 + this.Paths.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.Inherited != null)
                    hashCode = hashCode * 59 + this.Inherited.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.HasNotification != null)
                    hashCode = hashCode * 59 + this.HasNotification.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.TrackingStatus != null)
                    hashCode = hashCode * 59 + this.TrackingStatus.GetHashCode();
                if (this.FormId != null)
                    hashCode = hashCode * 59 + this.FormId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

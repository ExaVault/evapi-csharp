/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// Quota
    /// </summary>
    [DataContract]
        public partial class Quota :  IEquatable<Quota>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Quota" /> class.
        /// </summary>
        /// <param name="diskLimit">Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan..</param>
        /// <param name="diskUsed">Amount of disk space currently in use..</param>
        /// <param name="noticeEnabled">Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?.</param>
        /// <param name="noticeThreshold">Treshold that triggers a quota notification. This represents the \&quot;percent full\&quot; your account must be before the quota notification is generated..</param>
        public Quota(long? diskLimit = default(long?), long? diskUsed = default(long?), bool? noticeEnabled = default(bool?), int? noticeThreshold = default(int?))
        {
            this.DiskLimit = diskLimit;
            this.DiskUsed = diskUsed;
            this.NoticeEnabled = noticeEnabled;
            this.NoticeThreshold = noticeThreshold;
        }
        
        /// <summary>
        /// Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.
        /// </summary>
        /// <value>Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.</value>
        [DataMember(Name="diskLimit", EmitDefaultValue=false)]
        public long? DiskLimit { get; set; }

        /// <summary>
        /// Amount of disk space currently in use.
        /// </summary>
        /// <value>Amount of disk space currently in use.</value>
        [DataMember(Name="diskUsed", EmitDefaultValue=false)]
        public long? DiskUsed { get; set; }

        /// <summary>
        /// Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?
        /// </summary>
        /// <value>Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?</value>
        [DataMember(Name="noticeEnabled", EmitDefaultValue=false)]
        public bool? NoticeEnabled { get; set; }

        /// <summary>
        /// Treshold that triggers a quota notification. This represents the \&quot;percent full\&quot; your account must be before the quota notification is generated.
        /// </summary>
        /// <value>Treshold that triggers a quota notification. This represents the \&quot;percent full\&quot; your account must be before the quota notification is generated.</value>
        [DataMember(Name="noticeThreshold", EmitDefaultValue=false)]
        public int? NoticeThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Quota {\n");
            sb.Append("  DiskLimit: ").Append(DiskLimit).Append("\n");
            sb.Append("  DiskUsed: ").Append(DiskUsed).Append("\n");
            sb.Append("  NoticeEnabled: ").Append(NoticeEnabled).Append("\n");
            sb.Append("  NoticeThreshold: ").Append(NoticeThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Quota);
        }

        /// <summary>
        /// Returns true if Quota instances are equal
        /// </summary>
        /// <param name="input">Instance of Quota to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Quota input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiskLimit == input.DiskLimit ||
                    (this.DiskLimit != null &&
                    this.DiskLimit.Equals(input.DiskLimit))
                ) && 
                (
                    this.DiskUsed == input.DiskUsed ||
                    (this.DiskUsed != null &&
                    this.DiskUsed.Equals(input.DiskUsed))
                ) && 
                (
                    this.NoticeEnabled == input.NoticeEnabled ||
                    (this.NoticeEnabled != null &&
                    this.NoticeEnabled.Equals(input.NoticeEnabled))
                ) && 
                (
                    this.NoticeThreshold == input.NoticeThreshold ||
                    (this.NoticeThreshold != null &&
                    this.NoticeThreshold.Equals(input.NoticeThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiskLimit != null)
                    hashCode = hashCode * 59 + this.DiskLimit.GetHashCode();
                if (this.DiskUsed != null)
                    hashCode = hashCode * 59 + this.DiskUsed.GetHashCode();
                if (this.NoticeEnabled != null)
                    hashCode = hashCode * 59 + this.NoticeEnabled.GetHashCode();
                if (this.NoticeThreshold != null)
                    hashCode = hashCode * 59 + this.NoticeThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// NotificationRecipient
    /// </summary>
    [DataContract]
        public partial class NotificationRecipient :  IEquatable<NotificationRecipient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationRecipient" /> class.
        /// </summary>
        /// <param name="id">ID of the recipient..</param>
        /// <param name="notificationId">ID of the notification that the recipient belongs to..</param>
        /// <param name="email">Recipient email..</param>
        /// <param name="created">Timestamp of adding notification recipient..</param>
        /// <param name="modified">Timestamp of notification recipient modification..</param>
        public NotificationRecipient(int? id = default(int?), int? notificationId = default(int?), string email = default(string), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?))
        {
            this.Id = id;
            this.NotificationId = notificationId;
            this.Email = email;
            this.Created = created;
            this.Modified = modified;
        }
        
        /// <summary>
        /// ID of the recipient.
        /// </summary>
        /// <value>ID of the recipient.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// ID of the notification that the recipient belongs to.
        /// </summary>
        /// <value>ID of the notification that the recipient belongs to.</value>
        [DataMember(Name="notificationId", EmitDefaultValue=false)]
        public int? NotificationId { get; set; }

        /// <summary>
        /// Recipient email.
        /// </summary>
        /// <value>Recipient email.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Timestamp of adding notification recipient.
        /// </summary>
        /// <value>Timestamp of adding notification recipient.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Timestamp of notification recipient modification.
        /// </summary>
        /// <value>Timestamp of notification recipient modification.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationRecipient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationRecipient);
        }

        /// <summary>
        /// Returns true if NotificationRecipient instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationRecipient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationRecipient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NotificationId == input.NotificationId ||
                    (this.NotificationId != null &&
                    this.NotificationId.Equals(input.NotificationId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NotificationId != null)
                    hashCode = hashCode * 59 + this.NotificationId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

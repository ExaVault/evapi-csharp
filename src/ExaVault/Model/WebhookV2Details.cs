/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// WebhookV2Details
    /// </summary>
    [DataContract]
        public partial class WebhookV2Details :  IEquatable<WebhookV2Details>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookV2Details" /> class.
        /// </summary>
        /// <param name="attemptId">Entry - retry identifier.</param>
        /// <param name="accountName">Account master username.</param>
        /// <param name="eventTimestamp">Date and time event originally took place.</param>
        /// <param name="ipAddress">IP address of related activity.</param>
        /// <param name="protocol">Type of connection used for related activity.</param>
        /// <param name="username">Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or \&quot;publ.</param>
        /// <param name="_event">Type of related activity.</param>
        /// <param name="eventData">eventData.</param>
        public WebhookV2Details(string attemptId = default(string), string accountName = default(string), DateTime? eventTimestamp = default(DateTime?), string ipAddress = default(string), string protocol = default(string), string username = default(string), string _event = default(string), WebhookV2EventData eventData = default(WebhookV2EventData))
        {
            this.AttemptId = attemptId;
            this.AccountName = accountName;
            this.EventTimestamp = eventTimestamp;
            this.IpAddress = ipAddress;
            this.Protocol = protocol;
            this.Username = username;
            this.Event = _event;
            this.EventData = eventData;
        }
        
        /// <summary>
        /// Entry - retry identifier
        /// </summary>
        /// <value>Entry - retry identifier</value>
        [DataMember(Name="attemptId", EmitDefaultValue=false)]
        public string AttemptId { get; set; }

        /// <summary>
        /// Account master username
        /// </summary>
        /// <value>Account master username</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Date and time event originally took place
        /// </summary>
        /// <value>Date and time event originally took place</value>
        [DataMember(Name="eventTimestamp", EmitDefaultValue=false)]
        public DateTime? EventTimestamp { get; set; }

        /// <summary>
        /// IP address of related activity
        /// </summary>
        /// <value>IP address of related activity</value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Type of connection used for related activity
        /// </summary>
        /// <value>Type of connection used for related activity</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or \&quot;publ
        /// </summary>
        /// <value>Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or \&quot;publ</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Type of related activity
        /// </summary>
        /// <value>Type of related activity</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string Event { get; set; }

        /// <summary>
        /// Gets or Sets EventData
        /// </summary>
        [DataMember(Name="eventData", EmitDefaultValue=false)]
        public WebhookV2EventData EventData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookV2Details {\n");
            sb.Append("  AttemptId: ").Append(AttemptId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  EventTimestamp: ").Append(EventTimestamp).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  EventData: ").Append(EventData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookV2Details);
        }

        /// <summary>
        /// Returns true if WebhookV2Details instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookV2Details to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookV2Details input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttemptId == input.AttemptId ||
                    (this.AttemptId != null &&
                    this.AttemptId.Equals(input.AttemptId))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.EventTimestamp == input.EventTimestamp ||
                    (this.EventTimestamp != null &&
                    this.EventTimestamp.Equals(input.EventTimestamp))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.EventData == input.EventData ||
                    (this.EventData != null &&
                    this.EventData.Equals(input.EventData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttemptId != null)
                    hashCode = hashCode * 59 + this.AttemptId.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.EventTimestamp != null)
                    hashCode = hashCode * 59 + this.EventTimestamp.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.EventData != null)
                    hashCode = hashCode * 59 + this.EventData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

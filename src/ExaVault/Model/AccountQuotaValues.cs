/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// AccountQuotaValues
    /// </summary>
    [DataContract]
        public partial class AccountQuotaValues :  IEquatable<AccountQuotaValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountQuotaValues" /> class.
        /// </summary>
        /// <param name="noticeEnabled">Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day..</param>
        /// <param name="noticeThreshold">Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive)..</param>
        /// <param name="transactionsNoticeEnabled">Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day..</param>
        /// <param name="transactionsNoticeThreshold">Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive)..</param>
        public AccountQuotaValues(bool? noticeEnabled = default(bool?), int? noticeThreshold = default(int?), bool? transactionsNoticeEnabled = default(bool?), int? transactionsNoticeThreshold = default(int?))
        {
            this.NoticeEnabled = noticeEnabled;
            this.NoticeThreshold = noticeThreshold;
            this.TransactionsNoticeEnabled = transactionsNoticeEnabled;
            this.TransactionsNoticeThreshold = transactionsNoticeThreshold;
        }
        
        /// <summary>
        /// Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.
        /// </summary>
        /// <value>Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.</value>
        [DataMember(Name="noticeEnabled", EmitDefaultValue=false)]
        public bool? NoticeEnabled { get; set; }

        /// <summary>
        /// Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).
        /// </summary>
        /// <value>Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).</value>
        [DataMember(Name="noticeThreshold", EmitDefaultValue=false)]
        public int? NoticeThreshold { get; set; }

        /// <summary>
        /// Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.
        /// </summary>
        /// <value>Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.</value>
        [DataMember(Name="transactionsNoticeEnabled", EmitDefaultValue=false)]
        public bool? TransactionsNoticeEnabled { get; set; }

        /// <summary>
        /// Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).
        /// </summary>
        /// <value>Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).</value>
        [DataMember(Name="transactionsNoticeThreshold", EmitDefaultValue=false)]
        public int? TransactionsNoticeThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountQuotaValues {\n");
            sb.Append("  NoticeEnabled: ").Append(NoticeEnabled).Append("\n");
            sb.Append("  NoticeThreshold: ").Append(NoticeThreshold).Append("\n");
            sb.Append("  TransactionsNoticeEnabled: ").Append(TransactionsNoticeEnabled).Append("\n");
            sb.Append("  TransactionsNoticeThreshold: ").Append(TransactionsNoticeThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountQuotaValues);
        }

        /// <summary>
        /// Returns true if AccountQuotaValues instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountQuotaValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountQuotaValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NoticeEnabled == input.NoticeEnabled ||
                    (this.NoticeEnabled != null &&
                    this.NoticeEnabled.Equals(input.NoticeEnabled))
                ) && 
                (
                    this.NoticeThreshold == input.NoticeThreshold ||
                    (this.NoticeThreshold != null &&
                    this.NoticeThreshold.Equals(input.NoticeThreshold))
                ) && 
                (
                    this.TransactionsNoticeEnabled == input.TransactionsNoticeEnabled ||
                    (this.TransactionsNoticeEnabled != null &&
                    this.TransactionsNoticeEnabled.Equals(input.TransactionsNoticeEnabled))
                ) && 
                (
                    this.TransactionsNoticeThreshold == input.TransactionsNoticeThreshold ||
                    (this.TransactionsNoticeThreshold != null &&
                    this.TransactionsNoticeThreshold.Equals(input.TransactionsNoticeThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NoticeEnabled != null)
                    hashCode = hashCode * 59 + this.NoticeEnabled.GetHashCode();
                if (this.NoticeThreshold != null)
                    hashCode = hashCode * 59 + this.NoticeThreshold.GetHashCode();
                if (this.TransactionsNoticeEnabled != null)
                    hashCode = hashCode * 59 + this.TransactionsNoticeEnabled.GetHashCode();
                if (this.TransactionsNoticeThreshold != null)
                    hashCode = hashCode * 59 + this.TransactionsNoticeThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

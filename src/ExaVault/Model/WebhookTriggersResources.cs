/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// WebhookTriggersResources
    /// </summary>
    [DataContract]
        public partial class WebhookTriggersResources :  IEquatable<WebhookTriggersResources>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookTriggersResources" /> class.
        /// </summary>
        /// <param name="upload">Send webhook messages when resources are uploaded..</param>
        /// <param name="download">Send webhook messages when resources are downloaded..</param>
        /// <param name="delete">Send webhook messages when resources are deleted.</param>
        /// <param name="rename">Send webhook messages when resources are renamed..</param>
        /// <param name="copy">Send webhook messages when resources are copied..</param>
        /// <param name="move">Send webhook messages when resources are moved..</param>
        /// <param name="compress">Send webhook messages when resources are compressed into an archive..</param>
        /// <param name="extract">Send webhook messages when resources are extracted from an archive..</param>
        /// <param name="createFolder">Send webhook messages when a new folder is created..</param>
        public WebhookTriggersResources(bool? upload = default(bool?), bool? download = default(bool?), bool? delete = default(bool?), bool? rename = default(bool?), bool? copy = default(bool?), bool? move = default(bool?), bool? compress = default(bool?), bool? extract = default(bool?), bool? createFolder = default(bool?))
        {
            this.Upload = upload;
            this.Download = download;
            this.Delete = delete;
            this.Rename = rename;
            this.Copy = copy;
            this.Move = move;
            this.Compress = compress;
            this.Extract = extract;
            this.CreateFolder = createFolder;
        }
        
        /// <summary>
        /// Send webhook messages when resources are uploaded.
        /// </summary>
        /// <value>Send webhook messages when resources are uploaded.</value>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public bool? Upload { get; set; }

        /// <summary>
        /// Send webhook messages when resources are downloaded.
        /// </summary>
        /// <value>Send webhook messages when resources are downloaded.</value>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public bool? Download { get; set; }

        /// <summary>
        /// Send webhook messages when resources are deleted
        /// </summary>
        /// <value>Send webhook messages when resources are deleted</value>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        public bool? Delete { get; set; }

        /// <summary>
        /// Send webhook messages when resources are renamed.
        /// </summary>
        /// <value>Send webhook messages when resources are renamed.</value>
        [DataMember(Name="rename", EmitDefaultValue=false)]
        public bool? Rename { get; set; }

        /// <summary>
        /// Send webhook messages when resources are copied.
        /// </summary>
        /// <value>Send webhook messages when resources are copied.</value>
        [DataMember(Name="copy", EmitDefaultValue=false)]
        public bool? Copy { get; set; }

        /// <summary>
        /// Send webhook messages when resources are moved.
        /// </summary>
        /// <value>Send webhook messages when resources are moved.</value>
        [DataMember(Name="move", EmitDefaultValue=false)]
        public bool? Move { get; set; }

        /// <summary>
        /// Send webhook messages when resources are compressed into an archive.
        /// </summary>
        /// <value>Send webhook messages when resources are compressed into an archive.</value>
        [DataMember(Name="compress", EmitDefaultValue=false)]
        public bool? Compress { get; set; }

        /// <summary>
        /// Send webhook messages when resources are extracted from an archive.
        /// </summary>
        /// <value>Send webhook messages when resources are extracted from an archive.</value>
        [DataMember(Name="extract", EmitDefaultValue=false)]
        public bool? Extract { get; set; }

        /// <summary>
        /// Send webhook messages when a new folder is created.
        /// </summary>
        /// <value>Send webhook messages when a new folder is created.</value>
        [DataMember(Name="createFolder", EmitDefaultValue=false)]
        public bool? CreateFolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookTriggersResources {\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Rename: ").Append(Rename).Append("\n");
            sb.Append("  Copy: ").Append(Copy).Append("\n");
            sb.Append("  Move: ").Append(Move).Append("\n");
            sb.Append("  Compress: ").Append(Compress).Append("\n");
            sb.Append("  Extract: ").Append(Extract).Append("\n");
            sb.Append("  CreateFolder: ").Append(CreateFolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookTriggersResources);
        }

        /// <summary>
        /// Returns true if WebhookTriggersResources instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookTriggersResources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookTriggersResources input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                ) && 
                (
                    this.Download == input.Download ||
                    (this.Download != null &&
                    this.Download.Equals(input.Download))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                ) && 
                (
                    this.Rename == input.Rename ||
                    (this.Rename != null &&
                    this.Rename.Equals(input.Rename))
                ) && 
                (
                    this.Copy == input.Copy ||
                    (this.Copy != null &&
                    this.Copy.Equals(input.Copy))
                ) && 
                (
                    this.Move == input.Move ||
                    (this.Move != null &&
                    this.Move.Equals(input.Move))
                ) && 
                (
                    this.Compress == input.Compress ||
                    (this.Compress != null &&
                    this.Compress.Equals(input.Compress))
                ) && 
                (
                    this.Extract == input.Extract ||
                    (this.Extract != null &&
                    this.Extract.Equals(input.Extract))
                ) && 
                (
                    this.CreateFolder == input.CreateFolder ||
                    (this.CreateFolder != null &&
                    this.CreateFolder.Equals(input.CreateFolder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                if (this.Download != null)
                    hashCode = hashCode * 59 + this.Download.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                if (this.Rename != null)
                    hashCode = hashCode * 59 + this.Rename.GetHashCode();
                if (this.Copy != null)
                    hashCode = hashCode * 59 + this.Copy.GetHashCode();
                if (this.Move != null)
                    hashCode = hashCode * 59 + this.Move.GetHashCode();
                if (this.Compress != null)
                    hashCode = hashCode * 59 + this.Compress.GetHashCode();
                if (this.Extract != null)
                    hashCode = hashCode * 59 + this.Extract.GetHashCode();
                if (this.CreateFolder != null)
                    hashCode = hashCode * 59 + this.CreateFolder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// Object contains infromation about ongoing arhivation of files for download.
    /// </summary>
    [DataContract]
        public partial class DownloadPolling :  IEquatable<DownloadPolling>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadPolling" /> class.
        /// </summary>
        /// <param name="pollingArchiveName">Name of the zip file..</param>
        /// <param name="percent">Indicates archiving process completeness..</param>
        public DownloadPolling(string pollingArchiveName = default(string), int? percent = default(int?))
        {
            this.PollingArchiveName = pollingArchiveName;
            this.Percent = percent;
        }
        
        /// <summary>
        /// Name of the zip file.
        /// </summary>
        /// <value>Name of the zip file.</value>
        [DataMember(Name="pollingArchiveName", EmitDefaultValue=false)]
        public string PollingArchiveName { get; set; }

        /// <summary>
        /// Indicates archiving process completeness.
        /// </summary>
        /// <value>Indicates archiving process completeness.</value>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public int? Percent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DownloadPolling {\n");
            sb.Append("  PollingArchiveName: ").Append(PollingArchiveName).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DownloadPolling);
        }

        /// <summary>
        /// Returns true if DownloadPolling instances are equal
        /// </summary>
        /// <param name="input">Instance of DownloadPolling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DownloadPolling input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PollingArchiveName == input.PollingArchiveName ||
                    (this.PollingArchiveName != null &&
                    this.PollingArchiveName.Equals(input.PollingArchiveName))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PollingArchiveName != null)
                    hashCode = hashCode * 59 + this.PollingArchiveName.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

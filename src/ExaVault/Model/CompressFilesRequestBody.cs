/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// CompressFilesRequestBody
    /// </summary>
    [DataContract]
        public partial class CompressFilesRequestBody :  IEquatable<CompressFilesRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompressFilesRequestBody" /> class.
        /// </summary>
        /// <param name="resources">Resource identifiers for file(s)/folder(s) to include in new zip file (required).</param>
        /// <param name="parentResource">Full path to folder new archive will be created in. If left blank, \&quot;/\&quot; will be used..</param>
        /// <param name="archiveName">Name of the zip archive to create. If left blank, current date will be used..</param>
        public CompressFilesRequestBody(List<string> resources = default(List<string>), string parentResource = default(string), string archiveName = default(string))
        {
            // to ensure "resources" is required (not null)
            if (resources == null)
            {
                throw new InvalidDataException("resources is a required property for CompressFilesRequestBody and cannot be null");
            }
            else
            {
                this.Resources = resources;
            }
            this.ParentResource = parentResource;
            this.ArchiveName = archiveName;
        }
        
        /// <summary>
        /// Resource identifiers for file(s)/folder(s) to include in new zip file
        /// </summary>
        /// <value>Resource identifiers for file(s)/folder(s) to include in new zip file</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<string> Resources { get; set; }

        /// <summary>
        /// Full path to folder new archive will be created in. If left blank, \&quot;/\&quot; will be used.
        /// </summary>
        /// <value>Full path to folder new archive will be created in. If left blank, \&quot;/\&quot; will be used.</value>
        [DataMember(Name="parentResource", EmitDefaultValue=false)]
        public string ParentResource { get; set; }

        /// <summary>
        /// Name of the zip archive to create. If left blank, current date will be used.
        /// </summary>
        /// <value>Name of the zip archive to create. If left blank, current date will be used.</value>
        [DataMember(Name="archiveName", EmitDefaultValue=false)]
        public string ArchiveName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompressFilesRequestBody {\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  ParentResource: ").Append(ParentResource).Append("\n");
            sb.Append("  ArchiveName: ").Append(ArchiveName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompressFilesRequestBody);
        }

        /// <summary>
        /// Returns true if CompressFilesRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CompressFilesRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompressFilesRequestBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.ParentResource == input.ParentResource ||
                    (this.ParentResource != null &&
                    this.ParentResource.Equals(input.ParentResource))
                ) && 
                (
                    this.ArchiveName == input.ArchiveName ||
                    (this.ArchiveName != null &&
                    this.ArchiveName.Equals(input.ArchiveName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.ParentResource != null)
                    hashCode = hashCode * 59 + this.ParentResource.GetHashCode();
                if (this.ArchiveName != null)
                    hashCode = hashCode * 59 + this.ArchiveName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// WebhookActivityAttributesV2
    /// </summary>
    [DataContract]
        public partial class WebhookActivityAttributesV2 :  IEquatable<WebhookActivityAttributesV2>, IValidatableObject
    {
        /// <summary>
        /// Event type
        /// </summary>
        /// <value>Event type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EventEnum
        {
            /// <summary>
            /// Enum ResourcesUpload for value: resources.upload
            /// </summary>
            [EnumMember(Value = "resources.upload")]
            ResourcesUpload = 1,
            /// <summary>
            /// Enum ResourcesDownload for value: resources.download
            /// </summary>
            [EnumMember(Value = "resources.download")]
            ResourcesDownload = 2,
            /// <summary>
            /// Enum ResourcesDelete for value: resources.delete
            /// </summary>
            [EnumMember(Value = "resources.delete")]
            ResourcesDelete = 3,
            /// <summary>
            /// Enum ResourcesRename for value: resources.rename
            /// </summary>
            [EnumMember(Value = "resources.rename")]
            ResourcesRename = 4,
            /// <summary>
            /// Enum ResourcesCopy for value: resources.copy
            /// </summary>
            [EnumMember(Value = "resources.copy")]
            ResourcesCopy = 5,
            /// <summary>
            /// Enum ResourcesMove for value: resources.move
            /// </summary>
            [EnumMember(Value = "resources.move")]
            ResourcesMove = 6,
            /// <summary>
            /// Enum ResourcesCompress for value: resources.compress
            /// </summary>
            [EnumMember(Value = "resources.compress")]
            ResourcesCompress = 7,
            /// <summary>
            /// Enum ResourcesExtract for value: resources.extract
            /// </summary>
            [EnumMember(Value = "resources.extract")]
            ResourcesExtract = 8,
            /// <summary>
            /// Enum ResourcesCreateFolder for value: resources.createFolder
            /// </summary>
            [EnumMember(Value = "resources.createFolder")]
            ResourcesCreateFolder = 9,
            /// <summary>
            /// Enum SharesFormSubmit for value: shares.formSubmit
            /// </summary>
            [EnumMember(Value = "shares.formSubmit")]
            SharesFormSubmit = 10        }
        /// <summary>
        /// Event type
        /// </summary>
        /// <value>Event type</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public EventEnum? Event { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookActivityAttributesV2" /> class.
        /// </summary>
        /// <param name="webhookId">Unique ID of webhook configuration.</param>
        /// <param name="webhookFormat">What version of webhook message is being sent &#x60;v2&#x60;.</param>
        /// <param name="attemptId">Event - retry identifier.</param>
        /// <param name="accountId">Unique ID of account.</param>
        /// <param name="resend">Whether this attempt was a re-send of a previous attempt.</param>
        /// <param name="endpointUrl">The URL the message was sent to.</param>
        /// <param name="_event">Event type.</param>
        /// <param name="status">HTTP Status Code returned by webhook listener.</param>
        /// <param name="ipAddress">IP Address of related activity.</param>
        /// <param name="response">Body of web response returned by webhook listener.</param>
        /// <param name="details">details.</param>
        /// <param name="webhookPath">Path that webhook is watching.</param>
        /// <param name="resourcePath">Path of resource that matched webhook.</param>
        /// <param name="username">Username of related activity.</param>
        /// <param name="created">Date and time of webhook message being generated by system.</param>
        public WebhookActivityAttributesV2(int? webhookId = default(int?), string webhookFormat = default(string), string attemptId = default(string), string accountId = default(string), bool? resend = default(bool?), string endpointUrl = default(string), EventEnum? _event = default(EventEnum?), int? status = default(int?), string ipAddress = default(string), string response = default(string), WebhookV2Details details = default(WebhookV2Details), string webhookPath = default(string), string resourcePath = default(string), string username = default(string), string created = default(string))
        {
            this.WebhookId = webhookId;
            this.WebhookFormat = webhookFormat;
            this.AttemptId = attemptId;
            this.AccountId = accountId;
            this.Resend = resend;
            this.EndpointUrl = endpointUrl;
            this.Event = _event;
            this.Status = status;
            this.IpAddress = ipAddress;
            this.Response = response;
            this.Details = details;
            this.WebhookPath = webhookPath;
            this.ResourcePath = resourcePath;
            this.Username = username;
            this.Created = created;
        }
        
        /// <summary>
        /// Unique ID of webhook configuration
        /// </summary>
        /// <value>Unique ID of webhook configuration</value>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public int? WebhookId { get; set; }

        /// <summary>
        /// What version of webhook message is being sent &#x60;v2&#x60;
        /// </summary>
        /// <value>What version of webhook message is being sent &#x60;v2&#x60;</value>
        [DataMember(Name="webhookFormat", EmitDefaultValue=false)]
        public string WebhookFormat { get; set; }

        /// <summary>
        /// Event - retry identifier
        /// </summary>
        /// <value>Event - retry identifier</value>
        [DataMember(Name="attemptId", EmitDefaultValue=false)]
        public string AttemptId { get; set; }

        /// <summary>
        /// Unique ID of account
        /// </summary>
        /// <value>Unique ID of account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Whether this attempt was a re-send of a previous attempt
        /// </summary>
        /// <value>Whether this attempt was a re-send of a previous attempt</value>
        [DataMember(Name="resend", EmitDefaultValue=false)]
        public bool? Resend { get; set; }

        /// <summary>
        /// The URL the message was sent to
        /// </summary>
        /// <value>The URL the message was sent to</value>
        [DataMember(Name="endpointUrl", EmitDefaultValue=false)]
        public string EndpointUrl { get; set; }


        /// <summary>
        /// HTTP Status Code returned by webhook listener
        /// </summary>
        /// <value>HTTP Status Code returned by webhook listener</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// IP Address of related activity
        /// </summary>
        /// <value>IP Address of related activity</value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Body of web response returned by webhook listener
        /// </summary>
        /// <value>Body of web response returned by webhook listener</value>
        [DataMember(Name="response", EmitDefaultValue=false)]
        public string Response { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public WebhookV2Details Details { get; set; }

        /// <summary>
        /// Path that webhook is watching
        /// </summary>
        /// <value>Path that webhook is watching</value>
        [DataMember(Name="webhookPath", EmitDefaultValue=false)]
        public string WebhookPath { get; set; }

        /// <summary>
        /// Path of resource that matched webhook
        /// </summary>
        /// <value>Path of resource that matched webhook</value>
        [DataMember(Name="resourcePath", EmitDefaultValue=false)]
        public string ResourcePath { get; set; }

        /// <summary>
        /// Username of related activity
        /// </summary>
        /// <value>Username of related activity</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Date and time of webhook message being generated by system
        /// </summary>
        /// <value>Date and time of webhook message being generated by system</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookActivityAttributesV2 {\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  WebhookFormat: ").Append(WebhookFormat).Append("\n");
            sb.Append("  AttemptId: ").Append(AttemptId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Resend: ").Append(Resend).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  WebhookPath: ").Append(WebhookPath).Append("\n");
            sb.Append("  ResourcePath: ").Append(ResourcePath).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookActivityAttributesV2);
        }

        /// <summary>
        /// Returns true if WebhookActivityAttributesV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookActivityAttributesV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookActivityAttributesV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WebhookId == input.WebhookId ||
                    (this.WebhookId != null &&
                    this.WebhookId.Equals(input.WebhookId))
                ) && 
                (
                    this.WebhookFormat == input.WebhookFormat ||
                    (this.WebhookFormat != null &&
                    this.WebhookFormat.Equals(input.WebhookFormat))
                ) && 
                (
                    this.AttemptId == input.AttemptId ||
                    (this.AttemptId != null &&
                    this.AttemptId.Equals(input.AttemptId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Resend == input.Resend ||
                    (this.Resend != null &&
                    this.Resend.Equals(input.Resend))
                ) && 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.WebhookPath == input.WebhookPath ||
                    (this.WebhookPath != null &&
                    this.WebhookPath.Equals(input.WebhookPath))
                ) && 
                (
                    this.ResourcePath == input.ResourcePath ||
                    (this.ResourcePath != null &&
                    this.ResourcePath.Equals(input.ResourcePath))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WebhookId != null)
                    hashCode = hashCode * 59 + this.WebhookId.GetHashCode();
                if (this.WebhookFormat != null)
                    hashCode = hashCode * 59 + this.WebhookFormat.GetHashCode();
                if (this.AttemptId != null)
                    hashCode = hashCode * 59 + this.AttemptId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Resend != null)
                    hashCode = hashCode * 59 + this.Resend.GetHashCode();
                if (this.EndpointUrl != null)
                    hashCode = hashCode * 59 + this.EndpointUrl.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.WebhookPath != null)
                    hashCode = hashCode * 59 + this.WebhookPath.GetHashCode();
                if (this.ResourcePath != null)
                    hashCode = hashCode * 59 + this.ResourcePath.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// PlanDetailsWebhookOptions
    /// </summary>
    [DataContract]
        public partial class PlanDetailsWebhookOptions :  IEquatable<PlanDetailsWebhookOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanDetailsWebhookOptions" /> class.
        /// </summary>
        /// <param name="restrictionTypes">restrictionTypes.</param>
        /// <param name="amount">amount.</param>
        /// <param name="includeTriggers">includeTriggers.</param>
        public PlanDetailsWebhookOptions(List<string> restrictionTypes = default(List<string>), int? amount = default(int?), string includeTriggers = default(string))
        {
            this.RestrictionTypes = restrictionTypes;
            this.Amount = amount;
            this.IncludeTriggers = includeTriggers;
        }
        
        /// <summary>
        /// Gets or Sets RestrictionTypes
        /// </summary>
        [DataMember(Name="restrictionTypes", EmitDefaultValue=false)]
        public List<string> RestrictionTypes { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTriggers
        /// </summary>
        [DataMember(Name="includeTriggers", EmitDefaultValue=false)]
        public string IncludeTriggers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanDetailsWebhookOptions {\n");
            sb.Append("  RestrictionTypes: ").Append(RestrictionTypes).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  IncludeTriggers: ").Append(IncludeTriggers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanDetailsWebhookOptions);
        }

        /// <summary>
        /// Returns true if PlanDetailsWebhookOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanDetailsWebhookOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanDetailsWebhookOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RestrictionTypes == input.RestrictionTypes ||
                    this.RestrictionTypes != null &&
                    input.RestrictionTypes != null &&
                    this.RestrictionTypes.SequenceEqual(input.RestrictionTypes)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.IncludeTriggers == input.IncludeTriggers ||
                    (this.IncludeTriggers != null &&
                    this.IncludeTriggers.Equals(input.IncludeTriggers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RestrictionTypes != null)
                    hashCode = hashCode * 59 + this.RestrictionTypes.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.IncludeTriggers != null)
                    hashCode = hashCode * 59 + this.IncludeTriggers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

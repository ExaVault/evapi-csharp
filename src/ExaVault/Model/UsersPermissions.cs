/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// An object containing name/value pairs for each permission. Any permission that is not passed will be set to &#x60;false&#x60; by default. Note that users will be unable to see any files in the account unless you include &#x60;list&#x60; permission.
    /// </summary>
    [DataContract]
        public partial class UsersPermissions :  IEquatable<UsersPermissions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersPermissions" /> class.
        /// </summary>
        /// <param name="list">list.</param>
        /// <param name="download">download.</param>
        /// <param name="upload">upload.</param>
        /// <param name="modify">modify.</param>
        /// <param name="delete">delete.</param>
        /// <param name="changePassword">changePassword.</param>
        /// <param name="share">share.</param>
        /// <param name="notification">notification.</param>
        /// <param name="viewFormData">viewFormData.</param>
        /// <param name="deleteFormData">deleteFormData.</param>
        public UsersPermissions(bool? list = default(bool?), bool? download = default(bool?), bool? upload = default(bool?), bool? modify = default(bool?), bool? delete = default(bool?), bool? changePassword = default(bool?), bool? share = default(bool?), bool? notification = default(bool?), bool? viewFormData = default(bool?), bool? deleteFormData = default(bool?))
        {
            this.List = list;
            this.Download = download;
            this.Upload = upload;
            this.Modify = modify;
            this.Delete = delete;
            this.ChangePassword = changePassword;
            this.Share = share;
            this.Notification = notification;
            this.ViewFormData = viewFormData;
            this.DeleteFormData = deleteFormData;
        }
        
        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name="list", EmitDefaultValue=false)]
        public bool? List { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public bool? Download { get; set; }

        /// <summary>
        /// Gets or Sets Upload
        /// </summary>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public bool? Upload { get; set; }

        /// <summary>
        /// Gets or Sets Modify
        /// </summary>
        [DataMember(Name="modify", EmitDefaultValue=false)]
        public bool? Modify { get; set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        public bool? Delete { get; set; }

        /// <summary>
        /// Gets or Sets ChangePassword
        /// </summary>
        [DataMember(Name="changePassword", EmitDefaultValue=false)]
        public bool? ChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets Share
        /// </summary>
        [DataMember(Name="share", EmitDefaultValue=false)]
        public bool? Share { get; set; }

        /// <summary>
        /// Gets or Sets Notification
        /// </summary>
        [DataMember(Name="notification", EmitDefaultValue=false)]
        public bool? Notification { get; set; }

        /// <summary>
        /// Gets or Sets ViewFormData
        /// </summary>
        [DataMember(Name="viewFormData", EmitDefaultValue=false)]
        public bool? ViewFormData { get; set; }

        /// <summary>
        /// Gets or Sets DeleteFormData
        /// </summary>
        [DataMember(Name="deleteFormData", EmitDefaultValue=false)]
        public bool? DeleteFormData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersPermissions {\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Modify: ").Append(Modify).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  ChangePassword: ").Append(ChangePassword).Append("\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("  ViewFormData: ").Append(ViewFormData).Append("\n");
            sb.Append("  DeleteFormData: ").Append(DeleteFormData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersPermissions);
        }

        /// <summary>
        /// Returns true if UsersPermissions instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersPermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersPermissions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.List == input.List ||
                    (this.List != null &&
                    this.List.Equals(input.List))
                ) && 
                (
                    this.Download == input.Download ||
                    (this.Download != null &&
                    this.Download.Equals(input.Download))
                ) && 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                ) && 
                (
                    this.Modify == input.Modify ||
                    (this.Modify != null &&
                    this.Modify.Equals(input.Modify))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                ) && 
                (
                    this.ChangePassword == input.ChangePassword ||
                    (this.ChangePassword != null &&
                    this.ChangePassword.Equals(input.ChangePassword))
                ) && 
                (
                    this.Share == input.Share ||
                    (this.Share != null &&
                    this.Share.Equals(input.Share))
                ) && 
                (
                    this.Notification == input.Notification ||
                    (this.Notification != null &&
                    this.Notification.Equals(input.Notification))
                ) && 
                (
                    this.ViewFormData == input.ViewFormData ||
                    (this.ViewFormData != null &&
                    this.ViewFormData.Equals(input.ViewFormData))
                ) && 
                (
                    this.DeleteFormData == input.DeleteFormData ||
                    (this.DeleteFormData != null &&
                    this.DeleteFormData.Equals(input.DeleteFormData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                if (this.Download != null)
                    hashCode = hashCode * 59 + this.Download.GetHashCode();
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                if (this.Modify != null)
                    hashCode = hashCode * 59 + this.Modify.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                if (this.ChangePassword != null)
                    hashCode = hashCode * 59 + this.ChangePassword.GetHashCode();
                if (this.Share != null)
                    hashCode = hashCode * 59 + this.Share.GetHashCode();
                if (this.Notification != null)
                    hashCode = hashCode * 59 + this.Notification.GetHashCode();
                if (this.ViewFormData != null)
                    hashCode = hashCode * 59 + this.ViewFormData.GetHashCode();
                if (this.DeleteFormData != null)
                    hashCode = hashCode * 59 + this.DeleteFormData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

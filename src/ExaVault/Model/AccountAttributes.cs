/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// AccountAttributes
    /// </summary>
    [DataContract]
        public partial class AccountAttributes :  IEquatable<AccountAttributes>, IValidatableObject
    {
        /// <summary>
        /// Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
        /// </summary>
        /// <value>Account status flag. A one (1) means the account is active; zero (0) means it is suspended.</value>
                public enum StatusEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0        }
        /// <summary>
        /// Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
        /// </summary>
        /// <value>Account status flag. A one (1) means the account is active; zero (0) means it is suspended.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAttributes" /> class.
        /// </summary>
        /// <param name="accountName">Name of the account.</param>
        /// <param name="username">Name of account&#x27;s master user.</param>
        /// <param name="maxUsers">Maximum number of users the account can have. This can be increased by contacting ExaVault Support..</param>
        /// <param name="userCount">Current number of users on the account..</param>
        /// <param name="status">Account status flag. A one (1) means the account is active; zero (0) means it is suspended..</param>
        /// <param name="branding">Branding flag. Set to &#x60;true&#x60; if the account has branding functionality enabled..</param>
        /// <param name="customDomain">Custom domain flag. Set to &#x60;true&#x60; if account type allows custom domain functionality..</param>
        /// <param name="quota">quota.</param>
        /// <param name="secureOnly">Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to &#x60;true&#x60; to disable all traffic over port 21..</param>
        /// <param name="complexPasswords">Flag to indicate whether the account requires complex passwords. Set to &#x60;true&#x60; to require complex passwords on all users and shares..</param>
        /// <param name="showReferralLinks">Flag to indicate showing of referrals links in the account. Set to &#x60;true&#x60; to include marketing messages in share invitations..</param>
        /// <param name="externalDomains">Custom domain used to brand this account..</param>
        /// <param name="allowedIp">Range of IP addresses allowed to access this account..</param>
        /// <param name="callbackSettings">callbackSettings.</param>
        /// <param name="brandingSettings">brandingSettings.</param>
        /// <param name="clientId">(ExaVault Use Only) Internal ID of the account in CMS..</param>
        /// <param name="welcomeEmailContent">Content of welcome email each new user will receive..</param>
        /// <param name="welcomeEmailSubject">Subject of welcome email each new user will receive..</param>
        /// <param name="customSignature">Custom signature for all account emails users or recipients will receive..</param>
        /// <param name="accountOnboarding">Whether the web application onboarding help is enabled for new users in the account..</param>
        /// <param name="created">Timestamp of account creation..</param>
        /// <param name="modified">Timestamp of account modification..</param>
        public AccountAttributes(string accountName = default(string), string username = default(string), int? maxUsers = default(int?), int? userCount = default(int?), StatusEnum? status = default(StatusEnum?), bool? branding = default(bool?), bool? customDomain = default(bool?), Quota quota = default(Quota), bool? secureOnly = default(bool?), bool? complexPasswords = default(bool?), bool? showReferralLinks = default(bool?), List<string> externalDomains = default(List<string>), List<AccountAttributesAllowedIp> allowedIp = default(List<AccountAttributesAllowedIp>), CallbackSettings callbackSettings = default(CallbackSettings), BrandingSettings brandingSettings = default(BrandingSettings), int? clientId = default(int?), string welcomeEmailContent = default(string), string welcomeEmailSubject = default(string), string customSignature = default(string), bool? accountOnboarding = default(bool?), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?))
        {
            this.AccountName = accountName;
            this.Username = username;
            this.MaxUsers = maxUsers;
            this.UserCount = userCount;
            this.Status = status;
            this.Branding = branding;
            this.CustomDomain = customDomain;
            this.Quota = quota;
            this.SecureOnly = secureOnly;
            this.ComplexPasswords = complexPasswords;
            this.ShowReferralLinks = showReferralLinks;
            this.ExternalDomains = externalDomains;
            this.AllowedIp = allowedIp;
            this.CallbackSettings = callbackSettings;
            this.BrandingSettings = brandingSettings;
            this.ClientId = clientId;
            this.WelcomeEmailContent = welcomeEmailContent;
            this.WelcomeEmailSubject = welcomeEmailSubject;
            this.CustomSignature = customSignature;
            this.AccountOnboarding = accountOnboarding;
            this.Created = created;
            this.Modified = modified;
        }
        
        /// <summary>
        /// Name of the account
        /// </summary>
        /// <value>Name of the account</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Name of account&#x27;s master user
        /// </summary>
        /// <value>Name of account&#x27;s master user</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Maximum number of users the account can have. This can be increased by contacting ExaVault Support.
        /// </summary>
        /// <value>Maximum number of users the account can have. This can be increased by contacting ExaVault Support.</value>
        [DataMember(Name="maxUsers", EmitDefaultValue=false)]
        public int? MaxUsers { get; set; }

        /// <summary>
        /// Current number of users on the account.
        /// </summary>
        /// <value>Current number of users on the account.</value>
        [DataMember(Name="userCount", EmitDefaultValue=false)]
        public int? UserCount { get; set; }


        /// <summary>
        /// Branding flag. Set to &#x60;true&#x60; if the account has branding functionality enabled.
        /// </summary>
        /// <value>Branding flag. Set to &#x60;true&#x60; if the account has branding functionality enabled.</value>
        [DataMember(Name="branding", EmitDefaultValue=false)]
        public bool? Branding { get; set; }

        /// <summary>
        /// Custom domain flag. Set to &#x60;true&#x60; if account type allows custom domain functionality.
        /// </summary>
        /// <value>Custom domain flag. Set to &#x60;true&#x60; if account type allows custom domain functionality.</value>
        [DataMember(Name="customDomain", EmitDefaultValue=false)]
        public bool? CustomDomain { get; set; }

        /// <summary>
        /// Gets or Sets Quota
        /// </summary>
        [DataMember(Name="quota", EmitDefaultValue=false)]
        public Quota Quota { get; set; }

        /// <summary>
        /// Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to &#x60;true&#x60; to disable all traffic over port 21.
        /// </summary>
        /// <value>Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to &#x60;true&#x60; to disable all traffic over port 21.</value>
        [DataMember(Name="secureOnly", EmitDefaultValue=false)]
        public bool? SecureOnly { get; set; }

        /// <summary>
        /// Flag to indicate whether the account requires complex passwords. Set to &#x60;true&#x60; to require complex passwords on all users and shares.
        /// </summary>
        /// <value>Flag to indicate whether the account requires complex passwords. Set to &#x60;true&#x60; to require complex passwords on all users and shares.</value>
        [DataMember(Name="complexPasswords", EmitDefaultValue=false)]
        public bool? ComplexPasswords { get; set; }

        /// <summary>
        /// Flag to indicate showing of referrals links in the account. Set to &#x60;true&#x60; to include marketing messages in share invitations.
        /// </summary>
        /// <value>Flag to indicate showing of referrals links in the account. Set to &#x60;true&#x60; to include marketing messages in share invitations.</value>
        [DataMember(Name="showReferralLinks", EmitDefaultValue=false)]
        public bool? ShowReferralLinks { get; set; }

        /// <summary>
        /// Custom domain used to brand this account.
        /// </summary>
        /// <value>Custom domain used to brand this account.</value>
        [DataMember(Name="externalDomains", EmitDefaultValue=false)]
        public List<string> ExternalDomains { get; set; }

        /// <summary>
        /// Range of IP addresses allowed to access this account.
        /// </summary>
        /// <value>Range of IP addresses allowed to access this account.</value>
        [DataMember(Name="allowedIp", EmitDefaultValue=false)]
        public List<AccountAttributesAllowedIp> AllowedIp { get; set; }

        /// <summary>
        /// Gets or Sets CallbackSettings
        /// </summary>
        [DataMember(Name="callbackSettings", EmitDefaultValue=false)]
        public CallbackSettings CallbackSettings { get; set; }

        /// <summary>
        /// Gets or Sets BrandingSettings
        /// </summary>
        [DataMember(Name="brandingSettings", EmitDefaultValue=false)]
        public BrandingSettings BrandingSettings { get; set; }

        /// <summary>
        /// (ExaVault Use Only) Internal ID of the account in CMS.
        /// </summary>
        /// <value>(ExaVault Use Only) Internal ID of the account in CMS.</value>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public int? ClientId { get; set; }

        /// <summary>
        /// Content of welcome email each new user will receive.
        /// </summary>
        /// <value>Content of welcome email each new user will receive.</value>
        [DataMember(Name="welcomeEmailContent", EmitDefaultValue=false)]
        public string WelcomeEmailContent { get; set; }

        /// <summary>
        /// Subject of welcome email each new user will receive.
        /// </summary>
        /// <value>Subject of welcome email each new user will receive.</value>
        [DataMember(Name="welcomeEmailSubject", EmitDefaultValue=false)]
        public string WelcomeEmailSubject { get; set; }

        /// <summary>
        /// Custom signature for all account emails users or recipients will receive.
        /// </summary>
        /// <value>Custom signature for all account emails users or recipients will receive.</value>
        [DataMember(Name="customSignature", EmitDefaultValue=false)]
        public string CustomSignature { get; set; }

        /// <summary>
        /// Whether the web application onboarding help is enabled for new users in the account.
        /// </summary>
        /// <value>Whether the web application onboarding help is enabled for new users in the account.</value>
        [DataMember(Name="accountOnboarding", EmitDefaultValue=false)]
        public bool? AccountOnboarding { get; set; }

        /// <summary>
        /// Timestamp of account creation.
        /// </summary>
        /// <value>Timestamp of account creation.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Timestamp of account modification.
        /// </summary>
        /// <value>Timestamp of account modification.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountAttributes {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  MaxUsers: ").Append(MaxUsers).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Branding: ").Append(Branding).Append("\n");
            sb.Append("  CustomDomain: ").Append(CustomDomain).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  SecureOnly: ").Append(SecureOnly).Append("\n");
            sb.Append("  ComplexPasswords: ").Append(ComplexPasswords).Append("\n");
            sb.Append("  ShowReferralLinks: ").Append(ShowReferralLinks).Append("\n");
            sb.Append("  ExternalDomains: ").Append(ExternalDomains).Append("\n");
            sb.Append("  AllowedIp: ").Append(AllowedIp).Append("\n");
            sb.Append("  CallbackSettings: ").Append(CallbackSettings).Append("\n");
            sb.Append("  BrandingSettings: ").Append(BrandingSettings).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  WelcomeEmailContent: ").Append(WelcomeEmailContent).Append("\n");
            sb.Append("  WelcomeEmailSubject: ").Append(WelcomeEmailSubject).Append("\n");
            sb.Append("  CustomSignature: ").Append(CustomSignature).Append("\n");
            sb.Append("  AccountOnboarding: ").Append(AccountOnboarding).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountAttributes);
        }

        /// <summary>
        /// Returns true if AccountAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.MaxUsers == input.MaxUsers ||
                    (this.MaxUsers != null &&
                    this.MaxUsers.Equals(input.MaxUsers))
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Branding == input.Branding ||
                    (this.Branding != null &&
                    this.Branding.Equals(input.Branding))
                ) && 
                (
                    this.CustomDomain == input.CustomDomain ||
                    (this.CustomDomain != null &&
                    this.CustomDomain.Equals(input.CustomDomain))
                ) && 
                (
                    this.Quota == input.Quota ||
                    (this.Quota != null &&
                    this.Quota.Equals(input.Quota))
                ) && 
                (
                    this.SecureOnly == input.SecureOnly ||
                    (this.SecureOnly != null &&
                    this.SecureOnly.Equals(input.SecureOnly))
                ) && 
                (
                    this.ComplexPasswords == input.ComplexPasswords ||
                    (this.ComplexPasswords != null &&
                    this.ComplexPasswords.Equals(input.ComplexPasswords))
                ) && 
                (
                    this.ShowReferralLinks == input.ShowReferralLinks ||
                    (this.ShowReferralLinks != null &&
                    this.ShowReferralLinks.Equals(input.ShowReferralLinks))
                ) && 
                (
                    this.ExternalDomains == input.ExternalDomains ||
                    this.ExternalDomains != null &&
                    input.ExternalDomains != null &&
                    this.ExternalDomains.SequenceEqual(input.ExternalDomains)
                ) && 
                (
                    this.AllowedIp == input.AllowedIp ||
                    this.AllowedIp != null &&
                    input.AllowedIp != null &&
                    this.AllowedIp.SequenceEqual(input.AllowedIp)
                ) && 
                (
                    this.CallbackSettings == input.CallbackSettings ||
                    (this.CallbackSettings != null &&
                    this.CallbackSettings.Equals(input.CallbackSettings))
                ) && 
                (
                    this.BrandingSettings == input.BrandingSettings ||
                    (this.BrandingSettings != null &&
                    this.BrandingSettings.Equals(input.BrandingSettings))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.WelcomeEmailContent == input.WelcomeEmailContent ||
                    (this.WelcomeEmailContent != null &&
                    this.WelcomeEmailContent.Equals(input.WelcomeEmailContent))
                ) && 
                (
                    this.WelcomeEmailSubject == input.WelcomeEmailSubject ||
                    (this.WelcomeEmailSubject != null &&
                    this.WelcomeEmailSubject.Equals(input.WelcomeEmailSubject))
                ) && 
                (
                    this.CustomSignature == input.CustomSignature ||
                    (this.CustomSignature != null &&
                    this.CustomSignature.Equals(input.CustomSignature))
                ) && 
                (
                    this.AccountOnboarding == input.AccountOnboarding ||
                    (this.AccountOnboarding != null &&
                    this.AccountOnboarding.Equals(input.AccountOnboarding))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.MaxUsers != null)
                    hashCode = hashCode * 59 + this.MaxUsers.GetHashCode();
                if (this.UserCount != null)
                    hashCode = hashCode * 59 + this.UserCount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Branding != null)
                    hashCode = hashCode * 59 + this.Branding.GetHashCode();
                if (this.CustomDomain != null)
                    hashCode = hashCode * 59 + this.CustomDomain.GetHashCode();
                if (this.Quota != null)
                    hashCode = hashCode * 59 + this.Quota.GetHashCode();
                if (this.SecureOnly != null)
                    hashCode = hashCode * 59 + this.SecureOnly.GetHashCode();
                if (this.ComplexPasswords != null)
                    hashCode = hashCode * 59 + this.ComplexPasswords.GetHashCode();
                if (this.ShowReferralLinks != null)
                    hashCode = hashCode * 59 + this.ShowReferralLinks.GetHashCode();
                if (this.ExternalDomains != null)
                    hashCode = hashCode * 59 + this.ExternalDomains.GetHashCode();
                if (this.AllowedIp != null)
                    hashCode = hashCode * 59 + this.AllowedIp.GetHashCode();
                if (this.CallbackSettings != null)
                    hashCode = hashCode * 59 + this.CallbackSettings.GetHashCode();
                if (this.BrandingSettings != null)
                    hashCode = hashCode * 59 + this.BrandingSettings.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.WelcomeEmailContent != null)
                    hashCode = hashCode * 59 + this.WelcomeEmailContent.GetHashCode();
                if (this.WelcomeEmailSubject != null)
                    hashCode = hashCode * 59 + this.WelcomeEmailSubject.GetHashCode();
                if (this.CustomSignature != null)
                    hashCode = hashCode * 59 + this.CustomSignature.GetHashCode();
                if (this.AccountOnboarding != null)
                    hashCode = hashCode * 59 + this.AccountOnboarding.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

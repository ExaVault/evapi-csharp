/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ExaVault.Client.SwaggerDateConverter;

namespace ExaVault.Model
{
    /// <summary>
    /// CSS Styles of the form.
    /// </summary>
    [DataContract]
        public partial class UpdateFormByIdRequestBody :  IEquatable<UpdateFormByIdRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFormByIdRequestBody" /> class.
        /// </summary>
        /// <param name="formDescription">Set a description for the form that will be visible to recipients. .</param>
        /// <param name="submitButtonText">Text to be displayed on the submission button..</param>
        /// <param name="successMessage">Text to be displayed when a recipient has submitted the form. .</param>
        /// <param name="elements">elements.</param>
        /// <param name="cssStyles">cssStyles.</param>
        public UpdateFormByIdRequestBody(string formDescription = default(string), string submitButtonText = default(string), string successMessage = default(string), List<FormsidElements> elements = default(List<FormsidElements>), string cssStyles = default(string))
        {
            this.FormDescription = formDescription;
            this.SubmitButtonText = submitButtonText;
            this.SuccessMessage = successMessage;
            this.Elements = elements;
            this.CssStyles = cssStyles;
        }
        
        /// <summary>
        /// Set a description for the form that will be visible to recipients. 
        /// </summary>
        /// <value>Set a description for the form that will be visible to recipients. </value>
        [DataMember(Name="formDescription", EmitDefaultValue=false)]
        public string FormDescription { get; set; }

        /// <summary>
        /// Text to be displayed on the submission button.
        /// </summary>
        /// <value>Text to be displayed on the submission button.</value>
        [DataMember(Name="submitButtonText", EmitDefaultValue=false)]
        public string SubmitButtonText { get; set; }

        /// <summary>
        /// Text to be displayed when a recipient has submitted the form. 
        /// </summary>
        /// <value>Text to be displayed when a recipient has submitted the form. </value>
        [DataMember(Name="successMessage", EmitDefaultValue=false)]
        public string SuccessMessage { get; set; }

        /// <summary>
        /// Gets or Sets Elements
        /// </summary>
        [DataMember(Name="elements", EmitDefaultValue=false)]
        public List<FormsidElements> Elements { get; set; }

        /// <summary>
        /// Gets or Sets CssStyles
        /// </summary>
        [DataMember(Name="cssStyles", EmitDefaultValue=false)]
        public string CssStyles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateFormByIdRequestBody {\n");
            sb.Append("  FormDescription: ").Append(FormDescription).Append("\n");
            sb.Append("  SubmitButtonText: ").Append(SubmitButtonText).Append("\n");
            sb.Append("  SuccessMessage: ").Append(SuccessMessage).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("  CssStyles: ").Append(CssStyles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateFormByIdRequestBody);
        }

        /// <summary>
        /// Returns true if UpdateFormByIdRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateFormByIdRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateFormByIdRequestBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormDescription == input.FormDescription ||
                    (this.FormDescription != null &&
                    this.FormDescription.Equals(input.FormDescription))
                ) && 
                (
                    this.SubmitButtonText == input.SubmitButtonText ||
                    (this.SubmitButtonText != null &&
                    this.SubmitButtonText.Equals(input.SubmitButtonText))
                ) && 
                (
                    this.SuccessMessage == input.SuccessMessage ||
                    (this.SuccessMessage != null &&
                    this.SuccessMessage.Equals(input.SuccessMessage))
                ) && 
                (
                    this.Elements == input.Elements ||
                    this.Elements != null &&
                    input.Elements != null &&
                    this.Elements.SequenceEqual(input.Elements)
                ) && 
                (
                    this.CssStyles == input.CssStyles ||
                    (this.CssStyles != null &&
                    this.CssStyles.Equals(input.CssStyles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormDescription != null)
                    hashCode = hashCode * 59 + this.FormDescription.GetHashCode();
                if (this.SubmitButtonText != null)
                    hashCode = hashCode * 59 + this.SubmitButtonText.GetHashCode();
                if (this.SuccessMessage != null)
                    hashCode = hashCode * 59 + this.SuccessMessage.GetHashCode();
                if (this.Elements != null)
                    hashCode = hashCode * 59 + this.Elements.GetHashCode();
                if (this.CssStyles != null)
                    hashCode = hashCode * 59 + this.CssStyles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

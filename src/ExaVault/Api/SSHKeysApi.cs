/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ExaVault.Client;
using ExaVault.Model;

namespace ExaVault.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISSHKeysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new SSH Key
        /// </summary>
        /// <remarks>
        /// Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SSHKeyResponse</returns>
        SSHKeyResponse AddSSHKey (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null);

        /// <summary>
        /// Create a new SSH Key
        /// </summary>
        /// <remarks>
        /// Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SSHKeyResponse</returns>
        ApiResponse<SSHKeyResponse> AddSSHKeyWithHttpInfo (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null);
        /// <summary>
        /// Delete an SSH Key
        /// </summary>
        /// <remarks>
        /// Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns></returns>
        void DeleteSSHKey (string id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Delete an SSH Key
        /// </summary>
        /// <remarks>
        /// Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSSHKeyWithHttpInfo (string id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Get metadata for an SSH Key
        /// </summary>
        /// <remarks>
        /// Return the information for a single SSH Key
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>SSHKeyResponse</returns>
        SSHKeyResponse GetSSHKey (string id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Get metadata for an SSH Key
        /// </summary>
        /// <remarks>
        /// Return the information for a single SSH Key
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of SSHKeyResponse</returns>
        ApiResponse<SSHKeyResponse> GetSSHKeyWithHttpInfo (string id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Get metadata for a list of SSH Keys
        /// </summary>
        /// <remarks>
        /// Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>SSHKeyCollectionResponse</returns>
        SSHKeyCollectionResponse GetSSHKeysList (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get metadata for a list of SSH Keys
        /// </summary>
        /// <remarks>
        /// Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>ApiResponse of SSHKeyCollectionResponse</returns>
        ApiResponse<SSHKeyCollectionResponse> GetSSHKeysListWithHttpInfo (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new SSH Key
        /// </summary>
        /// <remarks>
        /// Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SSHKeyResponse</returns>
        System.Threading.Tasks.Task<SSHKeyResponse> AddSSHKeyAsync (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null);

        /// <summary>
        /// Create a new SSH Key
        /// </summary>
        /// <remarks>
        /// Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SSHKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SSHKeyResponse>> AddSSHKeyAsyncWithHttpInfo (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null);
        /// <summary>
        /// Delete an SSH Key
        /// </summary>
        /// <remarks>
        /// Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSSHKeyAsync (string id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Delete an SSH Key
        /// </summary>
        /// <remarks>
        /// Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSSHKeyAsyncWithHttpInfo (string id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Get metadata for an SSH Key
        /// </summary>
        /// <remarks>
        /// Return the information for a single SSH Key
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of SSHKeyResponse</returns>
        System.Threading.Tasks.Task<SSHKeyResponse> GetSSHKeyAsync (string id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Get metadata for an SSH Key
        /// </summary>
        /// <remarks>
        /// Return the information for a single SSH Key
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (SSHKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SSHKeyResponse>> GetSSHKeyAsyncWithHttpInfo (string id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Get metadata for a list of SSH Keys
        /// </summary>
        /// <remarks>
        /// Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>Task of SSHKeyCollectionResponse</returns>
        System.Threading.Tasks.Task<SSHKeyCollectionResponse> GetSSHKeysListAsync (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get metadata for a list of SSH Keys
        /// </summary>
        /// <remarks>
        /// Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>Task of ApiResponse (SSHKeyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SSHKeyCollectionResponse>> GetSSHKeysListAsyncWithHttpInfo (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SSHKeysApi : ISSHKeysApi
    {
        private ExaVault.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SSHKeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SSHKeysApi(String basePath)
        {
            this.Configuration = new ExaVault.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SSHKeysApi"/> class
        /// </summary>
        /// <returns></returns>
        public SSHKeysApi()
        {
            this.Configuration = ExaVault.Client.Configuration.Default;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SSHKeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SSHKeysApi(ExaVault.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ExaVault.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ExaVault.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExaVault.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new SSH Key Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SSHKeyResponse</returns>
        public SSHKeyResponse AddSSHKey (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null)
        {
             ApiResponse<SSHKeyResponse> localVarResponse = AddSSHKeyWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new SSH Key Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SSHKeyResponse</returns>
        public ApiResponse< SSHKeyResponse > AddSSHKeyWithHttpInfo (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->AddSSHKey");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->AddSSHKey");

            var localVarPath = "/ssh-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSSHKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SSHKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SSHKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SSHKeyResponse)));
        }

        /// <summary>
        /// Create a new SSH Key Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SSHKeyResponse</returns>
        public async System.Threading.Tasks.Task<SSHKeyResponse> AddSSHKeyAsync (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null)
        {
             ApiResponse<SSHKeyResponse> localVarResponse = await AddSSHKeyAsyncWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new SSH Key Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#x27;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SSHKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SSHKeyResponse>> AddSSHKeyAsyncWithHttpInfo (string evApiKey, string evAccessToken, AddSSHKeyRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->AddSSHKey");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->AddSSHKey");

            var localVarPath = "/ssh-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSSHKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SSHKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SSHKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SSHKeyResponse)));
        }

        /// <summary>
        /// Delete an SSH Key Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns></returns>
        public void DeleteSSHKey (string id, string evApiKey, string evAccessToken)
        {
             DeleteSSHKeyWithHttpInfo(id, evApiKey, evAccessToken);
        }

        /// <summary>
        /// Delete an SSH Key Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSSHKeyWithHttpInfo (string id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SSHKeysApi->DeleteSSHKey");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->DeleteSSHKey");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->DeleteSSHKey");

            var localVarPath = "/ssh-keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSSHKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an SSH Key Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSSHKeyAsync (string id, string evApiKey, string evAccessToken)
        {
             await DeleteSSHKeyAsyncWithHttpInfo(id, evApiKey, evAccessToken);

        }

        /// <summary>
        /// Delete an SSH Key Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSSHKeyAsyncWithHttpInfo (string id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SSHKeysApi->DeleteSSHKey");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->DeleteSSHKey");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->DeleteSSHKey");

            var localVarPath = "/ssh-keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSSHKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get metadata for an SSH Key Return the information for a single SSH Key
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>SSHKeyResponse</returns>
        public SSHKeyResponse GetSSHKey (string id, string evApiKey, string evAccessToken)
        {
             ApiResponse<SSHKeyResponse> localVarResponse = GetSSHKeyWithHttpInfo(id, evApiKey, evAccessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata for an SSH Key Return the information for a single SSH Key
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of SSHKeyResponse</returns>
        public ApiResponse< SSHKeyResponse > GetSSHKeyWithHttpInfo (string id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SSHKeysApi->GetSSHKey");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->GetSSHKey");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->GetSSHKey");

            var localVarPath = "/ssh-keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSSHKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SSHKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SSHKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SSHKeyResponse)));
        }

        /// <summary>
        /// Get metadata for an SSH Key Return the information for a single SSH Key
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of SSHKeyResponse</returns>
        public async System.Threading.Tasks.Task<SSHKeyResponse> GetSSHKeyAsync (string id, string evApiKey, string evAccessToken)
        {
             ApiResponse<SSHKeyResponse> localVarResponse = await GetSSHKeyAsyncWithHttpInfo(id, evApiKey, evAccessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metadata for an SSH Key Return the information for a single SSH Key
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (SSHKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SSHKeyResponse>> GetSSHKeyAsyncWithHttpInfo (string id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SSHKeysApi->GetSSHKey");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->GetSSHKey");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->GetSSHKey");

            var localVarPath = "/ssh-keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSSHKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SSHKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SSHKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SSHKeyResponse)));
        }

        /// <summary>
        /// Get metadata for a list of SSH Keys Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>SSHKeyCollectionResponse</returns>
        public SSHKeyCollectionResponse GetSSHKeysList (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null)
        {
             ApiResponse<SSHKeyCollectionResponse> localVarResponse = GetSSHKeysListWithHttpInfo(evApiKey, evAccessToken, userId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata for a list of SSH Keys Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>ApiResponse of SSHKeyCollectionResponse</returns>
        public ApiResponse< SSHKeyCollectionResponse > GetSSHKeysListWithHttpInfo (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->GetSSHKeysList");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->GetSSHKeysList");

            var localVarPath = "/ssh-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSSHKeysList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SSHKeyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SSHKeyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SSHKeyCollectionResponse)));
        }

        /// <summary>
        /// Get metadata for a list of SSH Keys Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>Task of SSHKeyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<SSHKeyCollectionResponse> GetSSHKeysListAsync (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null)
        {
             ApiResponse<SSHKeyCollectionResponse> localVarResponse = await GetSSHKeysListAsyncWithHttpInfo(evApiKey, evAccessToken, userId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metadata for a list of SSH Keys Returns a list of SSH Keys within the account. Can be filtered for a single user.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="userId"> Only return results for the given user ID. This is not the username, but the numeric ID of the user. (optional)</param>
        /// <param name="limit"> Limits the results by the given number. Cannot be set higher than 100. (optional)</param>
        /// <param name="offset"> Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional)</param>
        /// <returns>Task of ApiResponse (SSHKeyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SSHKeyCollectionResponse>> GetSSHKeysListAsyncWithHttpInfo (string evApiKey, string evAccessToken, string userId = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling SSHKeysApi->GetSSHKeysList");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling SSHKeysApi->GetSSHKeysList");

            var localVarPath = "/ssh-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSSHKeysList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SSHKeyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SSHKeyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SSHKeyCollectionResponse)));
        }

    }
}

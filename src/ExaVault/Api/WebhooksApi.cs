/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ExaVault.Client;
using ExaVault.Model;

namespace ExaVault.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add A New Webhook
        /// </summary>
        /// <remarks>
        /// Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse AddWebhook (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null);

        /// <summary>
        /// Add A New Webhook
        /// </summary>
        /// <remarks>
        /// Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> AddWebhookWithHttpInfo (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>EmptyResponse</returns>
        EmptyResponse DeleteWebhook (int? id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        ApiResponse<EmptyResponse> DeleteWebhookWithHttpInfo (int? id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Get info for a webhook
        /// </summary>
        /// <remarks>
        /// Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse GetWebhookById (int? id, string evApiKey, string evAccessToken, string include = null);

        /// <summary>
        /// Get info for a webhook
        /// </summary>
        /// <remarks>
        /// Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> GetWebhookByIdWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null);
        /// <summary>
        /// Get Webhooks List
        /// </summary>
        /// <remarks>
        /// Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>WebhookCollectionResponse</returns>
        WebhookCollectionResponse GetWehooksList (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get Webhooks List
        /// </summary>
        /// <remarks>
        /// Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>ApiResponse of WebhookCollectionResponse</returns>
        ApiResponse<WebhookCollectionResponse> GetWehooksListWithHttpInfo (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Regenerate security token
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse RegenerateWebhookToken (string id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Regenerate security token
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> RegenerateWebhookTokenWithHttpInfo (string id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Resend a webhook message
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>EmptyResponse</returns>
        EmptyResponse ResendWebhookActivityEntry (string activityId, string evApiKey, string evAccessToken);

        /// <summary>
        /// Resend a webhook message
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        ApiResponse<EmptyResponse> ResendWebhookActivityEntryWithHttpInfo (string activityId, string evApiKey, string evAccessToken);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse UpdateWebhook (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> UpdateWebhookWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add A New Webhook
        /// </summary>
        /// <remarks>
        /// Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> AddWebhookAsync (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null);

        /// <summary>
        /// Add A New Webhook
        /// </summary>
        /// <remarks>
        /// Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> AddWebhookAsyncWithHttpInfo (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of EmptyResponse</returns>
        System.Threading.Tasks.Task<EmptyResponse> DeleteWebhookAsync (int? id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteWebhookAsyncWithHttpInfo (int? id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Get info for a webhook
        /// </summary>
        /// <remarks>
        /// Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> GetWebhookByIdAsync (int? id, string evApiKey, string evAccessToken, string include = null);

        /// <summary>
        /// Get info for a webhook
        /// </summary>
        /// <remarks>
        /// Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> GetWebhookByIdAsyncWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null);
        /// <summary>
        /// Get Webhooks List
        /// </summary>
        /// <remarks>
        /// Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>Task of WebhookCollectionResponse</returns>
        System.Threading.Tasks.Task<WebhookCollectionResponse> GetWehooksListAsync (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get Webhooks List
        /// </summary>
        /// <remarks>
        /// Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>Task of ApiResponse (WebhookCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookCollectionResponse>> GetWehooksListAsyncWithHttpInfo (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Regenerate security token
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> RegenerateWebhookTokenAsync (string id, string evApiKey, string evAccessToken);

        /// <summary>
        /// Regenerate security token
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> RegenerateWebhookTokenAsyncWithHttpInfo (string id, string evApiKey, string evAccessToken);
        /// <summary>
        /// Resend a webhook message
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of EmptyResponse</returns>
        System.Threading.Tasks.Task<EmptyResponse> ResendWebhookActivityEntryAsync (string activityId, string evApiKey, string evAccessToken);

        /// <summary>
        /// Resend a webhook message
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> ResendWebhookActivityEntryAsyncWithHttpInfo (string activityId, string evApiKey, string evAccessToken);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> UpdateWebhookAsync (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> UpdateWebhookAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WebhooksApi : IWebhooksApi
    {
        private ExaVault.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new ExaVault.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// </summary>
        /// <returns></returns>
        public WebhooksApi()
        {
            this.Configuration = ExaVault.Client.Configuration.Default;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(ExaVault.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ExaVault.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ExaVault.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExaVault.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add A New Webhook Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse AddWebhook (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = AddWebhookWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add A New Webhook Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public ApiResponse< WebhookResponse > AddWebhookWithHttpInfo (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->AddWebhook");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->AddWebhook");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Add A New Webhook Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> AddWebhookAsync (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = await AddWebhookAsyncWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add A New Webhook Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use.   **Notes:**  While you can use our v1 request body, it will be deprecated in the future. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> AddWebhookAsyncWithHttpInfo (string evApiKey, string evAccessToken, AddWebhookRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->AddWebhook");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->AddWebhook");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Delete a webhook Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>EmptyResponse</returns>
        public EmptyResponse DeleteWebhook (int? id, string evApiKey, string evAccessToken)
        {
             ApiResponse<EmptyResponse> localVarResponse = DeleteWebhookWithHttpInfo(id, evApiKey, evAccessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a webhook Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        public ApiResponse< EmptyResponse > DeleteWebhookWithHttpInfo (int? id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhook");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->DeleteWebhook");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Delete a webhook Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of EmptyResponse</returns>
        public async System.Threading.Tasks.Task<EmptyResponse> DeleteWebhookAsync (int? id, string evApiKey, string evAccessToken)
        {
             ApiResponse<EmptyResponse> localVarResponse = await DeleteWebhookAsyncWithHttpInfo(id, evApiKey, evAccessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a webhook Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteWebhookAsyncWithHttpInfo (int? id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhook");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->DeleteWebhook");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Get info for a webhook Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse GetWebhookById (int? id, string evApiKey, string evAccessToken, string include = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = GetWebhookByIdWithHttpInfo(id, evApiKey, evAccessToken, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get info for a webhook Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public ApiResponse< WebhookResponse > GetWebhookByIdWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhookById");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->GetWebhookById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->GetWebhookById");

            var localVarPath = "/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Get info for a webhook Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> GetWebhookByIdAsync (int? id, string evApiKey, string evAccessToken, string include = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = await GetWebhookByIdAsyncWithHttpInfo(id, evApiKey, evAccessToken, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get info for a webhook Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include"> Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60;  (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> GetWebhookByIdAsyncWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhookById");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->GetWebhookById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->GetWebhookById");

            var localVarPath = "/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Get Webhooks List Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>WebhookCollectionResponse</returns>
        public WebhookCollectionResponse GetWehooksList (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null)
        {
             ApiResponse<WebhookCollectionResponse> localVarResponse = GetWehooksListWithHttpInfo(evApiKey, evAccessToken, include, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhooks List Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>ApiResponse of WebhookCollectionResponse</returns>
        public ApiResponse< WebhookCollectionResponse > GetWehooksListWithHttpInfo (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->GetWehooksList");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->GetWehooksList");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWehooksList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCollectionResponse)));
        }

        /// <summary>
        /// Get Webhooks List Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>Task of WebhookCollectionResponse</returns>
        public async System.Threading.Tasks.Task<WebhookCollectionResponse> GetWehooksListAsync (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null)
        {
             ApiResponse<WebhookCollectionResponse> localVarResponse = await GetWehooksListAsyncWithHttpInfo(evApiKey, evAccessToken, include, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Webhooks List Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">List of related record types to include in the response. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <returns>Task of ApiResponse (WebhookCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookCollectionResponse>> GetWehooksListAsyncWithHttpInfo (string evApiKey, string evAccessToken, string include = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->GetWehooksList");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->GetWehooksList");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWehooksList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCollectionResponse)));
        }

        /// <summary>
        /// Regenerate security token This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse RegenerateWebhookToken (string id, string evApiKey, string evAccessToken)
        {
             ApiResponse<WebhookResponse> localVarResponse = RegenerateWebhookTokenWithHttpInfo(id, evApiKey, evAccessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate security token This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public ApiResponse< WebhookResponse > RegenerateWebhookTokenWithHttpInfo (string id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->RegenerateWebhookToken");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->RegenerateWebhookToken");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->RegenerateWebhookToken");

            var localVarPath = "/webhooks/regenerate-token/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegenerateWebhookToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Regenerate security token This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> RegenerateWebhookTokenAsync (string id, string evApiKey, string evAccessToken)
        {
             ApiResponse<WebhookResponse> localVarResponse = await RegenerateWebhookTokenAsyncWithHttpInfo(id, evApiKey, evAccessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerate security token This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> RegenerateWebhookTokenAsyncWithHttpInfo (string id, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->RegenerateWebhookToken");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->RegenerateWebhookToken");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->RegenerateWebhookToken");

            var localVarPath = "/webhooks/regenerate-token/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegenerateWebhookToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Resend a webhook message This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>EmptyResponse</returns>
        public EmptyResponse ResendWebhookActivityEntry (string activityId, string evApiKey, string evAccessToken)
        {
             ApiResponse<EmptyResponse> localVarResponse = ResendWebhookActivityEntryWithHttpInfo(activityId, evApiKey, evAccessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend a webhook message This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        public ApiResponse< EmptyResponse > ResendWebhookActivityEntryWithHttpInfo (string activityId, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling WebhooksApi->ResendWebhookActivityEntry");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->ResendWebhookActivityEntry");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->ResendWebhookActivityEntry");

            var localVarPath = "/webhooks/resend/{activityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", this.Configuration.ApiClient.ParameterToString(activityId)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendWebhookActivityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Resend a webhook message This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of EmptyResponse</returns>
        public async System.Threading.Tasks.Task<EmptyResponse> ResendWebhookActivityEntryAsync (string activityId, string evApiKey, string evAccessToken)
        {
             ApiResponse<EmptyResponse> localVarResponse = await ResendWebhookActivityEntryAsyncWithHttpInfo(activityId, evApiKey, evAccessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend a webhook message This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">Webhooks activity entry ID</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> ResendWebhookActivityEntryAsyncWithHttpInfo (string activityId, string evApiKey, string evAccessToken)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling WebhooksApi->ResendWebhookActivityEntry");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->ResendWebhookActivityEntry");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->ResendWebhookActivityEntry");

            var localVarPath = "/webhooks/resend/{activityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", this.Configuration.ApiClient.ParameterToString(activityId)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendWebhookActivityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Update a webhook Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse UpdateWebhook (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = UpdateWebhookWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public ApiResponse< WebhookResponse > UpdateWebhookWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Update a webhook Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> UpdateWebhookAsync (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = await UpdateWebhookAsyncWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a webhook Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Webhook endpoint ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> UpdateWebhookAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateWebhookRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ExaVault.Client;
using ExaVault.Model;

namespace ExaVault.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface INotificationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NotificationResponse</returns>
        NotificationResponse AddNotification (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null);

        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        ApiResponse<NotificationResponse> AddNotificationWithHttpInfo (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null);
        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>EmptyResponse</returns>
        EmptyResponse DeleteNotificationById (string evApiKey, string evAccessToken, int? id);

        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        ApiResponse<EmptyResponse> DeleteNotificationByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id);
        /// <summary>
        /// Get notification details
        /// </summary>
        /// <remarks>
        /// Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>NotificationResponse</returns>
        NotificationResponse GetNotificationById (string evApiKey, string evAccessToken, int? id, string include = null);

        /// <summary>
        /// Get notification details
        /// </summary>
        /// <remarks>
        /// Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        ApiResponse<NotificationResponse> GetNotificationByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null);
        /// <summary>
        /// Get a list of notifications
        /// </summary>
        /// <remarks>
        /// Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>NotificationCollectionResponse</returns>
        NotificationCollectionResponse ListNotifications (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null);

        /// <summary>
        /// Get a list of notifications
        /// </summary>
        /// <remarks>
        /// Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>ApiResponse of NotificationCollectionResponse</returns>
        ApiResponse<NotificationCollectionResponse> ListNotificationsWithHttpInfo (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null);
        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NotificationResponse</returns>
        NotificationResponse UpdateNotificationById (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null);

        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        ApiResponse<NotificationResponse> UpdateNotificationByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        System.Threading.Tasks.Task<NotificationResponse> AddNotificationAsync (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null);

        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> AddNotificationAsyncWithHttpInfo (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null);
        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>Task of EmptyResponse</returns>
        System.Threading.Tasks.Task<EmptyResponse> DeleteNotificationByIdAsync (string evApiKey, string evAccessToken, int? id);

        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteNotificationByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id);
        /// <summary>
        /// Get notification details
        /// </summary>
        /// <remarks>
        /// Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        System.Threading.Tasks.Task<NotificationResponse> GetNotificationByIdAsync (string evApiKey, string evAccessToken, int? id, string include = null);

        /// <summary>
        /// Get notification details
        /// </summary>
        /// <remarks>
        /// Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> GetNotificationByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null);
        /// <summary>
        /// Get a list of notifications
        /// </summary>
        /// <remarks>
        /// Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>Task of NotificationCollectionResponse</returns>
        System.Threading.Tasks.Task<NotificationCollectionResponse> ListNotificationsAsync (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null);

        /// <summary>
        /// Get a list of notifications
        /// </summary>
        /// <remarks>
        /// Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>Task of ApiResponse (NotificationCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationCollectionResponse>> ListNotificationsAsyncWithHttpInfo (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null);
        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        System.Threading.Tasks.Task<NotificationResponse> UpdateNotificationByIdAsync (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null);

        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> UpdateNotificationByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class NotificationsApi : INotificationsApi
    {
        private ExaVault.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsApi(String basePath)
        {
            this.Configuration = new ExaVault.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public NotificationsApi()
        {
            this.Configuration = ExaVault.Client.Configuration.Default;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationsApi(ExaVault.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ExaVault.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ExaVault.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExaVault.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new notification Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NotificationResponse</returns>
        public NotificationResponse AddNotification (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = AddNotificationWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new notification Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        public ApiResponse< NotificationResponse > AddNotificationWithHttpInfo (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->AddNotification");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->AddNotification");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Create a new notification Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        public async System.Threading.Tasks.Task<NotificationResponse> AddNotificationAsync (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = await AddNotificationAsyncWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new notification Create a new notification for a [resource](#section/Identifying-Resources) in your account. Notifications can be sent via email or webhook;  - To enable email, pass an array of email addresses to the &#x60;recipients&#x60; parameter of this call.  - To enable webhooks, setup the webhook callback URL in your account settings via [PATCH /account](#operation/updateAccount).   **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> AddNotificationAsyncWithHttpInfo (string evApiKey, string evAccessToken, AddNotificationRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->AddNotification");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->AddNotification");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Delete a notification Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>EmptyResponse</returns>
        public EmptyResponse DeleteNotificationById (string evApiKey, string evAccessToken, int? id)
        {
             ApiResponse<EmptyResponse> localVarResponse = DeleteNotificationByIdWithHttpInfo(evApiKey, evAccessToken, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a notification Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        public ApiResponse< EmptyResponse > DeleteNotificationByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->DeleteNotificationById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->DeleteNotificationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->DeleteNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Delete a notification Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>Task of EmptyResponse</returns>
        public async System.Threading.Tasks.Task<EmptyResponse> DeleteNotificationByIdAsync (string evApiKey, string evAccessToken, int? id)
        {
             ApiResponse<EmptyResponse> localVarResponse = await DeleteNotificationByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a notification Deletes a notification. Note that deleting a notification _only_ deletes the notification &amp;ndash; it does not delete any underlying files or folders.  **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only delete notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteNotificationByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->DeleteNotificationById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->DeleteNotificationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->DeleteNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Get notification details Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>NotificationResponse</returns>
        public NotificationResponse GetNotificationById (string evApiKey, string evAccessToken, int? id, string include = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = GetNotificationByIdWithHttpInfo(evApiKey, evAccessToken, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get notification details Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        public ApiResponse< NotificationResponse > GetNotificationByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->GetNotificationById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->GetNotificationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->GetNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Get notification details Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        public async System.Threading.Tasks.Task<NotificationResponse> GetNotificationByIdAsync (string evApiKey, string evAccessToken, int? id, string include = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = await GetNotificationByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get notification details Get the details for a notification with a specific ID number. You&#x27;ll be able to review its path, triggers and who&#x27;s getting the notification.   **Notes**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to view the detail for a notification. - You can only retrieve notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="include">Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> GetNotificationByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->GetNotificationById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->GetNotificationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->GetNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Get a list of notifications Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>NotificationCollectionResponse</returns>
        public NotificationCollectionResponse ListNotifications (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null)
        {
             ApiResponse<NotificationCollectionResponse> localVarResponse = ListNotificationsWithHttpInfo(evApiKey, evAccessToken, type, offset, sort, limit, include, action);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of notifications Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>ApiResponse of NotificationCollectionResponse</returns>
        public ApiResponse< NotificationCollectionResponse > ListNotificationsWithHttpInfo (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->ListNotifications");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->ListNotifications");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationCollectionResponse)));
        }

        /// <summary>
        /// Get a list of notifications Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>Task of NotificationCollectionResponse</returns>
        public async System.Threading.Tasks.Task<NotificationCollectionResponse> ListNotificationsAsync (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null)
        {
             ApiResponse<NotificationCollectionResponse> localVarResponse = await ListNotificationsAsyncWithHttpInfo(evApiKey, evAccessToken, type, offset, sort, limit, include, action);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of notifications Get a list of all the [notifications](/docs/account/06-notifications) you have access to. You can use sorting and filtering to limit the returned list.  **Notes:**   - Authenticated user should have [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions)
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="type">Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)</param>
        /// <param name="offset">Starting notification record in the result set. Can be used for pagination. (optional, default to 0)</param>
        /// <param name="sort">What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)</param>
        /// <param name="limit">Number of notification records to return. Can be used for pagination. (optional, default to 25)</param>
        /// <param name="include">Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)</param>
        /// <param name="action">The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)</param>
        /// <returns>Task of ApiResponse (NotificationCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationCollectionResponse>> ListNotificationsAsyncWithHttpInfo (string evApiKey, string evAccessToken, string type = null, int? offset = null, string sort = null, int? limit = null, string include = null, string action = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->ListNotifications");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->ListNotifications");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationCollectionResponse)));
        }

        /// <summary>
        /// Update a notification Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NotificationResponse</returns>
        public NotificationResponse UpdateNotificationById (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = UpdateNotificationByIdWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a notification Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        public ApiResponse< NotificationResponse > UpdateNotificationByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->UpdateNotificationById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->UpdateNotificationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Update a notification Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        public async System.Threading.Tasks.Task<NotificationResponse> UpdateNotificationByIdAsync (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = await UpdateNotificationByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a notification Update an existing notification. You can add additional emails or change the action or users that cause a notification to trigger.   When updating recipient emails, make sure your &#x60;recipients&#x60; parameter contains the full list of people who should be included on the notification. If you resend the list without an existing recipient, they will be deleted from the notification emails.   **Notes:**  - You need to have the [notifications permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to update a notification. - You can only change notifications owned by your user account.
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> UpdateNotificationByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, UpdateNotificationByIdRequestBody body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling NotificationsApi->UpdateNotificationById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling NotificationsApi->UpdateNotificationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ExaVault.Client;
using ExaVault.Model;

namespace ExaVault.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IActivityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get activity logs
        /// </summary>
        /// <remarks>
        /// Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>SessionActivityResponse</returns>
        SessionActivityResponse GetSessionLogs (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null);

        /// <summary>
        /// Get activity logs
        /// </summary>
        /// <remarks>
        /// Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>ApiResponse of SessionActivityResponse</returns>
        ApiResponse<SessionActivityResponse> GetSessionLogsWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>WebhookActivityResponse</returns>
        WebhookActivityResponse GetWebhookLogs (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null);

        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>ApiResponse of WebhookActivityResponse</returns>
        ApiResponse<WebhookActivityResponse> GetWebhookLogsWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get activity logs
        /// </summary>
        /// <remarks>
        /// Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>Task of SessionActivityResponse</returns>
        System.Threading.Tasks.Task<SessionActivityResponse> GetSessionLogsAsync (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null);

        /// <summary>
        /// Get activity logs
        /// </summary>
        /// <remarks>
        /// Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>Task of ApiResponse (SessionActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionActivityResponse>> GetSessionLogsAsyncWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>Task of WebhookActivityResponse</returns>
        System.Threading.Tasks.Task<WebhookActivityResponse> GetWebhookLogsAsync (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null);

        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>Task of ApiResponse (WebhookActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookActivityResponse>> GetWebhookLogsAsyncWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ActivityApi : IActivityApi
    {
        private ExaVault.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivityApi(String basePath)
        {
            this.Configuration = new ExaVault.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityApi"/> class
        /// </summary>
        /// <returns></returns>
        public ActivityApi()
        {
            this.Configuration = ExaVault.Client.Configuration.Default;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActivityApi(ExaVault.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ExaVault.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ExaVault.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExaVault.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get activity logs Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>SessionActivityResponse</returns>
        public SessionActivityResponse GetSessionLogs (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null)
        {
             ApiResponse<SessionActivityResponse> localVarResponse = GetSessionLogsWithHttpInfo(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get activity logs Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>ApiResponse of SessionActivityResponse</returns>
        public ApiResponse< SessionActivityResponse > GetSessionLogsWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling ActivityApi->GetSessionLogs");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling ActivityApi->GetSessionLogs");

            var localVarPath = "/activity/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (ipAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ipAddress", ipAddress)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionActivityResponse)));
        }

        /// <summary>
        /// Get activity logs Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>Task of SessionActivityResponse</returns>
        public async System.Threading.Tasks.Task<SessionActivityResponse> GetSessionLogsAsync (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null)
        {
             ApiResponse<SessionActivityResponse> localVarResponse = await GetSessionLogsAsyncWithHttpInfo(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get activity logs Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#x27;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |- -- --|- -- -|- --| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Start date of the filter data range (optional)</param>
        /// <param name="endDate">End date of the filter data range (optional)</param>
        /// <param name="ipAddress">Used to filter session logs by ip address. (optional)</param>
        /// <param name="username">Username used for filtering a list (optional)</param>
        /// <param name="path">Path used to filter records (optional)</param>
        /// <param name="type">Filter session logs for operation type (see table above for acceptable values) (optional)</param>
        /// <param name="offset">Offset of the records list (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **date**, **ip_address**, **username**, **file**, **sort_logs_file_source**, **type**, **duration**, **size**, and **protocol** (optional)</param>
        /// <returns>Task of ApiResponse (SessionActivityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionActivityResponse>> GetSessionLogsAsyncWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string ipAddress = null, string username = null, string path = null, string type = null, int? offset = null, int? limit = null, string sort = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling ActivityApi->GetSessionLogs");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling ActivityApi->GetSessionLogs");

            var localVarPath = "/activity/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (ipAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ipAddress", ipAddress)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionActivityResponse)));
        }

        /// <summary>
        /// Get webhook logs Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>WebhookActivityResponse</returns>
        public WebhookActivityResponse GetWebhookLogs (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null)
        {
             ApiResponse<WebhookActivityResponse> localVarResponse = GetWebhookLogsWithHttpInfo(evApiKey, evAccessToken, startDate, endDate, endpointUrl, _event, statusCode, resourcePath, username, offset, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook logs Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>ApiResponse of WebhookActivityResponse</returns>
        public ApiResponse< WebhookActivityResponse > GetWebhookLogsWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling ActivityApi->GetWebhookLogs");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling ActivityApi->GetWebhookLogs");

            var localVarPath = "/activity/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (endpointUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endpointUrl", endpointUrl)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (statusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusCode", statusCode)); // query parameter
            if (resourcePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourcePath", resourcePath)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookActivityResponse)));
        }

        /// <summary>
        /// Get webhook logs Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>Task of WebhookActivityResponse</returns>
        public async System.Threading.Tasks.Task<WebhookActivityResponse> GetWebhookLogsAsync (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null)
        {
             ApiResponse<WebhookActivityResponse> localVarResponse = await GetWebhookLogsAsyncWithHttpInfo(evApiKey, evAccessToken, startDate, endDate, endpointUrl, _event, statusCode, resourcePath, username, offset, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook logs Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#x27;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key</param>
        /// <param name="evAccessToken">Access Token</param>
        /// <param name="startDate">Earliest date of entries to include in list (optional)</param>
        /// <param name="endDate">Latest date of entries to include in list (optional)</param>
        /// <param name="endpointUrl">Webhook listener endpoint (optional)</param>
        /// <param name="_event">Type of activity that triggered the webhook attempt (optional)</param>
        /// <param name="statusCode">Response code from the webhook endpoint (optional)</param>
        /// <param name="resourcePath">Path of the resource that triggered the webhook attempt (optional)</param>
        /// <param name="username">Filter by triggering username. (optional)</param>
        /// <param name="offset">Records to skip before returning results. (optional)</param>
        /// <param name="limit">Limit of the records list (optional)</param>
        /// <param name="sort">Comma separated list sort params. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. &lt;br&gt; Sort options are; **endpoint_url**, **event**, **status**, **username**, **attempt_id**, and **resource_path** (optional)</param>
        /// <returns>Task of ApiResponse (WebhookActivityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookActivityResponse>> GetWebhookLogsAsyncWithHttpInfo (string evApiKey, string evAccessToken, DateTime? startDate = null, DateTime? endDate = null, string endpointUrl = null, string _event = null, int? statusCode = null, string resourcePath = null, string username = null, int? offset = null, int? limit = null, string sort = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling ActivityApi->GetWebhookLogs");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling ActivityApi->GetWebhookLogs");

            var localVarPath = "/activity/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (endpointUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endpointUrl", endpointUrl)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (statusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusCode", statusCode)); // query parameter
            if (resourcePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourcePath", resourcePath)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookActivityResponse)));
        }

    }
}

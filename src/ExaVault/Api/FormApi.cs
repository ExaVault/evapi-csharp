/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ExaVault.Client;
using ExaVault.Model;

namespace ExaVault.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFormApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a receive form submission
        /// </summary>
        /// <remarks>
        /// Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>EmptyResponse</returns>
        EmptyResponse DeleteFormMessageById (string evApiKey, string evAccessToken, string id);

        /// <summary>
        /// Delete a receive form submission
        /// </summary>
        /// <remarks>
        /// Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        ApiResponse<EmptyResponse> DeleteFormMessageByIdWithHttpInfo (string evApiKey, string evAccessToken, string id);
        /// <summary>
        /// Get receive folder form by Id
        /// </summary>
        /// <remarks>
        /// Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>FormResponse</returns>
        FormResponse GetFormById (int? id, string evApiKey, string evAccessToken, string include = null);

        /// <summary>
        /// Get receive folder form by Id
        /// </summary>
        /// <remarks>
        /// Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>ApiResponse of FormResponse</returns>
        ApiResponse<FormResponse> GetFormByIdWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null);
        /// <summary>
        /// Get receive folder form settings
        /// </summary>
        /// <remarks>
        /// Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>FormResponse</returns>
        FormResponse GetFormByShareHash (string evApiKey, string evAccessToken, string shareHash, string include = null);

        /// <summary>
        /// Get receive folder form settings
        /// </summary>
        /// <remarks>
        /// Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>ApiResponse of FormResponse</returns>
        ApiResponse<FormResponse> GetFormByShareHashWithHttpInfo (string evApiKey, string evAccessToken, string shareHash, string include = null);
        /// <summary>
        /// Get form data entries for a receive
        /// </summary>
        /// <remarks>
        /// Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>FormEntryResponse</returns>
        FormEntryResponse GetFormEntries (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null);

        /// <summary>
        /// Get form data entries for a receive
        /// </summary>
        /// <remarks>
        /// Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>ApiResponse of FormEntryResponse</returns>
        ApiResponse<FormEntryResponse> GetFormEntriesWithHttpInfo (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null);
        /// <summary>
        /// Updates a form with given parameters
        /// </summary>
        /// <remarks>
        /// Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FormResponse</returns>
        FormResponse UpdateFormById (string evApiKey, string evAccessToken, int? id, Body2 body = null);

        /// <summary>
        /// Updates a form with given parameters
        /// </summary>
        /// <remarks>
        /// Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FormResponse</returns>
        ApiResponse<FormResponse> UpdateFormByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body2 body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a receive form submission
        /// </summary>
        /// <remarks>
        /// Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>Task of EmptyResponse</returns>
        System.Threading.Tasks.Task<EmptyResponse> DeleteFormMessageByIdAsync (string evApiKey, string evAccessToken, string id);

        /// <summary>
        /// Delete a receive form submission
        /// </summary>
        /// <remarks>
        /// Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteFormMessageByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, string id);
        /// <summary>
        /// Get receive folder form by Id
        /// </summary>
        /// <remarks>
        /// Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>Task of FormResponse</returns>
        System.Threading.Tasks.Task<FormResponse> GetFormByIdAsync (int? id, string evApiKey, string evAccessToken, string include = null);

        /// <summary>
        /// Get receive folder form by Id
        /// </summary>
        /// <remarks>
        /// Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>Task of ApiResponse (FormResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormResponse>> GetFormByIdAsyncWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null);
        /// <summary>
        /// Get receive folder form settings
        /// </summary>
        /// <remarks>
        /// Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>Task of FormResponse</returns>
        System.Threading.Tasks.Task<FormResponse> GetFormByShareHashAsync (string evApiKey, string evAccessToken, string shareHash, string include = null);

        /// <summary>
        /// Get receive folder form settings
        /// </summary>
        /// <remarks>
        /// Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>Task of ApiResponse (FormResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormResponse>> GetFormByShareHashAsyncWithHttpInfo (string evApiKey, string evAccessToken, string shareHash, string include = null);
        /// <summary>
        /// Get form data entries for a receive
        /// </summary>
        /// <remarks>
        /// Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>Task of FormEntryResponse</returns>
        System.Threading.Tasks.Task<FormEntryResponse> GetFormEntriesAsync (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null);

        /// <summary>
        /// Get form data entries for a receive
        /// </summary>
        /// <remarks>
        /// Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>Task of ApiResponse (FormEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormEntryResponse>> GetFormEntriesAsyncWithHttpInfo (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null);
        /// <summary>
        /// Updates a form with given parameters
        /// </summary>
        /// <remarks>
        /// Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FormResponse</returns>
        System.Threading.Tasks.Task<FormResponse> UpdateFormByIdAsync (string evApiKey, string evAccessToken, int? id, Body2 body = null);

        /// <summary>
        /// Updates a form with given parameters
        /// </summary>
        /// <remarks>
        /// Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </remarks>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FormResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormResponse>> UpdateFormByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body2 body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FormApi : IFormApi
    {
        private ExaVault.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FormApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FormApi(String basePath)
        {
            this.Configuration = new ExaVault.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormApi"/> class
        /// </summary>
        /// <returns></returns>
        public FormApi()
        {
            this.Configuration = ExaVault.Client.Configuration.Default;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FormApi(ExaVault.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ExaVault.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ExaVault.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ExaVault.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExaVault.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a receive form submission Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>EmptyResponse</returns>
        public EmptyResponse DeleteFormMessageById (string evApiKey, string evAccessToken, string id)
        {
             ApiResponse<EmptyResponse> localVarResponse = DeleteFormMessageByIdWithHttpInfo(evApiKey, evAccessToken, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a receive form submission Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        public ApiResponse< EmptyResponse > DeleteFormMessageByIdWithHttpInfo (string evApiKey, string evAccessToken, string id)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->DeleteFormMessageById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->DeleteFormMessageById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->DeleteFormMessageById");

            var localVarPath = "/forms/entries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFormMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Delete a receive form submission Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>Task of EmptyResponse</returns>
        public async System.Threading.Tasks.Task<EmptyResponse> DeleteFormMessageByIdAsync (string evApiKey, string evAccessToken, string id)
        {
             ApiResponse<EmptyResponse> localVarResponse = await DeleteFormMessageByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a receive form submission Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the entry to be deleted data for</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteFormMessageByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, string id)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->DeleteFormMessageById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->DeleteFormMessageById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->DeleteFormMessageById");

            var localVarPath = "/forms/entries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFormMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Get receive folder form by Id Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>FormResponse</returns>
        public FormResponse GetFormById (int? id, string evApiKey, string evAccessToken, string include = null)
        {
             ApiResponse<FormResponse> localVarResponse = GetFormByIdWithHttpInfo(id, evApiKey, evAccessToken, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get receive folder form by Id Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>ApiResponse of FormResponse</returns>
        public ApiResponse< FormResponse > GetFormByIdWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->GetFormById");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->GetFormById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->GetFormById");

            var localVarPath = "/forms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormResponse)));
        }

        /// <summary>
        /// Get receive folder form by Id Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>Task of FormResponse</returns>
        public async System.Threading.Tasks.Task<FormResponse> GetFormByIdAsync (int? id, string evApiKey, string evAccessToken, string include = null)
        {
             ApiResponse<FormResponse> localVarResponse = await GetFormByIdAsyncWithHttpInfo(id, evApiKey, evAccessToken, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get receive folder form by Id Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the &#x60;include&#x60; parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="include">Enter \&quot;**share**\&quot; to get information about associated receive folder. (optional)</param>
        /// <returns>Task of ApiResponse (FormResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormResponse>> GetFormByIdAsyncWithHttpInfo (int? id, string evApiKey, string evAccessToken, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->GetFormById");
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->GetFormById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->GetFormById");

            var localVarPath = "/forms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormResponse)));
        }

        /// <summary>
        /// Get receive folder form settings Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>FormResponse</returns>
        public FormResponse GetFormByShareHash (string evApiKey, string evAccessToken, string shareHash, string include = null)
        {
             ApiResponse<FormResponse> localVarResponse = GetFormByShareHashWithHttpInfo(evApiKey, evAccessToken, shareHash, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get receive folder form settings Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>ApiResponse of FormResponse</returns>
        public ApiResponse< FormResponse > GetFormByShareHashWithHttpInfo (string evApiKey, string evAccessToken, string shareHash, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->GetFormByShareHash");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->GetFormByShareHash");
            // verify the required parameter 'shareHash' is set
            if (shareHash == null)
                throw new ApiException(400, "Missing required parameter 'shareHash' when calling FormApi->GetFormByShareHash");

            var localVarPath = "/forms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shareHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shareHash", shareHash)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormByShareHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormResponse)));
        }

        /// <summary>
        /// Get receive folder form settings Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>Task of FormResponse</returns>
        public async System.Threading.Tasks.Task<FormResponse> GetFormByShareHashAsync (string evApiKey, string evAccessToken, string shareHash, string include = null)
        {
             ApiResponse<FormResponse> localVarResponse = await GetFormByShareHashAsyncWithHttpInfo(evApiKey, evAccessToken, shareHash, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get receive folder form settings Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the &#x60;include&#x60; parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API key required to make the API call.</param>
        /// <param name="evAccessToken">Access Token required to make the API call.</param>
        /// <param name="shareHash">Share hash to retrieve the form for.</param>
        /// <param name="include">Related record types to include in the response. Valid option is **share** (optional)</param>
        /// <returns>Task of ApiResponse (FormResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormResponse>> GetFormByShareHashAsyncWithHttpInfo (string evApiKey, string evAccessToken, string shareHash, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->GetFormByShareHash");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->GetFormByShareHash");
            // verify the required parameter 'shareHash' is set
            if (shareHash == null)
                throw new ApiException(400, "Missing required parameter 'shareHash' when calling FormApi->GetFormByShareHash");

            var localVarPath = "/forms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shareHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shareHash", shareHash)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormByShareHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormResponse)));
        }

        /// <summary>
        /// Get form data entries for a receive Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>FormEntryResponse</returns>
        public FormEntryResponse GetFormEntries (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null)
        {
             ApiResponse<FormEntryResponse> localVarResponse = GetFormEntriesWithHttpInfo(evApiKey, evAccessToken, id, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get form data entries for a receive Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>ApiResponse of FormEntryResponse</returns>
        public ApiResponse< FormEntryResponse > GetFormEntriesWithHttpInfo (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->GetFormEntries");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->GetFormEntries");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->GetFormEntries");

            var localVarPath = "/forms/entries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormEntryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormEntryResponse)));
        }

        /// <summary>
        /// Get form data entries for a receive Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>Task of FormEntryResponse</returns>
        public async System.Threading.Tasks.Task<FormEntryResponse> GetFormEntriesAsync (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null)
        {
             ApiResponse<FormEntryResponse> localVarResponse = await GetFormEntriesAsyncWithHttpInfo(evApiKey, evAccessToken, id, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get form data entries for a receive Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call. </param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the form to retrieve entries for.</param>
        /// <param name="limit">Limit of records to be returned (for pagination) (optional)</param>
        /// <param name="offset">Current offset of records (for pagination) (optional)</param>
        /// <returns>Task of ApiResponse (FormEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormEntryResponse>> GetFormEntriesAsyncWithHttpInfo (string evApiKey, string evAccessToken, string id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->GetFormEntries");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->GetFormEntries");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->GetFormEntries");

            var localVarPath = "/forms/entries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormEntryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormEntryResponse)));
        }

        /// <summary>
        /// Updates a form with given parameters Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FormResponse</returns>
        public FormResponse UpdateFormById (string evApiKey, string evAccessToken, int? id, Body2 body = null)
        {
             ApiResponse<FormResponse> localVarResponse = UpdateFormByIdWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a form with given parameters Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FormResponse</returns>
        public ApiResponse< FormResponse > UpdateFormByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body2 body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->UpdateFormById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->UpdateFormById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->UpdateFormById");

            var localVarPath = "/forms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFormById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormResponse)));
        }

        /// <summary>
        /// Updates a form with given parameters Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FormResponse</returns>
        public async System.Threading.Tasks.Task<FormResponse> UpdateFormByIdAsync (string evApiKey, string evAccessToken, int? id, Body2 body = null)
        {
             ApiResponse<FormResponse> localVarResponse = await UpdateFormByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a form with given parameters Add, update, or delete a form&#x27;s parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element&#x27;s current settings to preserve them.                          
        /// </summary>
        /// <exception cref="ExaVault.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">Form unique ID number.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FormResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormResponse>> UpdateFormByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body2 body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling FormApi->UpdateFormById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling FormApi->UpdateFormById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormApi->UpdateFormById");

            var localVarPath = "/forms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFormById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormResponse)));
        }

    }
}

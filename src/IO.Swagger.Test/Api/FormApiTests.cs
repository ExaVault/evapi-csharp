/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FormApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FormApiTests
    {
        private FormApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FormApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FormApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FormApi
            //Assert.IsInstanceOfType(typeof(FormApi), instance, "instance is a FormApi");
        }

        /// <summary>
        /// Test DeleteFormMessageById
        /// </summary>
        [Test]
        public void DeleteFormMessageByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //string id = null;
            //var response = instance.DeleteFormMessageById(evApiKey, evAccessToken, id);
            //Assert.IsInstanceOf<EmptyResponse> (response, "response is EmptyResponse");
        }
        /// <summary>
        /// Test GetFormById
        /// </summary>
        [Test]
        public void GetFormByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string evApiKey = null;
            //string evAccessToken = null;
            //string include = null;
            //var response = instance.GetFormById(id, evApiKey, evAccessToken, include);
            //Assert.IsInstanceOf<FormResponse> (response, "response is FormResponse");
        }
        /// <summary>
        /// Test GetFormByShareHash
        /// </summary>
        [Test]
        public void GetFormByShareHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //string shareHash = null;
            //string include = null;
            //var response = instance.GetFormByShareHash(evApiKey, evAccessToken, shareHash, include);
            //Assert.IsInstanceOf<FormResponse> (response, "response is FormResponse");
        }
        /// <summary>
        /// Test GetFormEntries
        /// </summary>
        [Test]
        public void GetFormEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //string id = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.GetFormEntries(evApiKey, evAccessToken, id, limit, offset);
            //Assert.IsInstanceOf<FormEntryResponse> (response, "response is FormEntryResponse");
        }
        /// <summary>
        /// Test UpdateFormById
        /// </summary>
        [Test]
        public void UpdateFormByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //int? id = null;
            //Body2 body = null;
            //var response = instance.UpdateFormById(evApiKey, evAccessToken, id, body);
            //Assert.IsInstanceOf<FormResponse> (response, "response is FormResponse");
        }
    }

}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ResourcesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ResourcesApiTests
    {
        private ResourcesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ResourcesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ResourcesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ResourcesApi
            //Assert.IsInstanceOfType(typeof(ResourcesApi), instance, "instance is a ResourcesApi");
        }

        /// <summary>
        /// Test AddFolder
        /// </summary>
        [Test]
        public void AddFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //Body8 body = null;
            //var response = instance.AddFolder(evApiKey, evAccessToken, body);
            //Assert.IsInstanceOf<ResourceResponse> (response, "response is ResourceResponse");
        }
        /// <summary>
        /// Test CompressFiles
        /// </summary>
        [Test]
        public void CompressFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //Body10 body = null;
            //var response = instance.CompressFiles(evApiKey, evAccessToken, body);
            //Assert.IsInstanceOf<ResourceResponse> (response, "response is ResourceResponse");
        }
        /// <summary>
        /// Test CopyResources
        /// </summary>
        [Test]
        public void CopyResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //Body12 body = null;
            //var response = instance.CopyResources(evApiKey, evAccessToken, body);
            //Assert.IsInstanceOf<ResourceCopyMove> (response, "response is ResourceCopyMove");
        }
        /// <summary>
        /// Test DeleteResourceById
        /// </summary>
        [Test]
        public void DeleteResourceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string evApiKey = null;
            //string evAccessToken = null;
            //var response = instance.DeleteResourceById(id, evApiKey, evAccessToken);
            //Assert.IsInstanceOf<EmptyResponse> (response, "response is EmptyResponse");
        }
        /// <summary>
        /// Test DeleteResources
        /// </summary>
        [Test]
        public void DeleteResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //Body9 body = null;
            //var response = instance.DeleteResources(evApiKey, evAccessToken, body);
            //Assert.IsInstanceOf<EmptyResponse> (response, "response is EmptyResponse");
        }
        /// <summary>
        /// Test Download
        /// </summary>
        [Test]
        public void DownloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //List<string> resources = null;
            //string downloadName = null;
            //bool? polling = null;
            //string pollingZipName = null;
            //var response = instance.Download(evApiKey, evAccessToken, resources, downloadName, polling, pollingZipName);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        /// <summary>
        /// Test ExtractFiles
        /// </summary>
        [Test]
        public void ExtractFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //Body11 body = null;
            //var response = instance.ExtractFiles(evApiKey, evAccessToken, body);
            //Assert.IsInstanceOf<ResourceCollectionResponse> (response, "response is ResourceCollectionResponse");
        }
        /// <summary>
        /// Test GetPreviewImage
        /// </summary>
        [Test]
        public void GetPreviewImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //string resource = null;
            //string size = null;
            //int? width = null;
            //int? height = null;
            //int? page = null;
            //var response = instance.GetPreviewImage(evApiKey, evAccessToken, resource, size, width, height, page);
            //Assert.IsInstanceOf<PreviewFileResponse> (response, "response is PreviewFileResponse");
        }
        /// <summary>
        /// Test GetResourceInfo
        /// </summary>
        [Test]
        public void GetResourceInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //string resource = null;
            //string include = null;
            //var response = instance.GetResourceInfo(evApiKey, evAccessToken, resource, include);
            //Assert.IsInstanceOf<ResourceResponse> (response, "response is ResourceResponse");
        }
        /// <summary>
        /// Test GetResourceInfoById
        /// </summary>
        [Test]
        public void GetResourceInfoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string evApiKey = null;
            //string evAccessToken = null;
            //string include = null;
            //var response = instance.GetResourceInfoById(id, evApiKey, evAccessToken, include);
            //Assert.IsInstanceOf<ResourceResponse> (response, "response is ResourceResponse");
        }
        /// <summary>
        /// Test ListResourceContents
        /// </summary>
        [Test]
        public void ListResourceContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //int? id = null;
            //string sort = null;
            //int? offset = null;
            //int? limit = null;
            //string type = null;
            //string include = null;
            //var response = instance.ListResourceContents(evApiKey, evAccessToken, id, sort, offset, limit, type, include);
            //Assert.IsInstanceOf<ResourceCollectionResponse> (response, "response is ResourceCollectionResponse");
        }
        /// <summary>
        /// Test ListResources
        /// </summary>
        [Test]
        public void ListResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //string resource = null;
            //string sort = null;
            //int? offset = null;
            //int? limit = null;
            //string type = null;
            //string name = null;
            //string include = null;
            //var response = instance.ListResources(evApiKey, evAccessToken, resource, sort, offset, limit, type, name, include);
            //Assert.IsInstanceOf<ResourceCollectionResponse> (response, "response is ResourceCollectionResponse");
        }
        /// <summary>
        /// Test MoveResources
        /// </summary>
        [Test]
        public void MoveResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //Body13 body = null;
            //var response = instance.MoveResources(evApiKey, evAccessToken, body);
            //Assert.IsInstanceOf<ResourceCopyMove> (response, "response is ResourceCopyMove");
        }
        /// <summary>
        /// Test UpdateResourceById
        /// </summary>
        [Test]
        public void UpdateResourceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evAccessToken = null;
            //string evApiKey = null;
            //int? id = null;
            //Body7 body = null;
            //var response = instance.UpdateResourceById(evAccessToken, evApiKey, id, body);
            //Assert.IsInstanceOf<ResourceResponse> (response, "response is ResourceResponse");
        }
        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string evApiKey = null;
            //string evAccessToken = null;
            //string path = null;
            //int? fileSize = null;
            //byte[] _file = null;
            //int? offsetBytes = null;
            //bool? resume = null;
            //bool? allowOverwrite = null;
            //var response = instance.UploadFile(evApiKey, evAccessToken, path, fileSize, _file, offsetBytes, resume, allowOverwrite);
            //Assert.IsInstanceOf<ResourceResponse> (response, "response is ResourceResponse");
        }
    }

}

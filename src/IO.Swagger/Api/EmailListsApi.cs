/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IEmailListsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new email list
        /// </summary>
        /// <remarks>
        /// Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse AddEmailList (string evApiKey, string evAccessToken, Body body = null);

        /// <summary>
        /// Create new email list
        /// </summary>
        /// <remarks>
        /// Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> AddEmailListWithHttpInfo (string evApiKey, string evAccessToken, Body body = null);
        /// <summary>
        /// Delete an email group with given id
        /// </summary>
        /// <remarks>
        /// Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>EmptyResponse</returns>
        EmptyResponse DeleteEmailListById (string evApiKey, string evAccessToken, int? id);

        /// <summary>
        /// Delete an email group with given id
        /// </summary>
        /// <remarks>
        /// Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        ApiResponse<EmptyResponse> DeleteEmailListByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id);
        /// <summary>
        /// Get individual email group
        /// </summary>
        /// <remarks>
        /// Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse GetEmailListById (string evApiKey, string evAccessToken, int? id, string include = null);

        /// <summary>
        /// Get individual email group
        /// </summary>
        /// <remarks>
        /// Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> GetEmailListByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null);
        /// <summary>
        /// Get all email groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>EmailListCollectionResponse</returns>
        EmailListCollectionResponse GetEmailLists (string evApiKey, string evAccessToken, string include = null);

        /// <summary>
        /// Get all email groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>ApiResponse of EmailListCollectionResponse</returns>
        ApiResponse<EmailListCollectionResponse> GetEmailListsWithHttpInfo (string evApiKey, string evAccessToken, string include = null);
        /// <summary>
        /// Update an email group
        /// </summary>
        /// <remarks>
        /// Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse UpdateEmailListById (string evApiKey, string evAccessToken, int? id, Body1 body = null);

        /// <summary>
        /// Update an email group
        /// </summary>
        /// <remarks>
        /// Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> UpdateEmailListByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body1 body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create new email list
        /// </summary>
        /// <remarks>
        /// Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> AddEmailListAsync (string evApiKey, string evAccessToken, Body body = null);

        /// <summary>
        /// Create new email list
        /// </summary>
        /// <remarks>
        /// Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> AddEmailListAsyncWithHttpInfo (string evApiKey, string evAccessToken, Body body = null);
        /// <summary>
        /// Delete an email group with given id
        /// </summary>
        /// <remarks>
        /// Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>Task of EmptyResponse</returns>
        System.Threading.Tasks.Task<EmptyResponse> DeleteEmailListByIdAsync (string evApiKey, string evAccessToken, int? id);

        /// <summary>
        /// Delete an email group with given id
        /// </summary>
        /// <remarks>
        /// Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteEmailListByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id);
        /// <summary>
        /// Get individual email group
        /// </summary>
        /// <remarks>
        /// Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> GetEmailListByIdAsync (string evApiKey, string evAccessToken, int? id, string include = null);

        /// <summary>
        /// Get individual email group
        /// </summary>
        /// <remarks>
        /// Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> GetEmailListByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null);
        /// <summary>
        /// Get all email groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of EmailListCollectionResponse</returns>
        System.Threading.Tasks.Task<EmailListCollectionResponse> GetEmailListsAsync (string evApiKey, string evAccessToken, string include = null);

        /// <summary>
        /// Get all email groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListCollectionResponse>> GetEmailListsAsyncWithHttpInfo (string evApiKey, string evAccessToken, string include = null);
        /// <summary>
        /// Update an email group
        /// </summary>
        /// <remarks>
        /// Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> UpdateEmailListByIdAsync (string evApiKey, string evAccessToken, int? id, Body1 body = null);

        /// <summary>
        /// Update an email group
        /// </summary>
        /// <remarks>
        /// Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> UpdateEmailListByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body1 body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class EmailListsApi : IEmailListsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailListsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailListsApi"/> class
        /// </summary>
        /// <returns></returns>
        public EmailListsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailListsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailListsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create new email list Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse AddEmailList (string evApiKey, string evAccessToken, Body body = null)
        {
             ApiResponse<EmailListResponse> localVarResponse = AddEmailListWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new email list Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > AddEmailListWithHttpInfo (string evApiKey, string evAccessToken, Body body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->AddEmailList");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->AddEmailList");

            var localVarPath = "/email-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Create new email list Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> AddEmailListAsync (string evApiKey, string evAccessToken, Body body = null)
        {
             ApiResponse<EmailListResponse> localVarResponse = await AddEmailListAsyncWithHttpInfo(evApiKey, evAccessToken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new email list Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> AddEmailListAsyncWithHttpInfo (string evApiKey, string evAccessToken, Body body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->AddEmailList");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->AddEmailList");

            var localVarPath = "/email-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Delete an email group with given id Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>EmptyResponse</returns>
        public EmptyResponse DeleteEmailListById (string evApiKey, string evAccessToken, int? id)
        {
             ApiResponse<EmptyResponse> localVarResponse = DeleteEmailListByIdWithHttpInfo(evApiKey, evAccessToken, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an email group with given id Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>ApiResponse of EmptyResponse</returns>
        public ApiResponse< EmptyResponse > DeleteEmailListByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->DeleteEmailListById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->DeleteEmailListById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailListsApi->DeleteEmailListById");

            var localVarPath = "/email-lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Delete an email group with given id Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>Task of EmptyResponse</returns>
        public async System.Threading.Tasks.Task<EmptyResponse> DeleteEmailListByIdAsync (string evApiKey, string evAccessToken, int? id)
        {
             ApiResponse<EmptyResponse> localVarResponse = await DeleteEmailListByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an email group with given id Permanently delete an email group. This action is not reversable. We recommend making a user confirm this action before sending the API call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to delete</param>
        /// <returns>Task of ApiResponse (EmptyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmptyResponse>> DeleteEmailListByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->DeleteEmailListById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->DeleteEmailListById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailListsApi->DeleteEmailListById");

            var localVarPath = "/email-lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmptyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmptyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmptyResponse)));
        }

        /// <summary>
        /// Get individual email group Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse GetEmailListById (string evApiKey, string evAccessToken, int? id, string include = null)
        {
             ApiResponse<EmailListResponse> localVarResponse = GetEmailListByIdWithHttpInfo(evApiKey, evAccessToken, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual email group Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > GetEmailListByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->GetEmailListById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->GetEmailListById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailListsApi->GetEmailListById");

            var localVarPath = "/email-lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Get individual email group Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> GetEmailListByIdAsync (string evApiKey, string evAccessToken, int? id, string include = null)
        {
             ApiResponse<EmailListResponse> localVarResponse = await GetEmailListByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get individual email group Retrieve all the details of a specifc email list including it&#x27;s name, when it was created and all the email addresses that belong to the group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to return.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> GetEmailListByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->GetEmailListById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->GetEmailListById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailListsApi->GetEmailListById");

            var localVarPath = "/email-lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Get all email groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>EmailListCollectionResponse</returns>
        public EmailListCollectionResponse GetEmailLists (string evApiKey, string evAccessToken, string include = null)
        {
             ApiResponse<EmailListCollectionResponse> localVarResponse = GetEmailListsWithHttpInfo(evApiKey, evAccessToken, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>ApiResponse of EmailListCollectionResponse</returns>
        public ApiResponse< EmailListCollectionResponse > GetEmailListsWithHttpInfo (string evApiKey, string evAccessToken, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->GetEmailLists");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->GetEmailLists");

            var localVarPath = "/email-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCollectionResponse)));
        }

        /// <summary>
        /// Get all email groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of EmailListCollectionResponse</returns>
        public async System.Threading.Tasks.Task<EmailListCollectionResponse> GetEmailListsAsync (string evApiKey, string evAccessToken, string include = null)
        {
             ApiResponse<EmailListCollectionResponse> localVarResponse = await GetEmailListsAsyncWithHttpInfo(evApiKey, evAccessToken, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all email groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="include">Related record types to include in the response. Valid option is &#x60;ownerUser&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListCollectionResponse>> GetEmailListsAsyncWithHttpInfo (string evApiKey, string evAccessToken, string include = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->GetEmailLists");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->GetEmailLists");

            var localVarPath = "/email-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCollectionResponse)));
        }

        /// <summary>
        /// Update an email group Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse UpdateEmailListById (string evApiKey, string evAccessToken, int? id, Body1 body = null)
        {
             ApiResponse<EmailListResponse> localVarResponse = UpdateEmailListByIdWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an email group Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > UpdateEmailListByIdWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body1 body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->UpdateEmailListById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->UpdateEmailListById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailListsApi->UpdateEmailListById");

            var localVarPath = "/email-lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailListById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Update an email group Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> UpdateEmailListByIdAsync (string evApiKey, string evAccessToken, int? id, Body1 body = null)
        {
             ApiResponse<EmailListResponse> localVarResponse = await UpdateEmailListByIdAsyncWithHttpInfo(evApiKey, evAccessToken, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an email group Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evApiKey">API Key required to make the API call.</param>
        /// <param name="evAccessToken">Access token required to make the API call.</param>
        /// <param name="id">ID of the email list to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> UpdateEmailListByIdAsyncWithHttpInfo (string evApiKey, string evAccessToken, int? id, Body1 body = null)
        {
            // verify the required parameter 'evApiKey' is set
            if (evApiKey == null)
                throw new ApiException(400, "Missing required parameter 'evApiKey' when calling EmailListsApi->UpdateEmailListById");
            // verify the required parameter 'evAccessToken' is set
            if (evAccessToken == null)
                throw new ApiException(400, "Missing required parameter 'evAccessToken' when calling EmailListsApi->UpdateEmailListById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailListsApi->UpdateEmailListById");

            var localVarPath = "/email-lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (evApiKey != null) localVarHeaderParams.Add("ev-api-key", this.Configuration.ApiClient.ParameterToString(evApiKey)); // header parameter
            if (evAccessToken != null) localVarHeaderParams.Add("ev-access-token", this.Configuration.ApiClient.ParameterToString(evAccessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailListById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

    }
}

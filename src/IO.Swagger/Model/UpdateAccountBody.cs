/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdateAccountBody
    /// </summary>
    [DataContract]
        public partial class UpdateAccountBody :  IEquatable<UpdateAccountBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAccountBody" /> class.
        /// </summary>
        /// <param name="quotaNoticeEnabled">Whether the system should email the account owner when usage exceeds quotaNoticeThreshold value.</param>
        /// <param name="quotaNoticeThreshold">Percent of account usage to trigger quota notices for..</param>
        /// <param name="secureOnly">Whether unencrypted FTP connections should be denied for the account..</param>
        /// <param name="complexPasswords">Whether to require complex passwords for all passwords..</param>
        /// <param name="showReferralLinks">Whether to display links for others to sign up on share views and invitation emails.</param>
        /// <param name="externalDomain">Custom address used for web file manager. Not available for all account types..</param>
        /// <param name="emailContent">Content of welcome email template..</param>
        /// <param name="emailSubject">Subject line for welcome emails.</param>
        /// <param name="allowedIpRanges">IP Address Ranges for restricting account access.</param>
        /// <param name="callbackSettings">callbackSettings.</param>
        /// <param name="brandingSettings">brandingSettings.</param>
        /// <param name="accountOnboarding">Whether extra help popups can be enabled for users in the web file manager..</param>
        /// <param name="customSignature">Signature to be automatically added to the bottom of emails generated by the account..</param>
        public UpdateAccountBody(bool? quotaNoticeEnabled = default(bool?), int? quotaNoticeThreshold = default(int?), bool? secureOnly = default(bool?), bool? complexPasswords = default(bool?), bool? showReferralLinks = default(bool?), string externalDomain = default(string), string emailContent = default(string), string emailSubject = default(string), List<AccountAllowedIpRanges> allowedIpRanges = default(List<AccountAllowedIpRanges>), CallbackSettings1 callbackSettings = default(CallbackSettings1), BrandingSettings1 brandingSettings = default(BrandingSettings1), bool? accountOnboarding = default(bool?), string customSignature = default(string))
        {
            this.QuotaNoticeEnabled = quotaNoticeEnabled;
            this.QuotaNoticeThreshold = quotaNoticeThreshold;
            this.SecureOnly = secureOnly;
            this.ComplexPasswords = complexPasswords;
            this.ShowReferralLinks = showReferralLinks;
            this.ExternalDomain = externalDomain;
            this.EmailContent = emailContent;
            this.EmailSubject = emailSubject;
            this.AllowedIpRanges = allowedIpRanges;
            this.CallbackSettings = callbackSettings;
            this.BrandingSettings = brandingSettings;
            this.AccountOnboarding = accountOnboarding;
            this.CustomSignature = customSignature;
        }
        
        /// <summary>
        /// Whether the system should email the account owner when usage exceeds quotaNoticeThreshold value
        /// </summary>
        /// <value>Whether the system should email the account owner when usage exceeds quotaNoticeThreshold value</value>
        [DataMember(Name="quotaNoticeEnabled", EmitDefaultValue=false)]
        public bool? QuotaNoticeEnabled { get; set; }

        /// <summary>
        /// Percent of account usage to trigger quota notices for.
        /// </summary>
        /// <value>Percent of account usage to trigger quota notices for.</value>
        [DataMember(Name="quotaNoticeThreshold", EmitDefaultValue=false)]
        public int? QuotaNoticeThreshold { get; set; }

        /// <summary>
        /// Whether unencrypted FTP connections should be denied for the account.
        /// </summary>
        /// <value>Whether unencrypted FTP connections should be denied for the account.</value>
        [DataMember(Name="secureOnly", EmitDefaultValue=false)]
        public bool? SecureOnly { get; set; }

        /// <summary>
        /// Whether to require complex passwords for all passwords.
        /// </summary>
        /// <value>Whether to require complex passwords for all passwords.</value>
        [DataMember(Name="complexPasswords", EmitDefaultValue=false)]
        public bool? ComplexPasswords { get; set; }

        /// <summary>
        /// Whether to display links for others to sign up on share views and invitation emails
        /// </summary>
        /// <value>Whether to display links for others to sign up on share views and invitation emails</value>
        [DataMember(Name="showReferralLinks", EmitDefaultValue=false)]
        public bool? ShowReferralLinks { get; set; }

        /// <summary>
        /// Custom address used for web file manager. Not available for all account types.
        /// </summary>
        /// <value>Custom address used for web file manager. Not available for all account types.</value>
        [DataMember(Name="externalDomain", EmitDefaultValue=false)]
        public string ExternalDomain { get; set; }

        /// <summary>
        /// Content of welcome email template.
        /// </summary>
        /// <value>Content of welcome email template.</value>
        [DataMember(Name="emailContent", EmitDefaultValue=false)]
        public string EmailContent { get; set; }

        /// <summary>
        /// Subject line for welcome emails
        /// </summary>
        /// <value>Subject line for welcome emails</value>
        [DataMember(Name="emailSubject", EmitDefaultValue=false)]
        public string EmailSubject { get; set; }

        /// <summary>
        /// IP Address Ranges for restricting account access
        /// </summary>
        /// <value>IP Address Ranges for restricting account access</value>
        [DataMember(Name="allowedIpRanges", EmitDefaultValue=false)]
        public List<AccountAllowedIpRanges> AllowedIpRanges { get; set; }

        /// <summary>
        /// Gets or Sets CallbackSettings
        /// </summary>
        [DataMember(Name="callbackSettings", EmitDefaultValue=false)]
        public CallbackSettings1 CallbackSettings { get; set; }

        /// <summary>
        /// Gets or Sets BrandingSettings
        /// </summary>
        [DataMember(Name="brandingSettings", EmitDefaultValue=false)]
        public BrandingSettings1 BrandingSettings { get; set; }

        /// <summary>
        /// Whether extra help popups can be enabled for users in the web file manager.
        /// </summary>
        /// <value>Whether extra help popups can be enabled for users in the web file manager.</value>
        [DataMember(Name="accountOnboarding", EmitDefaultValue=false)]
        public bool? AccountOnboarding { get; set; }

        /// <summary>
        /// Signature to be automatically added to the bottom of emails generated by the account.
        /// </summary>
        /// <value>Signature to be automatically added to the bottom of emails generated by the account.</value>
        [DataMember(Name="customSignature", EmitDefaultValue=false)]
        public string CustomSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAccountBody {\n");
            sb.Append("  QuotaNoticeEnabled: ").Append(QuotaNoticeEnabled).Append("\n");
            sb.Append("  QuotaNoticeThreshold: ").Append(QuotaNoticeThreshold).Append("\n");
            sb.Append("  SecureOnly: ").Append(SecureOnly).Append("\n");
            sb.Append("  ComplexPasswords: ").Append(ComplexPasswords).Append("\n");
            sb.Append("  ShowReferralLinks: ").Append(ShowReferralLinks).Append("\n");
            sb.Append("  ExternalDomain: ").Append(ExternalDomain).Append("\n");
            sb.Append("  EmailContent: ").Append(EmailContent).Append("\n");
            sb.Append("  EmailSubject: ").Append(EmailSubject).Append("\n");
            sb.Append("  AllowedIpRanges: ").Append(AllowedIpRanges).Append("\n");
            sb.Append("  CallbackSettings: ").Append(CallbackSettings).Append("\n");
            sb.Append("  BrandingSettings: ").Append(BrandingSettings).Append("\n");
            sb.Append("  AccountOnboarding: ").Append(AccountOnboarding).Append("\n");
            sb.Append("  CustomSignature: ").Append(CustomSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAccountBody);
        }

        /// <summary>
        /// Returns true if UpdateAccountBody instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAccountBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAccountBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuotaNoticeEnabled == input.QuotaNoticeEnabled ||
                    (this.QuotaNoticeEnabled != null &&
                    this.QuotaNoticeEnabled.Equals(input.QuotaNoticeEnabled))
                ) && 
                (
                    this.QuotaNoticeThreshold == input.QuotaNoticeThreshold ||
                    (this.QuotaNoticeThreshold != null &&
                    this.QuotaNoticeThreshold.Equals(input.QuotaNoticeThreshold))
                ) && 
                (
                    this.SecureOnly == input.SecureOnly ||
                    (this.SecureOnly != null &&
                    this.SecureOnly.Equals(input.SecureOnly))
                ) && 
                (
                    this.ComplexPasswords == input.ComplexPasswords ||
                    (this.ComplexPasswords != null &&
                    this.ComplexPasswords.Equals(input.ComplexPasswords))
                ) && 
                (
                    this.ShowReferralLinks == input.ShowReferralLinks ||
                    (this.ShowReferralLinks != null &&
                    this.ShowReferralLinks.Equals(input.ShowReferralLinks))
                ) && 
                (
                    this.ExternalDomain == input.ExternalDomain ||
                    (this.ExternalDomain != null &&
                    this.ExternalDomain.Equals(input.ExternalDomain))
                ) && 
                (
                    this.EmailContent == input.EmailContent ||
                    (this.EmailContent != null &&
                    this.EmailContent.Equals(input.EmailContent))
                ) && 
                (
                    this.EmailSubject == input.EmailSubject ||
                    (this.EmailSubject != null &&
                    this.EmailSubject.Equals(input.EmailSubject))
                ) && 
                (
                    this.AllowedIpRanges == input.AllowedIpRanges ||
                    this.AllowedIpRanges != null &&
                    input.AllowedIpRanges != null &&
                    this.AllowedIpRanges.SequenceEqual(input.AllowedIpRanges)
                ) && 
                (
                    this.CallbackSettings == input.CallbackSettings ||
                    (this.CallbackSettings != null &&
                    this.CallbackSettings.Equals(input.CallbackSettings))
                ) && 
                (
                    this.BrandingSettings == input.BrandingSettings ||
                    (this.BrandingSettings != null &&
                    this.BrandingSettings.Equals(input.BrandingSettings))
                ) && 
                (
                    this.AccountOnboarding == input.AccountOnboarding ||
                    (this.AccountOnboarding != null &&
                    this.AccountOnboarding.Equals(input.AccountOnboarding))
                ) && 
                (
                    this.CustomSignature == input.CustomSignature ||
                    (this.CustomSignature != null &&
                    this.CustomSignature.Equals(input.CustomSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuotaNoticeEnabled != null)
                    hashCode = hashCode * 59 + this.QuotaNoticeEnabled.GetHashCode();
                if (this.QuotaNoticeThreshold != null)
                    hashCode = hashCode * 59 + this.QuotaNoticeThreshold.GetHashCode();
                if (this.SecureOnly != null)
                    hashCode = hashCode * 59 + this.SecureOnly.GetHashCode();
                if (this.ComplexPasswords != null)
                    hashCode = hashCode * 59 + this.ComplexPasswords.GetHashCode();
                if (this.ShowReferralLinks != null)
                    hashCode = hashCode * 59 + this.ShowReferralLinks.GetHashCode();
                if (this.ExternalDomain != null)
                    hashCode = hashCode * 59 + this.ExternalDomain.GetHashCode();
                if (this.EmailContent != null)
                    hashCode = hashCode * 59 + this.EmailContent.GetHashCode();
                if (this.EmailSubject != null)
                    hashCode = hashCode * 59 + this.EmailSubject.GetHashCode();
                if (this.AllowedIpRanges != null)
                    hashCode = hashCode * 59 + this.AllowedIpRanges.GetHashCode();
                if (this.CallbackSettings != null)
                    hashCode = hashCode * 59 + this.CallbackSettings.GetHashCode();
                if (this.BrandingSettings != null)
                    hashCode = hashCode * 59 + this.BrandingSettings.GetHashCode();
                if (this.AccountOnboarding != null)
                    hashCode = hashCode * 59 + this.AccountOnboarding.GetHashCode();
                if (this.CustomSignature != null)
                    hashCode = hashCode * 59 + this.CustomSignature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

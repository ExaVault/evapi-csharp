/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Home resource and owner account relationship data for the user. 
    /// </summary>
    [DataContract]
        public partial class UserRelationships :  IEquatable<UserRelationships>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRelationships" /> class.
        /// </summary>
        /// <param name="homeResource">homeResource.</param>
        /// <param name="ownerAccount">ownerAccount (required).</param>
        public UserRelationships(UserRelationshipsHomeResource homeResource = default(UserRelationshipsHomeResource), UserRelationshipsOwnerAccount ownerAccount = default(UserRelationshipsOwnerAccount))
        {
            // to ensure "ownerAccount" is required (not null)
            if (ownerAccount == null)
            {
                throw new InvalidDataException("ownerAccount is a required property for UserRelationships and cannot be null");
            }
            else
            {
                this.OwnerAccount = ownerAccount;
            }
            this.HomeResource = homeResource;
        }
        
        /// <summary>
        /// Gets or Sets HomeResource
        /// </summary>
        [DataMember(Name="homeResource", EmitDefaultValue=false)]
        public UserRelationshipsHomeResource HomeResource { get; set; }

        /// <summary>
        /// Gets or Sets OwnerAccount
        /// </summary>
        [DataMember(Name="ownerAccount", EmitDefaultValue=false)]
        public UserRelationshipsOwnerAccount OwnerAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRelationships {\n");
            sb.Append("  HomeResource: ").Append(HomeResource).Append("\n");
            sb.Append("  OwnerAccount: ").Append(OwnerAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRelationships);
        }

        /// <summary>
        /// Returns true if UserRelationships instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRelationships to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRelationships input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HomeResource == input.HomeResource ||
                    (this.HomeResource != null &&
                    this.HomeResource.Equals(input.HomeResource))
                ) && 
                (
                    this.OwnerAccount == input.OwnerAccount ||
                    (this.OwnerAccount != null &&
                    this.OwnerAccount.Equals(input.OwnerAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HomeResource != null)
                    hashCode = hashCode * 59 + this.HomeResource.GetHashCode();
                if (this.OwnerAccount != null)
                    hashCode = hashCode * 59 + this.OwnerAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

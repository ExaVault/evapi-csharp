/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Message, owner, resource, and notification relationships of the share. 
    /// </summary>
    [DataContract]
        public partial class ShareRelationships :  IEquatable<ShareRelationships>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareRelationships" /> class.
        /// </summary>
        /// <param name="messages">null.</param>
        /// <param name="owner">owner.</param>
        /// <param name="resources">resources.</param>
        /// <param name="notifications">null.</param>
        public ShareRelationships(List<ShareRelationshipsMessages> messages = default(List<ShareRelationshipsMessages>), ShareRelationshipsOwner owner = default(ShareRelationshipsOwner), List<ShareRelationshipsResources> resources = default(List<ShareRelationshipsResources>), List<ShareRelationshipsNotifications> notifications = default(List<ShareRelationshipsNotifications>))
        {
            this.Messages = messages;
            this.Owner = owner;
            this.Resources = resources;
            this.Notifications = notifications;
        }
        
        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ShareRelationshipsMessages> Messages { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public ShareRelationshipsOwner Owner { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<ShareRelationshipsResources> Resources { get; set; }

        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<ShareRelationshipsNotifications> Notifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShareRelationships {\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareRelationships);
        }

        /// <summary>
        /// Returns true if ShareRelationships instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareRelationships to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareRelationships input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

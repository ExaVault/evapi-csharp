/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Attributes of resource
    /// </summary>
    [DataContract]
        public partial class ResourceAttributes :  IEquatable<ResourceAttributes>, IValidatableObject
    {
        /// <summary>
        /// Type of the resource.
        /// </summary>
        /// <value>Type of the resource.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1,
            /// <summary>
            /// Enum Dir for value: dir
            /// </summary>
            [EnumMember(Value = "dir")]
            Dir = 2        }
        /// <summary>
        /// Type of the resource.
        /// </summary>
        /// <value>Type of the resource.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceAttributes" /> class.
        /// </summary>
        /// <param name="hash">Unique hash of the resource..</param>
        /// <param name="name">Resource name, e.g. the name of the file or folder..</param>
        /// <param name="extension">Resource extension. Property exists only if resource &#x60;type&#x60; is file..</param>
        /// <param name="type">Type of the resource..</param>
        /// <param name="createdBy">Username of the creator..</param>
        /// <param name="uploadDate">Timestamp of resource upload..</param>
        /// <param name="createdAt">Date-time of resource creation..</param>
        /// <param name="updatedAt">Date-time of resource modification..</param>
        /// <param name="accessedAt">Date-time of the time when resource was accessed..</param>
        /// <param name="createdTime">UNIX timestamp of resource creation.</param>
        /// <param name="updatedTime">UNIX timestamp of resource modification.</param>
        /// <param name="accessedTime">UNIX timestamp of last access.</param>
        /// <param name="path">Full path to the resource..</param>
        /// <param name="size">Resource size in bytes.</param>
        /// <param name="fileCount">Number of files within folder. null if resource type is a file..</param>
        /// <param name="previewable">Can resource be previewed. Property equals &#x60;null&#x60; if resource &#x60;type&#x60; is dir..</param>
        public ResourceAttributes(string hash = default(string), string name = default(string), string extension = default(string), TypeEnum? type = default(TypeEnum?), string createdBy = default(string), DateTime? uploadDate = default(DateTime?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? accessedAt = default(DateTime?), int? createdTime = default(int?), int? updatedTime = default(int?), int? accessedTime = default(int?), string path = default(string), long? size = default(long?), int? fileCount = default(int?), bool? previewable = default(bool?))
        {
            this.Hash = hash;
            this.Name = name;
            this.Extension = extension;
            this.Type = type;
            this.CreatedBy = createdBy;
            this.UploadDate = uploadDate;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.AccessedAt = accessedAt;
            this.CreatedTime = createdTime;
            this.UpdatedTime = updatedTime;
            this.AccessedTime = accessedTime;
            this.Path = path;
            this.Size = size;
            this.FileCount = fileCount;
            this.Previewable = previewable;
        }
        
        /// <summary>
        /// Unique hash of the resource.
        /// </summary>
        /// <value>Unique hash of the resource.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Resource name, e.g. the name of the file or folder.
        /// </summary>
        /// <value>Resource name, e.g. the name of the file or folder.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Resource extension. Property exists only if resource &#x60;type&#x60; is file.
        /// </summary>
        /// <value>Resource extension. Property exists only if resource &#x60;type&#x60; is file.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }


        /// <summary>
        /// Username of the creator.
        /// </summary>
        /// <value>Username of the creator.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Timestamp of resource upload.
        /// </summary>
        /// <value>Timestamp of resource upload.</value>
        [DataMember(Name="uploadDate", EmitDefaultValue=false)]
        public DateTime? UploadDate { get; set; }

        /// <summary>
        /// Date-time of resource creation.
        /// </summary>
        /// <value>Date-time of resource creation.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Date-time of resource modification.
        /// </summary>
        /// <value>Date-time of resource modification.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Date-time of the time when resource was accessed.
        /// </summary>
        /// <value>Date-time of the time when resource was accessed.</value>
        [DataMember(Name="accessedAt", EmitDefaultValue=false)]
        public DateTime? AccessedAt { get; set; }

        /// <summary>
        /// UNIX timestamp of resource creation
        /// </summary>
        /// <value>UNIX timestamp of resource creation</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public int? CreatedTime { get; set; }

        /// <summary>
        /// UNIX timestamp of resource modification
        /// </summary>
        /// <value>UNIX timestamp of resource modification</value>
        [DataMember(Name="updatedTime", EmitDefaultValue=false)]
        public int? UpdatedTime { get; set; }

        /// <summary>
        /// UNIX timestamp of last access
        /// </summary>
        /// <value>UNIX timestamp of last access</value>
        [DataMember(Name="accessedTime", EmitDefaultValue=false)]
        public int? AccessedTime { get; set; }

        /// <summary>
        /// Full path to the resource.
        /// </summary>
        /// <value>Full path to the resource.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Resource size in bytes
        /// </summary>
        /// <value>Resource size in bytes</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// Number of files within folder. null if resource type is a file.
        /// </summary>
        /// <value>Number of files within folder. null if resource type is a file.</value>
        [DataMember(Name="fileCount", EmitDefaultValue=false)]
        public int? FileCount { get; set; }

        /// <summary>
        /// Can resource be previewed. Property equals &#x60;null&#x60; if resource &#x60;type&#x60; is dir.
        /// </summary>
        /// <value>Can resource be previewed. Property equals &#x60;null&#x60; if resource &#x60;type&#x60; is dir.</value>
        [DataMember(Name="previewable", EmitDefaultValue=false)]
        public bool? Previewable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceAttributes {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AccessedAt: ").Append(AccessedAt).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  AccessedTime: ").Append(AccessedTime).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  Previewable: ").Append(Previewable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceAttributes);
        }

        /// <summary>
        /// Returns true if ResourceAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UploadDate == input.UploadDate ||
                    (this.UploadDate != null &&
                    this.UploadDate.Equals(input.UploadDate))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.AccessedAt == input.AccessedAt ||
                    (this.AccessedAt != null &&
                    this.AccessedAt.Equals(input.AccessedAt))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.UpdatedTime == input.UpdatedTime ||
                    (this.UpdatedTime != null &&
                    this.UpdatedTime.Equals(input.UpdatedTime))
                ) && 
                (
                    this.AccessedTime == input.AccessedTime ||
                    (this.AccessedTime != null &&
                    this.AccessedTime.Equals(input.AccessedTime))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.FileCount == input.FileCount ||
                    (this.FileCount != null &&
                    this.FileCount.Equals(input.FileCount))
                ) && 
                (
                    this.Previewable == input.Previewable ||
                    (this.Previewable != null &&
                    this.Previewable.Equals(input.Previewable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.UploadDate != null)
                    hashCode = hashCode * 59 + this.UploadDate.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.AccessedAt != null)
                    hashCode = hashCode * 59 + this.AccessedAt.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.UpdatedTime != null)
                    hashCode = hashCode * 59 + this.UpdatedTime.GetHashCode();
                if (this.AccessedTime != null)
                    hashCode = hashCode * 59 + this.AccessedTime.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.FileCount != null)
                    hashCode = hashCode * 59 + this.FileCount.GetHashCode();
                if (this.Previewable != null)
                    hashCode = hashCode * 59 + this.Previewable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ShareRecipient1
    /// </summary>
    [DataContract]
        public partial class ShareRecipient1 :  IEquatable<ShareRecipient1>, IValidatableObject
    {
        /// <summary>
        /// Type of the recipient.
        /// </summary>
        /// <value>Type of the recipient.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Owner for value: owner
            /// </summary>
            [EnumMember(Value = "owner")]
            Owner = 1,
            /// <summary>
            /// Enum Direct for value: direct
            /// </summary>
            [EnumMember(Value = "direct")]
            Direct = 2        }
        /// <summary>
        /// Type of the recipient.
        /// </summary>
        /// <value>Type of the recipient.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareRecipient1" /> class.
        /// </summary>
        /// <param name="id">ID of the recipient..</param>
        /// <param name="shareId">ID of the share that the recipoient belongs to..</param>
        /// <param name="type">Type of the recipient..</param>
        /// <param name="hash">Share hash..</param>
        /// <param name="email">Recipient email address..</param>
        /// <param name="sent">Set to true if invite email was sent; false otherwise..</param>
        /// <param name="received">Set to true if recipient has accessed the share. Note this is set to true when the recipient clicks the link to access the share; not when they download a file..</param>
        /// <param name="created">Timestamp of adding recipient to the share..</param>
        public ShareRecipient1(int? id = default(int?), string shareId = default(string), TypeEnum? type = default(TypeEnum?), string hash = default(string), string email = default(string), bool? sent = default(bool?), bool? received = default(bool?), DateTime? created = default(DateTime?))
        {
            this.Id = id;
            this.ShareId = shareId;
            this.Type = type;
            this.Hash = hash;
            this.Email = email;
            this.Sent = sent;
            this.Received = received;
            this.Created = created;
        }
        
        /// <summary>
        /// ID of the recipient.
        /// </summary>
        /// <value>ID of the recipient.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// ID of the share that the recipoient belongs to.
        /// </summary>
        /// <value>ID of the share that the recipoient belongs to.</value>
        [DataMember(Name="shareId", EmitDefaultValue=false)]
        public string ShareId { get; set; }


        /// <summary>
        /// Share hash.
        /// </summary>
        /// <value>Share hash.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Recipient email address.
        /// </summary>
        /// <value>Recipient email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Set to true if invite email was sent; false otherwise.
        /// </summary>
        /// <value>Set to true if invite email was sent; false otherwise.</value>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public bool? Sent { get; set; }

        /// <summary>
        /// Set to true if recipient has accessed the share. Note this is set to true when the recipient clicks the link to access the share; not when they download a file.
        /// </summary>
        /// <value>Set to true if recipient has accessed the share. Note this is set to true when the recipient clicks the link to access the share; not when they download a file.</value>
        [DataMember(Name="received", EmitDefaultValue=false)]
        public bool? Received { get; set; }

        /// <summary>
        /// Timestamp of adding recipient to the share.
        /// </summary>
        /// <value>Timestamp of adding recipient to the share.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShareRecipient1 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShareId: ").Append(ShareId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareRecipient1);
        }

        /// <summary>
        /// Returns true if ShareRecipient1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareRecipient1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareRecipient1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ShareId == input.ShareId ||
                    (this.ShareId != null &&
                    this.ShareId.Equals(input.ShareId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.Received == input.Received ||
                    (this.Received != null &&
                    this.Received.Equals(input.Received))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ShareId != null)
                    hashCode = hashCode * 59 + this.ShareId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.Received != null)
                    hashCode = hashCode * 59 + this.Received.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

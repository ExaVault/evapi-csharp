/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CallbackSettingsTriggers
    /// </summary>
    [DataContract]
        public partial class CallbackSettingsTriggers :  IEquatable<CallbackSettingsTriggers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackSettingsTriggers" /> class.
        /// </summary>
        /// <param name="upload">Trigger callback on upload..</param>
        /// <param name="download">Trigger callback on download..</param>
        /// <param name="delete">Trigger callback on delete..</param>
        /// <param name="createFolder">Trigger callback on fodler create..</param>
        /// <param name="rename">Trigger callback on rename..</param>
        /// <param name="move">Trigger callback on move..</param>
        /// <param name="copy">Trigger callback on copy..</param>
        /// <param name="compress">Trigger callback on compress..</param>
        /// <param name="extract">Trigger callback on extract..</param>
        /// <param name="shareFolder">Trigger callback on share folder create..</param>
        /// <param name="sendFiles">Trigger callback on send files..</param>
        /// <param name="receiveFiles">Trigger callback on receive folder create..</param>
        /// <param name="updateShare">Trigger callback on share folder update..</param>
        /// <param name="updateReceive">Trigger callback on receive folder update..</param>
        /// <param name="deleteSend">Trigger callback on send files delete..</param>
        /// <param name="deleteReceive">Trigger callback on receive folder delete..</param>
        /// <param name="deleteShare">Trigger callback on share folder delete..</param>
        /// <param name="createNotification">Trigger callback on notification create..</param>
        /// <param name="updateNotification">Trigger callback on notification update..</param>
        /// <param name="deleteNotification">Trigger callback on notification delete..</param>
        /// <param name="createUser">Trigger callback on user create..</param>
        /// <param name="updateUser">Trigger callback on user update..</param>
        /// <param name="deleteUser">Trigger callback on user delete..</param>
        /// <param name="userConnect">Trigger callback on user connect..</param>
        /// <param name="userDisconnect">Trigger callback on user disconnect..</param>
        public CallbackSettingsTriggers(bool? upload = default(bool?), bool? download = default(bool?), bool? delete = default(bool?), bool? createFolder = default(bool?), bool? rename = default(bool?), bool? move = default(bool?), bool? copy = default(bool?), bool? compress = default(bool?), bool? extract = default(bool?), bool? shareFolder = default(bool?), bool? sendFiles = default(bool?), bool? receiveFiles = default(bool?), bool? updateShare = default(bool?), bool? updateReceive = default(bool?), bool? deleteSend = default(bool?), bool? deleteReceive = default(bool?), bool? deleteShare = default(bool?), bool? createNotification = default(bool?), bool? updateNotification = default(bool?), bool? deleteNotification = default(bool?), bool? createUser = default(bool?), bool? updateUser = default(bool?), bool? deleteUser = default(bool?), bool? userConnect = default(bool?), bool? userDisconnect = default(bool?))
        {
            this.Upload = upload;
            this.Download = download;
            this.Delete = delete;
            this.CreateFolder = createFolder;
            this.Rename = rename;
            this.Move = move;
            this.Copy = copy;
            this.Compress = compress;
            this.Extract = extract;
            this.ShareFolder = shareFolder;
            this.SendFiles = sendFiles;
            this.ReceiveFiles = receiveFiles;
            this.UpdateShare = updateShare;
            this.UpdateReceive = updateReceive;
            this.DeleteSend = deleteSend;
            this.DeleteReceive = deleteReceive;
            this.DeleteShare = deleteShare;
            this.CreateNotification = createNotification;
            this.UpdateNotification = updateNotification;
            this.DeleteNotification = deleteNotification;
            this.CreateUser = createUser;
            this.UpdateUser = updateUser;
            this.DeleteUser = deleteUser;
            this.UserConnect = userConnect;
            this.UserDisconnect = userDisconnect;
        }
        
        /// <summary>
        /// Trigger callback on upload.
        /// </summary>
        /// <value>Trigger callback on upload.</value>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public bool? Upload { get; set; }

        /// <summary>
        /// Trigger callback on download.
        /// </summary>
        /// <value>Trigger callback on download.</value>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public bool? Download { get; set; }

        /// <summary>
        /// Trigger callback on delete.
        /// </summary>
        /// <value>Trigger callback on delete.</value>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        public bool? Delete { get; set; }

        /// <summary>
        /// Trigger callback on fodler create.
        /// </summary>
        /// <value>Trigger callback on fodler create.</value>
        [DataMember(Name="createFolder", EmitDefaultValue=false)]
        public bool? CreateFolder { get; set; }

        /// <summary>
        /// Trigger callback on rename.
        /// </summary>
        /// <value>Trigger callback on rename.</value>
        [DataMember(Name="rename", EmitDefaultValue=false)]
        public bool? Rename { get; set; }

        /// <summary>
        /// Trigger callback on move.
        /// </summary>
        /// <value>Trigger callback on move.</value>
        [DataMember(Name="move", EmitDefaultValue=false)]
        public bool? Move { get; set; }

        /// <summary>
        /// Trigger callback on copy.
        /// </summary>
        /// <value>Trigger callback on copy.</value>
        [DataMember(Name="copy", EmitDefaultValue=false)]
        public bool? Copy { get; set; }

        /// <summary>
        /// Trigger callback on compress.
        /// </summary>
        /// <value>Trigger callback on compress.</value>
        [DataMember(Name="compress", EmitDefaultValue=false)]
        public bool? Compress { get; set; }

        /// <summary>
        /// Trigger callback on extract.
        /// </summary>
        /// <value>Trigger callback on extract.</value>
        [DataMember(Name="extract", EmitDefaultValue=false)]
        public bool? Extract { get; set; }

        /// <summary>
        /// Trigger callback on share folder create.
        /// </summary>
        /// <value>Trigger callback on share folder create.</value>
        [DataMember(Name="shareFolder", EmitDefaultValue=false)]
        public bool? ShareFolder { get; set; }

        /// <summary>
        /// Trigger callback on send files.
        /// </summary>
        /// <value>Trigger callback on send files.</value>
        [DataMember(Name="sendFiles", EmitDefaultValue=false)]
        public bool? SendFiles { get; set; }

        /// <summary>
        /// Trigger callback on receive folder create.
        /// </summary>
        /// <value>Trigger callback on receive folder create.</value>
        [DataMember(Name="receiveFiles", EmitDefaultValue=false)]
        public bool? ReceiveFiles { get; set; }

        /// <summary>
        /// Trigger callback on share folder update.
        /// </summary>
        /// <value>Trigger callback on share folder update.</value>
        [DataMember(Name="updateShare", EmitDefaultValue=false)]
        public bool? UpdateShare { get; set; }

        /// <summary>
        /// Trigger callback on receive folder update.
        /// </summary>
        /// <value>Trigger callback on receive folder update.</value>
        [DataMember(Name="updateReceive", EmitDefaultValue=false)]
        public bool? UpdateReceive { get; set; }

        /// <summary>
        /// Trigger callback on send files delete.
        /// </summary>
        /// <value>Trigger callback on send files delete.</value>
        [DataMember(Name="deleteSend", EmitDefaultValue=false)]
        public bool? DeleteSend { get; set; }

        /// <summary>
        /// Trigger callback on receive folder delete.
        /// </summary>
        /// <value>Trigger callback on receive folder delete.</value>
        [DataMember(Name="deleteReceive", EmitDefaultValue=false)]
        public bool? DeleteReceive { get; set; }

        /// <summary>
        /// Trigger callback on share folder delete.
        /// </summary>
        /// <value>Trigger callback on share folder delete.</value>
        [DataMember(Name="deleteShare", EmitDefaultValue=false)]
        public bool? DeleteShare { get; set; }

        /// <summary>
        /// Trigger callback on notification create.
        /// </summary>
        /// <value>Trigger callback on notification create.</value>
        [DataMember(Name="createNotification", EmitDefaultValue=false)]
        public bool? CreateNotification { get; set; }

        /// <summary>
        /// Trigger callback on notification update.
        /// </summary>
        /// <value>Trigger callback on notification update.</value>
        [DataMember(Name="updateNotification", EmitDefaultValue=false)]
        public bool? UpdateNotification { get; set; }

        /// <summary>
        /// Trigger callback on notification delete.
        /// </summary>
        /// <value>Trigger callback on notification delete.</value>
        [DataMember(Name="deleteNotification", EmitDefaultValue=false)]
        public bool? DeleteNotification { get; set; }

        /// <summary>
        /// Trigger callback on user create.
        /// </summary>
        /// <value>Trigger callback on user create.</value>
        [DataMember(Name="createUser", EmitDefaultValue=false)]
        public bool? CreateUser { get; set; }

        /// <summary>
        /// Trigger callback on user update.
        /// </summary>
        /// <value>Trigger callback on user update.</value>
        [DataMember(Name="updateUser", EmitDefaultValue=false)]
        public bool? UpdateUser { get; set; }

        /// <summary>
        /// Trigger callback on user delete.
        /// </summary>
        /// <value>Trigger callback on user delete.</value>
        [DataMember(Name="deleteUser", EmitDefaultValue=false)]
        public bool? DeleteUser { get; set; }

        /// <summary>
        /// Trigger callback on user connect.
        /// </summary>
        /// <value>Trigger callback on user connect.</value>
        [DataMember(Name="userConnect", EmitDefaultValue=false)]
        public bool? UserConnect { get; set; }

        /// <summary>
        /// Trigger callback on user disconnect.
        /// </summary>
        /// <value>Trigger callback on user disconnect.</value>
        [DataMember(Name="userDisconnect", EmitDefaultValue=false)]
        public bool? UserDisconnect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallbackSettingsTriggers {\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  CreateFolder: ").Append(CreateFolder).Append("\n");
            sb.Append("  Rename: ").Append(Rename).Append("\n");
            sb.Append("  Move: ").Append(Move).Append("\n");
            sb.Append("  Copy: ").Append(Copy).Append("\n");
            sb.Append("  Compress: ").Append(Compress).Append("\n");
            sb.Append("  Extract: ").Append(Extract).Append("\n");
            sb.Append("  ShareFolder: ").Append(ShareFolder).Append("\n");
            sb.Append("  SendFiles: ").Append(SendFiles).Append("\n");
            sb.Append("  ReceiveFiles: ").Append(ReceiveFiles).Append("\n");
            sb.Append("  UpdateShare: ").Append(UpdateShare).Append("\n");
            sb.Append("  UpdateReceive: ").Append(UpdateReceive).Append("\n");
            sb.Append("  DeleteSend: ").Append(DeleteSend).Append("\n");
            sb.Append("  DeleteReceive: ").Append(DeleteReceive).Append("\n");
            sb.Append("  DeleteShare: ").Append(DeleteShare).Append("\n");
            sb.Append("  CreateNotification: ").Append(CreateNotification).Append("\n");
            sb.Append("  UpdateNotification: ").Append(UpdateNotification).Append("\n");
            sb.Append("  DeleteNotification: ").Append(DeleteNotification).Append("\n");
            sb.Append("  CreateUser: ").Append(CreateUser).Append("\n");
            sb.Append("  UpdateUser: ").Append(UpdateUser).Append("\n");
            sb.Append("  DeleteUser: ").Append(DeleteUser).Append("\n");
            sb.Append("  UserConnect: ").Append(UserConnect).Append("\n");
            sb.Append("  UserDisconnect: ").Append(UserDisconnect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallbackSettingsTriggers);
        }

        /// <summary>
        /// Returns true if CallbackSettingsTriggers instances are equal
        /// </summary>
        /// <param name="input">Instance of CallbackSettingsTriggers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallbackSettingsTriggers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                ) && 
                (
                    this.Download == input.Download ||
                    (this.Download != null &&
                    this.Download.Equals(input.Download))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                ) && 
                (
                    this.CreateFolder == input.CreateFolder ||
                    (this.CreateFolder != null &&
                    this.CreateFolder.Equals(input.CreateFolder))
                ) && 
                (
                    this.Rename == input.Rename ||
                    (this.Rename != null &&
                    this.Rename.Equals(input.Rename))
                ) && 
                (
                    this.Move == input.Move ||
                    (this.Move != null &&
                    this.Move.Equals(input.Move))
                ) && 
                (
                    this.Copy == input.Copy ||
                    (this.Copy != null &&
                    this.Copy.Equals(input.Copy))
                ) && 
                (
                    this.Compress == input.Compress ||
                    (this.Compress != null &&
                    this.Compress.Equals(input.Compress))
                ) && 
                (
                    this.Extract == input.Extract ||
                    (this.Extract != null &&
                    this.Extract.Equals(input.Extract))
                ) && 
                (
                    this.ShareFolder == input.ShareFolder ||
                    (this.ShareFolder != null &&
                    this.ShareFolder.Equals(input.ShareFolder))
                ) && 
                (
                    this.SendFiles == input.SendFiles ||
                    (this.SendFiles != null &&
                    this.SendFiles.Equals(input.SendFiles))
                ) && 
                (
                    this.ReceiveFiles == input.ReceiveFiles ||
                    (this.ReceiveFiles != null &&
                    this.ReceiveFiles.Equals(input.ReceiveFiles))
                ) && 
                (
                    this.UpdateShare == input.UpdateShare ||
                    (this.UpdateShare != null &&
                    this.UpdateShare.Equals(input.UpdateShare))
                ) && 
                (
                    this.UpdateReceive == input.UpdateReceive ||
                    (this.UpdateReceive != null &&
                    this.UpdateReceive.Equals(input.UpdateReceive))
                ) && 
                (
                    this.DeleteSend == input.DeleteSend ||
                    (this.DeleteSend != null &&
                    this.DeleteSend.Equals(input.DeleteSend))
                ) && 
                (
                    this.DeleteReceive == input.DeleteReceive ||
                    (this.DeleteReceive != null &&
                    this.DeleteReceive.Equals(input.DeleteReceive))
                ) && 
                (
                    this.DeleteShare == input.DeleteShare ||
                    (this.DeleteShare != null &&
                    this.DeleteShare.Equals(input.DeleteShare))
                ) && 
                (
                    this.CreateNotification == input.CreateNotification ||
                    (this.CreateNotification != null &&
                    this.CreateNotification.Equals(input.CreateNotification))
                ) && 
                (
                    this.UpdateNotification == input.UpdateNotification ||
                    (this.UpdateNotification != null &&
                    this.UpdateNotification.Equals(input.UpdateNotification))
                ) && 
                (
                    this.DeleteNotification == input.DeleteNotification ||
                    (this.DeleteNotification != null &&
                    this.DeleteNotification.Equals(input.DeleteNotification))
                ) && 
                (
                    this.CreateUser == input.CreateUser ||
                    (this.CreateUser != null &&
                    this.CreateUser.Equals(input.CreateUser))
                ) && 
                (
                    this.UpdateUser == input.UpdateUser ||
                    (this.UpdateUser != null &&
                    this.UpdateUser.Equals(input.UpdateUser))
                ) && 
                (
                    this.DeleteUser == input.DeleteUser ||
                    (this.DeleteUser != null &&
                    this.DeleteUser.Equals(input.DeleteUser))
                ) && 
                (
                    this.UserConnect == input.UserConnect ||
                    (this.UserConnect != null &&
                    this.UserConnect.Equals(input.UserConnect))
                ) && 
                (
                    this.UserDisconnect == input.UserDisconnect ||
                    (this.UserDisconnect != null &&
                    this.UserDisconnect.Equals(input.UserDisconnect))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                if (this.Download != null)
                    hashCode = hashCode * 59 + this.Download.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                if (this.CreateFolder != null)
                    hashCode = hashCode * 59 + this.CreateFolder.GetHashCode();
                if (this.Rename != null)
                    hashCode = hashCode * 59 + this.Rename.GetHashCode();
                if (this.Move != null)
                    hashCode = hashCode * 59 + this.Move.GetHashCode();
                if (this.Copy != null)
                    hashCode = hashCode * 59 + this.Copy.GetHashCode();
                if (this.Compress != null)
                    hashCode = hashCode * 59 + this.Compress.GetHashCode();
                if (this.Extract != null)
                    hashCode = hashCode * 59 + this.Extract.GetHashCode();
                if (this.ShareFolder != null)
                    hashCode = hashCode * 59 + this.ShareFolder.GetHashCode();
                if (this.SendFiles != null)
                    hashCode = hashCode * 59 + this.SendFiles.GetHashCode();
                if (this.ReceiveFiles != null)
                    hashCode = hashCode * 59 + this.ReceiveFiles.GetHashCode();
                if (this.UpdateShare != null)
                    hashCode = hashCode * 59 + this.UpdateShare.GetHashCode();
                if (this.UpdateReceive != null)
                    hashCode = hashCode * 59 + this.UpdateReceive.GetHashCode();
                if (this.DeleteSend != null)
                    hashCode = hashCode * 59 + this.DeleteSend.GetHashCode();
                if (this.DeleteReceive != null)
                    hashCode = hashCode * 59 + this.DeleteReceive.GetHashCode();
                if (this.DeleteShare != null)
                    hashCode = hashCode * 59 + this.DeleteShare.GetHashCode();
                if (this.CreateNotification != null)
                    hashCode = hashCode * 59 + this.CreateNotification.GetHashCode();
                if (this.UpdateNotification != null)
                    hashCode = hashCode * 59 + this.UpdateNotification.GetHashCode();
                if (this.DeleteNotification != null)
                    hashCode = hashCode * 59 + this.DeleteNotification.GetHashCode();
                if (this.CreateUser != null)
                    hashCode = hashCode * 59 + this.CreateUser.GetHashCode();
                if (this.UpdateUser != null)
                    hashCode = hashCode * 59 + this.UpdateUser.GetHashCode();
                if (this.DeleteUser != null)
                    hashCode = hashCode * 59 + this.DeleteUser.GetHashCode();
                if (this.UserConnect != null)
                    hashCode = hashCode * 59 + this.UserConnect.GetHashCode();
                if (this.UserDisconnect != null)
                    hashCode = hashCode * 59 + this.UserDisconnect.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body4
    /// </summary>
    [DataContract]
        public partial class Body4 :  IEquatable<Body4>, IValidatableObject
    {
        /// <summary>
        /// What kind of notification you&#x27;re making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource
        /// </summary>
        /// <value>What kind of notification you&#x27;re making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1,
            /// <summary>
            /// Enum Folder for value: folder
            /// </summary>
            [EnumMember(Value = "folder")]
            Folder = 2        }
        /// <summary>
        /// What kind of notification you&#x27;re making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource
        /// </summary>
        /// <value>What kind of notification you&#x27;re making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
        /// </summary>
        /// <value>Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActionEnum
        {
            /// <summary>
            /// Enum Upload for value: upload
            /// </summary>
            [EnumMember(Value = "upload")]
            Upload = 1,
            /// <summary>
            /// Enum Download for value: download
            /// </summary>
            [EnumMember(Value = "download")]
            Download = 2,
            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 3,
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 4        }
        /// <summary>
        /// Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
        /// </summary>
        /// <value>Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body4" /> class.
        /// </summary>
        /// <param name="type">What kind of notification you&#x27;re making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource (required).</param>
        /// <param name="resource">Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above. (required).</param>
        /// <param name="action">Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete) (required).</param>
        /// <param name="usernames">Determines which users&#x27; actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients (required).</param>
        /// <param name="sendEmail">Set to true if the user should be notified by email when the notification is triggered. (required).</param>
        /// <param name="recipients">Email addresses to send notification emails to. If not specified, sends to the current user&#x27;s email address..</param>
        /// <param name="message">Custom message to include in notification emails..</param>
        public Body4(TypeEnum type = default(TypeEnum), string resource = default(string), ActionEnum action = default(ActionEnum), List<string> usernames = default(List<string>), bool? sendEmail = default(bool?), List<string> recipients = default(List<string>), string message = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Body4 and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new InvalidDataException("resource is a required property for Body4 and cannot be null");
            }
            else
            {
                this.Resource = resource;
            }
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for Body4 and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            // to ensure "usernames" is required (not null)
            if (usernames == null)
            {
                throw new InvalidDataException("usernames is a required property for Body4 and cannot be null");
            }
            else
            {
                this.Usernames = usernames;
            }
            // to ensure "sendEmail" is required (not null)
            if (sendEmail == null)
            {
                throw new InvalidDataException("sendEmail is a required property for Body4 and cannot be null");
            }
            else
            {
                this.SendEmail = sendEmail;
            }
            this.Recipients = recipients;
            this.Message = message;
        }
        

        /// <summary>
        /// Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.
        /// </summary>
        /// <value>Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }


        /// <summary>
        /// Determines which users&#x27; actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients
        /// </summary>
        /// <value>Determines which users&#x27; actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients</value>
        [DataMember(Name="usernames", EmitDefaultValue=false)]
        public List<string> Usernames { get; set; }

        /// <summary>
        /// Set to true if the user should be notified by email when the notification is triggered.
        /// </summary>
        /// <value>Set to true if the user should be notified by email when the notification is triggered.</value>
        [DataMember(Name="sendEmail", EmitDefaultValue=false)]
        public bool? SendEmail { get; set; }

        /// <summary>
        /// Email addresses to send notification emails to. If not specified, sends to the current user&#x27;s email address.
        /// </summary>
        /// <value>Email addresses to send notification emails to. If not specified, sends to the current user&#x27;s email address.</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<string> Recipients { get; set; }

        /// <summary>
        /// Custom message to include in notification emails.
        /// </summary>
        /// <value>Custom message to include in notification emails.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body4 {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Usernames: ").Append(Usernames).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body4);
        }

        /// <summary>
        /// Returns true if Body4 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body4 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Usernames == input.Usernames ||
                    this.Usernames != null &&
                    input.Usernames != null &&
                    this.Usernames.SequenceEqual(input.Usernames)
                ) && 
                (
                    this.SendEmail == input.SendEmail ||
                    (this.SendEmail != null &&
                    this.SendEmail.Equals(input.SendEmail))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Usernames != null)
                    hashCode = hashCode * 59 + this.Usernames.GetHashCode();
                if (this.SendEmail != null)
                    hashCode = hashCode * 59 + this.SendEmail.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
